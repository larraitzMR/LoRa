
Radio_Lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c148  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800c208  0800c208  0001c208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c560  0800c560  0001c560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c568  0800c568  0001c568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c56c  0800c56c  0001c56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  0800c570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004164  20000090  0800c600  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  200041f4  0800c600  000241f4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020db8  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000049c8  00000000  00000000  00040e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001168  00000000  00000000  00045838  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f98  00000000  00000000  000469a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000999a  00000000  00000000  00047938  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000509c  00000000  00000000  000512d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005636e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004258  00000000  00000000  000563ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0005a644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c1f0 	.word	0x0800c1f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	0800c1f0 	.word	0x0800c1f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fb07 	bl	8001a18 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fa61 	bl	80018dc <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 faf9 	bl	8001a18 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 faef 	bl	8001a18 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fa81 	bl	8001950 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fa77 	bl	8001950 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_uldivmod>:
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d10f      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000478:	2900      	cmp	r1, #0
 800047a:	d100      	bne.n	800047e <__aeabi_uldivmod+0xe>
 800047c:	2800      	cmp	r0, #0
 800047e:	d002      	beq.n	8000486 <__aeabi_uldivmod+0x16>
 8000480:	2100      	movs	r1, #0
 8000482:	43c9      	mvns	r1, r1
 8000484:	1c08      	adds	r0, r1, #0
 8000486:	b407      	push	{r0, r1, r2}
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <__aeabi_uldivmod+0x24>)
 800048a:	a102      	add	r1, pc, #8	; (adr r1, 8000494 <__aeabi_uldivmod+0x24>)
 800048c:	1840      	adds	r0, r0, r1
 800048e:	9002      	str	r0, [sp, #8]
 8000490:	bd03      	pop	{r0, r1, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	ffffff5d 	.word	0xffffff5d
 8000498:	b403      	push	{r0, r1}
 800049a:	4668      	mov	r0, sp
 800049c:	b501      	push	{r0, lr}
 800049e:	9802      	ldr	r0, [sp, #8]
 80004a0:	f000 f83c 	bl	800051c <__udivmoddi4>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	469e      	mov	lr, r3
 80004a8:	b002      	add	sp, #8
 80004aa:	bc0c      	pop	{r2, r3}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__aeabi_f2uiz>:
 80004b0:	219e      	movs	r1, #158	; 0x9e
 80004b2:	b510      	push	{r4, lr}
 80004b4:	05c9      	lsls	r1, r1, #23
 80004b6:	1c04      	adds	r4, r0, #0
 80004b8:	f002 f984 	bl	80027c4 <__aeabi_fcmpge>
 80004bc:	2800      	cmp	r0, #0
 80004be:	d103      	bne.n	80004c8 <__aeabi_f2uiz+0x18>
 80004c0:	1c20      	adds	r0, r4, #0
 80004c2:	f000 fba7 	bl	8000c14 <__aeabi_f2iz>
 80004c6:	bd10      	pop	{r4, pc}
 80004c8:	219e      	movs	r1, #158	; 0x9e
 80004ca:	1c20      	adds	r0, r4, #0
 80004cc:	05c9      	lsls	r1, r1, #23
 80004ce:	f000 fa05 	bl	80008dc <__aeabi_fsub>
 80004d2:	f000 fb9f 	bl	8000c14 <__aeabi_f2iz>
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	061b      	lsls	r3, r3, #24
 80004da:	469c      	mov	ip, r3
 80004dc:	4460      	add	r0, ip
 80004de:	e7f2      	b.n	80004c6 <__aeabi_f2uiz+0x16>

080004e0 <__aeabi_d2uiz>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	2200      	movs	r2, #0
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <__aeabi_d2uiz+0x38>)
 80004e6:	0004      	movs	r4, r0
 80004e8:	000d      	movs	r5, r1
 80004ea:	f7ff ffb7 	bl	800045c <__aeabi_dcmpge>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d104      	bne.n	80004fc <__aeabi_d2uiz+0x1c>
 80004f2:	0020      	movs	r0, r4
 80004f4:	0029      	movs	r1, r5
 80004f6:	f002 f887 	bl	8002608 <__aeabi_d2iz>
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <__aeabi_d2uiz+0x38>)
 80004fe:	2200      	movs	r2, #0
 8000500:	0020      	movs	r0, r4
 8000502:	0029      	movs	r1, r5
 8000504:	f001 fd6a 	bl	8001fdc <__aeabi_dsub>
 8000508:	f002 f87e 	bl	8002608 <__aeabi_d2iz>
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	469c      	mov	ip, r3
 8000512:	4460      	add	r0, ip
 8000514:	e7f1      	b.n	80004fa <__aeabi_d2uiz+0x1a>
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	41e00000 	.word	0x41e00000

0800051c <__udivmoddi4>:
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	4657      	mov	r7, sl
 8000520:	464e      	mov	r6, r9
 8000522:	4645      	mov	r5, r8
 8000524:	46de      	mov	lr, fp
 8000526:	b5e0      	push	{r5, r6, r7, lr}
 8000528:	0004      	movs	r4, r0
 800052a:	b083      	sub	sp, #12
 800052c:	000d      	movs	r5, r1
 800052e:	4692      	mov	sl, r2
 8000530:	4699      	mov	r9, r3
 8000532:	428b      	cmp	r3, r1
 8000534:	d82f      	bhi.n	8000596 <__udivmoddi4+0x7a>
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x76>
 8000538:	4649      	mov	r1, r9
 800053a:	4650      	mov	r0, sl
 800053c:	f002 f96a 	bl	8002814 <__clzdi2>
 8000540:	0029      	movs	r1, r5
 8000542:	0006      	movs	r6, r0
 8000544:	0020      	movs	r0, r4
 8000546:	f002 f965 	bl	8002814 <__clzdi2>
 800054a:	1a33      	subs	r3, r6, r0
 800054c:	4698      	mov	r8, r3
 800054e:	3b20      	subs	r3, #32
 8000550:	469b      	mov	fp, r3
 8000552:	d500      	bpl.n	8000556 <__udivmoddi4+0x3a>
 8000554:	e074      	b.n	8000640 <__udivmoddi4+0x124>
 8000556:	4653      	mov	r3, sl
 8000558:	465a      	mov	r2, fp
 800055a:	4093      	lsls	r3, r2
 800055c:	001f      	movs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4642      	mov	r2, r8
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d829      	bhi.n	80005be <__udivmoddi4+0xa2>
 800056a:	d026      	beq.n	80005ba <__udivmoddi4+0x9e>
 800056c:	465b      	mov	r3, fp
 800056e:	1ba4      	subs	r4, r4, r6
 8000570:	41bd      	sbcs	r5, r7
 8000572:	2b00      	cmp	r3, #0
 8000574:	da00      	bge.n	8000578 <__udivmoddi4+0x5c>
 8000576:	e079      	b.n	800066c <__udivmoddi4+0x150>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2301      	movs	r3, #1
 8000582:	465a      	mov	r2, fp
 8000584:	4093      	lsls	r3, r2
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2301      	movs	r3, #1
 800058a:	4642      	mov	r2, r8
 800058c:	4093      	lsls	r3, r2
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	e019      	b.n	80005c6 <__udivmoddi4+0xaa>
 8000592:	4282      	cmp	r2, r0
 8000594:	d9d0      	bls.n	8000538 <__udivmoddi4+0x1c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <__udivmoddi4+0x8c>
 80005a4:	601c      	str	r4, [r3, #0]
 80005a6:	605d      	str	r5, [r3, #4]
 80005a8:	9800      	ldr	r0, [sp, #0]
 80005aa:	9901      	ldr	r1, [sp, #4]
 80005ac:	b003      	add	sp, #12
 80005ae:	bc3c      	pop	{r2, r3, r4, r5}
 80005b0:	4690      	mov	r8, r2
 80005b2:	4699      	mov	r9, r3
 80005b4:	46a2      	mov	sl, r4
 80005b6:	46ab      	mov	fp, r5
 80005b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ba:	42a3      	cmp	r3, r4
 80005bc:	d9d6      	bls.n	800056c <__udivmoddi4+0x50>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	4643      	mov	r3, r8
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0e8      	beq.n	800059e <__udivmoddi4+0x82>
 80005cc:	07fb      	lsls	r3, r7, #31
 80005ce:	0872      	lsrs	r2, r6, #1
 80005d0:	431a      	orrs	r2, r3
 80005d2:	4646      	mov	r6, r8
 80005d4:	087b      	lsrs	r3, r7, #1
 80005d6:	e00e      	b.n	80005f6 <__udivmoddi4+0xda>
 80005d8:	42ab      	cmp	r3, r5
 80005da:	d101      	bne.n	80005e0 <__udivmoddi4+0xc4>
 80005dc:	42a2      	cmp	r2, r4
 80005de:	d80c      	bhi.n	80005fa <__udivmoddi4+0xde>
 80005e0:	1aa4      	subs	r4, r4, r2
 80005e2:	419d      	sbcs	r5, r3
 80005e4:	2001      	movs	r0, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2100      	movs	r1, #0
 80005ec:	3e01      	subs	r6, #1
 80005ee:	1824      	adds	r4, r4, r0
 80005f0:	414d      	adcs	r5, r1
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d006      	beq.n	8000604 <__udivmoddi4+0xe8>
 80005f6:	42ab      	cmp	r3, r5
 80005f8:	d9ee      	bls.n	80005d8 <__udivmoddi4+0xbc>
 80005fa:	3e01      	subs	r6, #1
 80005fc:	1924      	adds	r4, r4, r4
 80005fe:	416d      	adcs	r5, r5
 8000600:	2e00      	cmp	r6, #0
 8000602:	d1f8      	bne.n	80005f6 <__udivmoddi4+0xda>
 8000604:	465b      	mov	r3, fp
 8000606:	9800      	ldr	r0, [sp, #0]
 8000608:	9901      	ldr	r1, [sp, #4]
 800060a:	1900      	adds	r0, r0, r4
 800060c:	4169      	adcs	r1, r5
 800060e:	2b00      	cmp	r3, #0
 8000610:	db22      	blt.n	8000658 <__udivmoddi4+0x13c>
 8000612:	002b      	movs	r3, r5
 8000614:	465a      	mov	r2, fp
 8000616:	40d3      	lsrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	4644      	mov	r4, r8
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	db2c      	blt.n	8000682 <__udivmoddi4+0x166>
 8000628:	0026      	movs	r6, r4
 800062a:	409e      	lsls	r6, r3
 800062c:	0033      	movs	r3, r6
 800062e:	0026      	movs	r6, r4
 8000630:	4647      	mov	r7, r8
 8000632:	40be      	lsls	r6, r7
 8000634:	0032      	movs	r2, r6
 8000636:	1a80      	subs	r0, r0, r2
 8000638:	4199      	sbcs	r1, r3
 800063a:	9000      	str	r0, [sp, #0]
 800063c:	9101      	str	r1, [sp, #4]
 800063e:	e7ae      	b.n	800059e <__udivmoddi4+0x82>
 8000640:	4642      	mov	r2, r8
 8000642:	2320      	movs	r3, #32
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	4652      	mov	r2, sl
 8000648:	40da      	lsrs	r2, r3
 800064a:	4641      	mov	r1, r8
 800064c:	0013      	movs	r3, r2
 800064e:	464a      	mov	r2, r9
 8000650:	408a      	lsls	r2, r1
 8000652:	0017      	movs	r7, r2
 8000654:	431f      	orrs	r7, r3
 8000656:	e782      	b.n	800055e <__udivmoddi4+0x42>
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	4646      	mov	r6, r8
 8000662:	409a      	lsls	r2, r3
 8000664:	0023      	movs	r3, r4
 8000666:	40f3      	lsrs	r3, r6
 8000668:	4313      	orrs	r3, r2
 800066a:	e7d5      	b.n	8000618 <__udivmoddi4+0xfc>
 800066c:	4642      	mov	r2, r8
 800066e:	2320      	movs	r3, #32
 8000670:	2100      	movs	r1, #0
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	9100      	str	r1, [sp, #0]
 8000678:	9201      	str	r2, [sp, #4]
 800067a:	2201      	movs	r2, #1
 800067c:	40da      	lsrs	r2, r3
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	e782      	b.n	8000588 <__udivmoddi4+0x6c>
 8000682:	4642      	mov	r2, r8
 8000684:	2320      	movs	r3, #32
 8000686:	0026      	movs	r6, r4
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	40de      	lsrs	r6, r3
 800068c:	002f      	movs	r7, r5
 800068e:	46b4      	mov	ip, r6
 8000690:	4097      	lsls	r7, r2
 8000692:	4666      	mov	r6, ip
 8000694:	003b      	movs	r3, r7
 8000696:	4333      	orrs	r3, r6
 8000698:	e7c9      	b.n	800062e <__udivmoddi4+0x112>
 800069a:	46c0      	nop			; (mov r8, r8)

0800069c <__aeabi_fmul>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	4657      	mov	r7, sl
 80006a0:	464e      	mov	r6, r9
 80006a2:	4645      	mov	r5, r8
 80006a4:	46de      	mov	lr, fp
 80006a6:	b5e0      	push	{r5, r6, r7, lr}
 80006a8:	0247      	lsls	r7, r0, #9
 80006aa:	0046      	lsls	r6, r0, #1
 80006ac:	4688      	mov	r8, r1
 80006ae:	0a7f      	lsrs	r7, r7, #9
 80006b0:	0e36      	lsrs	r6, r6, #24
 80006b2:	0fc4      	lsrs	r4, r0, #31
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d047      	beq.n	8000748 <__aeabi_fmul+0xac>
 80006b8:	2eff      	cmp	r6, #255	; 0xff
 80006ba:	d024      	beq.n	8000706 <__aeabi_fmul+0x6a>
 80006bc:	00fb      	lsls	r3, r7, #3
 80006be:	2780      	movs	r7, #128	; 0x80
 80006c0:	04ff      	lsls	r7, r7, #19
 80006c2:	431f      	orrs	r7, r3
 80006c4:	2300      	movs	r3, #0
 80006c6:	4699      	mov	r9, r3
 80006c8:	469a      	mov	sl, r3
 80006ca:	3e7f      	subs	r6, #127	; 0x7f
 80006cc:	4643      	mov	r3, r8
 80006ce:	025d      	lsls	r5, r3, #9
 80006d0:	0058      	lsls	r0, r3, #1
 80006d2:	0fdb      	lsrs	r3, r3, #31
 80006d4:	0a6d      	lsrs	r5, r5, #9
 80006d6:	0e00      	lsrs	r0, r0, #24
 80006d8:	4698      	mov	r8, r3
 80006da:	d043      	beq.n	8000764 <__aeabi_fmul+0xc8>
 80006dc:	28ff      	cmp	r0, #255	; 0xff
 80006de:	d03b      	beq.n	8000758 <__aeabi_fmul+0xbc>
 80006e0:	00eb      	lsls	r3, r5, #3
 80006e2:	2580      	movs	r5, #128	; 0x80
 80006e4:	2200      	movs	r2, #0
 80006e6:	04ed      	lsls	r5, r5, #19
 80006e8:	431d      	orrs	r5, r3
 80006ea:	387f      	subs	r0, #127	; 0x7f
 80006ec:	1836      	adds	r6, r6, r0
 80006ee:	1c73      	adds	r3, r6, #1
 80006f0:	4641      	mov	r1, r8
 80006f2:	469b      	mov	fp, r3
 80006f4:	464b      	mov	r3, r9
 80006f6:	4061      	eors	r1, r4
 80006f8:	4313      	orrs	r3, r2
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d864      	bhi.n	80007c8 <__aeabi_fmul+0x12c>
 80006fe:	4875      	ldr	r0, [pc, #468]	; (80008d4 <__aeabi_fmul+0x238>)
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	58c3      	ldr	r3, [r0, r3]
 8000704:	469f      	mov	pc, r3
 8000706:	2f00      	cmp	r7, #0
 8000708:	d142      	bne.n	8000790 <__aeabi_fmul+0xf4>
 800070a:	2308      	movs	r3, #8
 800070c:	4699      	mov	r9, r3
 800070e:	3b06      	subs	r3, #6
 8000710:	26ff      	movs	r6, #255	; 0xff
 8000712:	469a      	mov	sl, r3
 8000714:	e7da      	b.n	80006cc <__aeabi_fmul+0x30>
 8000716:	4641      	mov	r1, r8
 8000718:	2a02      	cmp	r2, #2
 800071a:	d028      	beq.n	800076e <__aeabi_fmul+0xd2>
 800071c:	2a03      	cmp	r2, #3
 800071e:	d100      	bne.n	8000722 <__aeabi_fmul+0x86>
 8000720:	e0ce      	b.n	80008c0 <__aeabi_fmul+0x224>
 8000722:	2a01      	cmp	r2, #1
 8000724:	d000      	beq.n	8000728 <__aeabi_fmul+0x8c>
 8000726:	e0ac      	b.n	8000882 <__aeabi_fmul+0x1e6>
 8000728:	4011      	ands	r1, r2
 800072a:	2000      	movs	r0, #0
 800072c:	2200      	movs	r2, #0
 800072e:	b2cc      	uxtb	r4, r1
 8000730:	0240      	lsls	r0, r0, #9
 8000732:	05d2      	lsls	r2, r2, #23
 8000734:	0a40      	lsrs	r0, r0, #9
 8000736:	07e4      	lsls	r4, r4, #31
 8000738:	4310      	orrs	r0, r2
 800073a:	4320      	orrs	r0, r4
 800073c:	bc3c      	pop	{r2, r3, r4, r5}
 800073e:	4690      	mov	r8, r2
 8000740:	4699      	mov	r9, r3
 8000742:	46a2      	mov	sl, r4
 8000744:	46ab      	mov	fp, r5
 8000746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000748:	2f00      	cmp	r7, #0
 800074a:	d115      	bne.n	8000778 <__aeabi_fmul+0xdc>
 800074c:	2304      	movs	r3, #4
 800074e:	4699      	mov	r9, r3
 8000750:	3b03      	subs	r3, #3
 8000752:	2600      	movs	r6, #0
 8000754:	469a      	mov	sl, r3
 8000756:	e7b9      	b.n	80006cc <__aeabi_fmul+0x30>
 8000758:	20ff      	movs	r0, #255	; 0xff
 800075a:	2202      	movs	r2, #2
 800075c:	2d00      	cmp	r5, #0
 800075e:	d0c5      	beq.n	80006ec <__aeabi_fmul+0x50>
 8000760:	2203      	movs	r2, #3
 8000762:	e7c3      	b.n	80006ec <__aeabi_fmul+0x50>
 8000764:	2d00      	cmp	r5, #0
 8000766:	d119      	bne.n	800079c <__aeabi_fmul+0x100>
 8000768:	2000      	movs	r0, #0
 800076a:	2201      	movs	r2, #1
 800076c:	e7be      	b.n	80006ec <__aeabi_fmul+0x50>
 800076e:	2401      	movs	r4, #1
 8000770:	22ff      	movs	r2, #255	; 0xff
 8000772:	400c      	ands	r4, r1
 8000774:	2000      	movs	r0, #0
 8000776:	e7db      	b.n	8000730 <__aeabi_fmul+0x94>
 8000778:	0038      	movs	r0, r7
 800077a:	f002 f82d 	bl	80027d8 <__clzsi2>
 800077e:	2676      	movs	r6, #118	; 0x76
 8000780:	1f43      	subs	r3, r0, #5
 8000782:	409f      	lsls	r7, r3
 8000784:	2300      	movs	r3, #0
 8000786:	4276      	negs	r6, r6
 8000788:	1a36      	subs	r6, r6, r0
 800078a:	4699      	mov	r9, r3
 800078c:	469a      	mov	sl, r3
 800078e:	e79d      	b.n	80006cc <__aeabi_fmul+0x30>
 8000790:	230c      	movs	r3, #12
 8000792:	4699      	mov	r9, r3
 8000794:	3b09      	subs	r3, #9
 8000796:	26ff      	movs	r6, #255	; 0xff
 8000798:	469a      	mov	sl, r3
 800079a:	e797      	b.n	80006cc <__aeabi_fmul+0x30>
 800079c:	0028      	movs	r0, r5
 800079e:	f002 f81b 	bl	80027d8 <__clzsi2>
 80007a2:	1f43      	subs	r3, r0, #5
 80007a4:	409d      	lsls	r5, r3
 80007a6:	2376      	movs	r3, #118	; 0x76
 80007a8:	425b      	negs	r3, r3
 80007aa:	1a18      	subs	r0, r3, r0
 80007ac:	2200      	movs	r2, #0
 80007ae:	e79d      	b.n	80006ec <__aeabi_fmul+0x50>
 80007b0:	2080      	movs	r0, #128	; 0x80
 80007b2:	2400      	movs	r4, #0
 80007b4:	03c0      	lsls	r0, r0, #15
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	e7ba      	b.n	8000730 <__aeabi_fmul+0x94>
 80007ba:	003d      	movs	r5, r7
 80007bc:	4652      	mov	r2, sl
 80007be:	e7ab      	b.n	8000718 <__aeabi_fmul+0x7c>
 80007c0:	003d      	movs	r5, r7
 80007c2:	0021      	movs	r1, r4
 80007c4:	4652      	mov	r2, sl
 80007c6:	e7a7      	b.n	8000718 <__aeabi_fmul+0x7c>
 80007c8:	0c3b      	lsrs	r3, r7, #16
 80007ca:	469c      	mov	ip, r3
 80007cc:	042a      	lsls	r2, r5, #16
 80007ce:	0c12      	lsrs	r2, r2, #16
 80007d0:	0c2b      	lsrs	r3, r5, #16
 80007d2:	0014      	movs	r4, r2
 80007d4:	4660      	mov	r0, ip
 80007d6:	4665      	mov	r5, ip
 80007d8:	043f      	lsls	r7, r7, #16
 80007da:	0c3f      	lsrs	r7, r7, #16
 80007dc:	437c      	muls	r4, r7
 80007de:	4342      	muls	r2, r0
 80007e0:	435d      	muls	r5, r3
 80007e2:	437b      	muls	r3, r7
 80007e4:	0c27      	lsrs	r7, r4, #16
 80007e6:	189b      	adds	r3, r3, r2
 80007e8:	18ff      	adds	r7, r7, r3
 80007ea:	42ba      	cmp	r2, r7
 80007ec:	d903      	bls.n	80007f6 <__aeabi_fmul+0x15a>
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	025b      	lsls	r3, r3, #9
 80007f2:	469c      	mov	ip, r3
 80007f4:	4465      	add	r5, ip
 80007f6:	0424      	lsls	r4, r4, #16
 80007f8:	043a      	lsls	r2, r7, #16
 80007fa:	0c24      	lsrs	r4, r4, #16
 80007fc:	1912      	adds	r2, r2, r4
 80007fe:	0193      	lsls	r3, r2, #6
 8000800:	1e5c      	subs	r4, r3, #1
 8000802:	41a3      	sbcs	r3, r4
 8000804:	0c3f      	lsrs	r7, r7, #16
 8000806:	0e92      	lsrs	r2, r2, #26
 8000808:	197d      	adds	r5, r7, r5
 800080a:	431a      	orrs	r2, r3
 800080c:	01ad      	lsls	r5, r5, #6
 800080e:	4315      	orrs	r5, r2
 8000810:	012b      	lsls	r3, r5, #4
 8000812:	d504      	bpl.n	800081e <__aeabi_fmul+0x182>
 8000814:	2301      	movs	r3, #1
 8000816:	465e      	mov	r6, fp
 8000818:	086a      	lsrs	r2, r5, #1
 800081a:	401d      	ands	r5, r3
 800081c:	4315      	orrs	r5, r2
 800081e:	0032      	movs	r2, r6
 8000820:	327f      	adds	r2, #127	; 0x7f
 8000822:	2a00      	cmp	r2, #0
 8000824:	dd25      	ble.n	8000872 <__aeabi_fmul+0x1d6>
 8000826:	076b      	lsls	r3, r5, #29
 8000828:	d004      	beq.n	8000834 <__aeabi_fmul+0x198>
 800082a:	230f      	movs	r3, #15
 800082c:	402b      	ands	r3, r5
 800082e:	2b04      	cmp	r3, #4
 8000830:	d000      	beq.n	8000834 <__aeabi_fmul+0x198>
 8000832:	3504      	adds	r5, #4
 8000834:	012b      	lsls	r3, r5, #4
 8000836:	d503      	bpl.n	8000840 <__aeabi_fmul+0x1a4>
 8000838:	0032      	movs	r2, r6
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <__aeabi_fmul+0x23c>)
 800083c:	3280      	adds	r2, #128	; 0x80
 800083e:	401d      	ands	r5, r3
 8000840:	2afe      	cmp	r2, #254	; 0xfe
 8000842:	dc94      	bgt.n	800076e <__aeabi_fmul+0xd2>
 8000844:	2401      	movs	r4, #1
 8000846:	01a8      	lsls	r0, r5, #6
 8000848:	0a40      	lsrs	r0, r0, #9
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	400c      	ands	r4, r1
 800084e:	e76f      	b.n	8000730 <__aeabi_fmul+0x94>
 8000850:	2080      	movs	r0, #128	; 0x80
 8000852:	03c0      	lsls	r0, r0, #15
 8000854:	4207      	tst	r7, r0
 8000856:	d007      	beq.n	8000868 <__aeabi_fmul+0x1cc>
 8000858:	4205      	tst	r5, r0
 800085a:	d105      	bne.n	8000868 <__aeabi_fmul+0x1cc>
 800085c:	4328      	orrs	r0, r5
 800085e:	0240      	lsls	r0, r0, #9
 8000860:	0a40      	lsrs	r0, r0, #9
 8000862:	4644      	mov	r4, r8
 8000864:	22ff      	movs	r2, #255	; 0xff
 8000866:	e763      	b.n	8000730 <__aeabi_fmul+0x94>
 8000868:	4338      	orrs	r0, r7
 800086a:	0240      	lsls	r0, r0, #9
 800086c:	0a40      	lsrs	r0, r0, #9
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	e75e      	b.n	8000730 <__aeabi_fmul+0x94>
 8000872:	2401      	movs	r4, #1
 8000874:	1aa3      	subs	r3, r4, r2
 8000876:	2b1b      	cmp	r3, #27
 8000878:	dd05      	ble.n	8000886 <__aeabi_fmul+0x1ea>
 800087a:	400c      	ands	r4, r1
 800087c:	2200      	movs	r2, #0
 800087e:	2000      	movs	r0, #0
 8000880:	e756      	b.n	8000730 <__aeabi_fmul+0x94>
 8000882:	465e      	mov	r6, fp
 8000884:	e7cb      	b.n	800081e <__aeabi_fmul+0x182>
 8000886:	002a      	movs	r2, r5
 8000888:	2020      	movs	r0, #32
 800088a:	40da      	lsrs	r2, r3
 800088c:	1ac3      	subs	r3, r0, r3
 800088e:	409d      	lsls	r5, r3
 8000890:	002b      	movs	r3, r5
 8000892:	1e5d      	subs	r5, r3, #1
 8000894:	41ab      	sbcs	r3, r5
 8000896:	4313      	orrs	r3, r2
 8000898:	075a      	lsls	r2, r3, #29
 800089a:	d004      	beq.n	80008a6 <__aeabi_fmul+0x20a>
 800089c:	220f      	movs	r2, #15
 800089e:	401a      	ands	r2, r3
 80008a0:	2a04      	cmp	r2, #4
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fmul+0x20a>
 80008a4:	3304      	adds	r3, #4
 80008a6:	015a      	lsls	r2, r3, #5
 80008a8:	d504      	bpl.n	80008b4 <__aeabi_fmul+0x218>
 80008aa:	2401      	movs	r4, #1
 80008ac:	2201      	movs	r2, #1
 80008ae:	400c      	ands	r4, r1
 80008b0:	2000      	movs	r0, #0
 80008b2:	e73d      	b.n	8000730 <__aeabi_fmul+0x94>
 80008b4:	2401      	movs	r4, #1
 80008b6:	019b      	lsls	r3, r3, #6
 80008b8:	0a58      	lsrs	r0, r3, #9
 80008ba:	400c      	ands	r4, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	e737      	b.n	8000730 <__aeabi_fmul+0x94>
 80008c0:	2080      	movs	r0, #128	; 0x80
 80008c2:	2401      	movs	r4, #1
 80008c4:	03c0      	lsls	r0, r0, #15
 80008c6:	4328      	orrs	r0, r5
 80008c8:	0240      	lsls	r0, r0, #9
 80008ca:	0a40      	lsrs	r0, r0, #9
 80008cc:	400c      	ands	r4, r1
 80008ce:	22ff      	movs	r2, #255	; 0xff
 80008d0:	e72e      	b.n	8000730 <__aeabi_fmul+0x94>
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	0800c26c 	.word	0x0800c26c
 80008d8:	f7ffffff 	.word	0xf7ffffff

080008dc <__aeabi_fsub>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	464f      	mov	r7, r9
 80008e0:	46d6      	mov	lr, sl
 80008e2:	4646      	mov	r6, r8
 80008e4:	0044      	lsls	r4, r0, #1
 80008e6:	b5c0      	push	{r6, r7, lr}
 80008e8:	0fc2      	lsrs	r2, r0, #31
 80008ea:	0247      	lsls	r7, r0, #9
 80008ec:	0248      	lsls	r0, r1, #9
 80008ee:	0a40      	lsrs	r0, r0, #9
 80008f0:	4684      	mov	ip, r0
 80008f2:	4666      	mov	r6, ip
 80008f4:	0a7b      	lsrs	r3, r7, #9
 80008f6:	0048      	lsls	r0, r1, #1
 80008f8:	0fc9      	lsrs	r1, r1, #31
 80008fa:	469a      	mov	sl, r3
 80008fc:	0e24      	lsrs	r4, r4, #24
 80008fe:	0015      	movs	r5, r2
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	0e00      	lsrs	r0, r0, #24
 8000904:	4689      	mov	r9, r1
 8000906:	00f6      	lsls	r6, r6, #3
 8000908:	28ff      	cmp	r0, #255	; 0xff
 800090a:	d100      	bne.n	800090e <__aeabi_fsub+0x32>
 800090c:	e08f      	b.n	8000a2e <__aeabi_fsub+0x152>
 800090e:	2101      	movs	r1, #1
 8000910:	464f      	mov	r7, r9
 8000912:	404f      	eors	r7, r1
 8000914:	0039      	movs	r1, r7
 8000916:	4291      	cmp	r1, r2
 8000918:	d066      	beq.n	80009e8 <__aeabi_fsub+0x10c>
 800091a:	1a22      	subs	r2, r4, r0
 800091c:	2a00      	cmp	r2, #0
 800091e:	dc00      	bgt.n	8000922 <__aeabi_fsub+0x46>
 8000920:	e09d      	b.n	8000a5e <__aeabi_fsub+0x182>
 8000922:	2800      	cmp	r0, #0
 8000924:	d13d      	bne.n	80009a2 <__aeabi_fsub+0xc6>
 8000926:	2e00      	cmp	r6, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fsub+0x50>
 800092a:	e08b      	b.n	8000a44 <__aeabi_fsub+0x168>
 800092c:	1e51      	subs	r1, r2, #1
 800092e:	2900      	cmp	r1, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fsub+0x58>
 8000932:	e0b5      	b.n	8000aa0 <__aeabi_fsub+0x1c4>
 8000934:	2401      	movs	r4, #1
 8000936:	1b9b      	subs	r3, r3, r6
 8000938:	015a      	lsls	r2, r3, #5
 800093a:	d544      	bpl.n	80009c6 <__aeabi_fsub+0xea>
 800093c:	019b      	lsls	r3, r3, #6
 800093e:	099f      	lsrs	r7, r3, #6
 8000940:	0038      	movs	r0, r7
 8000942:	f001 ff49 	bl	80027d8 <__clzsi2>
 8000946:	3805      	subs	r0, #5
 8000948:	4087      	lsls	r7, r0
 800094a:	4284      	cmp	r4, r0
 800094c:	dd00      	ble.n	8000950 <__aeabi_fsub+0x74>
 800094e:	e096      	b.n	8000a7e <__aeabi_fsub+0x1a2>
 8000950:	1b04      	subs	r4, r0, r4
 8000952:	003a      	movs	r2, r7
 8000954:	2020      	movs	r0, #32
 8000956:	3401      	adds	r4, #1
 8000958:	40e2      	lsrs	r2, r4
 800095a:	1b04      	subs	r4, r0, r4
 800095c:	40a7      	lsls	r7, r4
 800095e:	003b      	movs	r3, r7
 8000960:	1e5f      	subs	r7, r3, #1
 8000962:	41bb      	sbcs	r3, r7
 8000964:	2400      	movs	r4, #0
 8000966:	4313      	orrs	r3, r2
 8000968:	075a      	lsls	r2, r3, #29
 800096a:	d004      	beq.n	8000976 <__aeabi_fsub+0x9a>
 800096c:	220f      	movs	r2, #15
 800096e:	401a      	ands	r2, r3
 8000970:	2a04      	cmp	r2, #4
 8000972:	d000      	beq.n	8000976 <__aeabi_fsub+0x9a>
 8000974:	3304      	adds	r3, #4
 8000976:	015a      	lsls	r2, r3, #5
 8000978:	d527      	bpl.n	80009ca <__aeabi_fsub+0xee>
 800097a:	3401      	adds	r4, #1
 800097c:	2cff      	cmp	r4, #255	; 0xff
 800097e:	d100      	bne.n	8000982 <__aeabi_fsub+0xa6>
 8000980:	e079      	b.n	8000a76 <__aeabi_fsub+0x19a>
 8000982:	2201      	movs	r2, #1
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	0a5b      	lsrs	r3, r3, #9
 8000988:	b2e4      	uxtb	r4, r4
 800098a:	402a      	ands	r2, r5
 800098c:	025b      	lsls	r3, r3, #9
 800098e:	05e4      	lsls	r4, r4, #23
 8000990:	0a58      	lsrs	r0, r3, #9
 8000992:	07d2      	lsls	r2, r2, #31
 8000994:	4320      	orrs	r0, r4
 8000996:	4310      	orrs	r0, r2
 8000998:	bc1c      	pop	{r2, r3, r4}
 800099a:	4690      	mov	r8, r2
 800099c:	4699      	mov	r9, r3
 800099e:	46a2      	mov	sl, r4
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a2:	2cff      	cmp	r4, #255	; 0xff
 80009a4:	d0e0      	beq.n	8000968 <__aeabi_fsub+0x8c>
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	04c9      	lsls	r1, r1, #19
 80009aa:	430e      	orrs	r6, r1
 80009ac:	2a1b      	cmp	r2, #27
 80009ae:	dc7b      	bgt.n	8000aa8 <__aeabi_fsub+0x1cc>
 80009b0:	0031      	movs	r1, r6
 80009b2:	2020      	movs	r0, #32
 80009b4:	40d1      	lsrs	r1, r2
 80009b6:	1a82      	subs	r2, r0, r2
 80009b8:	4096      	lsls	r6, r2
 80009ba:	1e72      	subs	r2, r6, #1
 80009bc:	4196      	sbcs	r6, r2
 80009be:	430e      	orrs	r6, r1
 80009c0:	1b9b      	subs	r3, r3, r6
 80009c2:	015a      	lsls	r2, r3, #5
 80009c4:	d4ba      	bmi.n	800093c <__aeabi_fsub+0x60>
 80009c6:	075a      	lsls	r2, r3, #29
 80009c8:	d1d0      	bne.n	800096c <__aeabi_fsub+0x90>
 80009ca:	2201      	movs	r2, #1
 80009cc:	08df      	lsrs	r7, r3, #3
 80009ce:	402a      	ands	r2, r5
 80009d0:	2cff      	cmp	r4, #255	; 0xff
 80009d2:	d133      	bne.n	8000a3c <__aeabi_fsub+0x160>
 80009d4:	2f00      	cmp	r7, #0
 80009d6:	d100      	bne.n	80009da <__aeabi_fsub+0xfe>
 80009d8:	e0a8      	b.n	8000b2c <__aeabi_fsub+0x250>
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	03db      	lsls	r3, r3, #15
 80009de:	433b      	orrs	r3, r7
 80009e0:	025b      	lsls	r3, r3, #9
 80009e2:	0a5b      	lsrs	r3, r3, #9
 80009e4:	24ff      	movs	r4, #255	; 0xff
 80009e6:	e7d1      	b.n	800098c <__aeabi_fsub+0xb0>
 80009e8:	1a21      	subs	r1, r4, r0
 80009ea:	2900      	cmp	r1, #0
 80009ec:	dd4c      	ble.n	8000a88 <__aeabi_fsub+0x1ac>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d02a      	beq.n	8000a48 <__aeabi_fsub+0x16c>
 80009f2:	2cff      	cmp	r4, #255	; 0xff
 80009f4:	d0b8      	beq.n	8000968 <__aeabi_fsub+0x8c>
 80009f6:	2080      	movs	r0, #128	; 0x80
 80009f8:	04c0      	lsls	r0, r0, #19
 80009fa:	4306      	orrs	r6, r0
 80009fc:	291b      	cmp	r1, #27
 80009fe:	dd00      	ble.n	8000a02 <__aeabi_fsub+0x126>
 8000a00:	e0af      	b.n	8000b62 <__aeabi_fsub+0x286>
 8000a02:	0030      	movs	r0, r6
 8000a04:	2720      	movs	r7, #32
 8000a06:	40c8      	lsrs	r0, r1
 8000a08:	1a79      	subs	r1, r7, r1
 8000a0a:	408e      	lsls	r6, r1
 8000a0c:	1e71      	subs	r1, r6, #1
 8000a0e:	418e      	sbcs	r6, r1
 8000a10:	4306      	orrs	r6, r0
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	0159      	lsls	r1, r3, #5
 8000a16:	d5d6      	bpl.n	80009c6 <__aeabi_fsub+0xea>
 8000a18:	3401      	adds	r4, #1
 8000a1a:	2cff      	cmp	r4, #255	; 0xff
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0x144>
 8000a1e:	e085      	b.n	8000b2c <__aeabi_fsub+0x250>
 8000a20:	2201      	movs	r2, #1
 8000a22:	497a      	ldr	r1, [pc, #488]	; (8000c0c <__aeabi_fsub+0x330>)
 8000a24:	401a      	ands	r2, r3
 8000a26:	085b      	lsrs	r3, r3, #1
 8000a28:	400b      	ands	r3, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	e79c      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fsub+0x158>
 8000a32:	e770      	b.n	8000916 <__aeabi_fsub+0x3a>
 8000a34:	e76b      	b.n	800090e <__aeabi_fsub+0x32>
 8000a36:	1e3b      	subs	r3, r7, #0
 8000a38:	d1c5      	bne.n	80009c6 <__aeabi_fsub+0xea>
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	027b      	lsls	r3, r7, #9
 8000a3e:	0a5b      	lsrs	r3, r3, #9
 8000a40:	b2e4      	uxtb	r4, r4
 8000a42:	e7a3      	b.n	800098c <__aeabi_fsub+0xb0>
 8000a44:	0014      	movs	r4, r2
 8000a46:	e78f      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000a48:	2e00      	cmp	r6, #0
 8000a4a:	d04d      	beq.n	8000ae8 <__aeabi_fsub+0x20c>
 8000a4c:	1e48      	subs	r0, r1, #1
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d157      	bne.n	8000b02 <__aeabi_fsub+0x226>
 8000a52:	199b      	adds	r3, r3, r6
 8000a54:	2401      	movs	r4, #1
 8000a56:	015a      	lsls	r2, r3, #5
 8000a58:	d5b5      	bpl.n	80009c6 <__aeabi_fsub+0xea>
 8000a5a:	2402      	movs	r4, #2
 8000a5c:	e7e0      	b.n	8000a20 <__aeabi_fsub+0x144>
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d125      	bne.n	8000aae <__aeabi_fsub+0x1d2>
 8000a62:	1c62      	adds	r2, r4, #1
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	2a01      	cmp	r2, #1
 8000a68:	dd72      	ble.n	8000b50 <__aeabi_fsub+0x274>
 8000a6a:	1b9f      	subs	r7, r3, r6
 8000a6c:	017a      	lsls	r2, r7, #5
 8000a6e:	d535      	bpl.n	8000adc <__aeabi_fsub+0x200>
 8000a70:	1af7      	subs	r7, r6, r3
 8000a72:	000d      	movs	r5, r1
 8000a74:	e764      	b.n	8000940 <__aeabi_fsub+0x64>
 8000a76:	2201      	movs	r2, #1
 8000a78:	2300      	movs	r3, #0
 8000a7a:	402a      	ands	r2, r5
 8000a7c:	e786      	b.n	800098c <__aeabi_fsub+0xb0>
 8000a7e:	003b      	movs	r3, r7
 8000a80:	4a63      	ldr	r2, [pc, #396]	; (8000c10 <__aeabi_fsub+0x334>)
 8000a82:	1a24      	subs	r4, r4, r0
 8000a84:	4013      	ands	r3, r2
 8000a86:	e76f      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	d16c      	bne.n	8000b66 <__aeabi_fsub+0x28a>
 8000a8c:	1c61      	adds	r1, r4, #1
 8000a8e:	b2c8      	uxtb	r0, r1
 8000a90:	2801      	cmp	r0, #1
 8000a92:	dd4e      	ble.n	8000b32 <__aeabi_fsub+0x256>
 8000a94:	29ff      	cmp	r1, #255	; 0xff
 8000a96:	d049      	beq.n	8000b2c <__aeabi_fsub+0x250>
 8000a98:	199b      	adds	r3, r3, r6
 8000a9a:	085b      	lsrs	r3, r3, #1
 8000a9c:	000c      	movs	r4, r1
 8000a9e:	e763      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000aa0:	2aff      	cmp	r2, #255	; 0xff
 8000aa2:	d041      	beq.n	8000b28 <__aeabi_fsub+0x24c>
 8000aa4:	000a      	movs	r2, r1
 8000aa6:	e781      	b.n	80009ac <__aeabi_fsub+0xd0>
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	1b9b      	subs	r3, r3, r6
 8000aac:	e789      	b.n	80009c2 <__aeabi_fsub+0xe6>
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d01c      	beq.n	8000aec <__aeabi_fsub+0x210>
 8000ab2:	28ff      	cmp	r0, #255	; 0xff
 8000ab4:	d021      	beq.n	8000afa <__aeabi_fsub+0x21e>
 8000ab6:	2480      	movs	r4, #128	; 0x80
 8000ab8:	04e4      	lsls	r4, r4, #19
 8000aba:	4252      	negs	r2, r2
 8000abc:	4323      	orrs	r3, r4
 8000abe:	2a1b      	cmp	r2, #27
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_fsub+0x1e8>
 8000ac2:	e096      	b.n	8000bf2 <__aeabi_fsub+0x316>
 8000ac4:	001c      	movs	r4, r3
 8000ac6:	2520      	movs	r5, #32
 8000ac8:	40d4      	lsrs	r4, r2
 8000aca:	1aaa      	subs	r2, r5, r2
 8000acc:	4093      	lsls	r3, r2
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	4193      	sbcs	r3, r2
 8000ad2:	4323      	orrs	r3, r4
 8000ad4:	1af3      	subs	r3, r6, r3
 8000ad6:	0004      	movs	r4, r0
 8000ad8:	000d      	movs	r5, r1
 8000ada:	e72d      	b.n	8000938 <__aeabi_fsub+0x5c>
 8000adc:	2f00      	cmp	r7, #0
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fsub+0x206>
 8000ae0:	e72e      	b.n	8000940 <__aeabi_fsub+0x64>
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	e7a9      	b.n	8000a3c <__aeabi_fsub+0x160>
 8000ae8:	000c      	movs	r4, r1
 8000aea:	e73d      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d058      	beq.n	8000ba2 <__aeabi_fsub+0x2c6>
 8000af0:	43d2      	mvns	r2, r2
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d0ee      	beq.n	8000ad4 <__aeabi_fsub+0x1f8>
 8000af6:	28ff      	cmp	r0, #255	; 0xff
 8000af8:	d1e1      	bne.n	8000abe <__aeabi_fsub+0x1e2>
 8000afa:	0033      	movs	r3, r6
 8000afc:	24ff      	movs	r4, #255	; 0xff
 8000afe:	000d      	movs	r5, r1
 8000b00:	e732      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000b02:	29ff      	cmp	r1, #255	; 0xff
 8000b04:	d010      	beq.n	8000b28 <__aeabi_fsub+0x24c>
 8000b06:	0001      	movs	r1, r0
 8000b08:	e778      	b.n	80009fc <__aeabi_fsub+0x120>
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d06e      	beq.n	8000bec <__aeabi_fsub+0x310>
 8000b0e:	24ff      	movs	r4, #255	; 0xff
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fsub+0x23a>
 8000b14:	e728      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	4651      	mov	r1, sl
 8000b1a:	03d2      	lsls	r2, r2, #15
 8000b1c:	4211      	tst	r1, r2
 8000b1e:	d003      	beq.n	8000b28 <__aeabi_fsub+0x24c>
 8000b20:	4661      	mov	r1, ip
 8000b22:	4211      	tst	r1, r2
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fsub+0x24c>
 8000b26:	0033      	movs	r3, r6
 8000b28:	24ff      	movs	r4, #255	; 0xff
 8000b2a:	e71d      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000b2c:	24ff      	movs	r4, #255	; 0xff
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e72c      	b.n	800098c <__aeabi_fsub+0xb0>
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d1e9      	bne.n	8000b0a <__aeabi_fsub+0x22e>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d063      	beq.n	8000c02 <__aeabi_fsub+0x326>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_fsub+0x264>
 8000b3e:	e713      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000b40:	199b      	adds	r3, r3, r6
 8000b42:	015a      	lsls	r2, r3, #5
 8000b44:	d400      	bmi.n	8000b48 <__aeabi_fsub+0x26c>
 8000b46:	e73e      	b.n	80009c6 <__aeabi_fsub+0xea>
 8000b48:	4a31      	ldr	r2, [pc, #196]	; (8000c10 <__aeabi_fsub+0x334>)
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	e70b      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d11e      	bne.n	8000b92 <__aeabi_fsub+0x2b6>
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d12f      	bne.n	8000bb8 <__aeabi_fsub+0x2dc>
 8000b58:	2e00      	cmp	r6, #0
 8000b5a:	d04f      	beq.n	8000bfc <__aeabi_fsub+0x320>
 8000b5c:	0033      	movs	r3, r6
 8000b5e:	000d      	movs	r5, r1
 8000b60:	e702      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000b62:	2601      	movs	r6, #1
 8000b64:	e755      	b.n	8000a12 <__aeabi_fsub+0x136>
 8000b66:	2c00      	cmp	r4, #0
 8000b68:	d11f      	bne.n	8000baa <__aeabi_fsub+0x2ce>
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d043      	beq.n	8000bf6 <__aeabi_fsub+0x31a>
 8000b6e:	43c9      	mvns	r1, r1
 8000b70:	2900      	cmp	r1, #0
 8000b72:	d00b      	beq.n	8000b8c <__aeabi_fsub+0x2b0>
 8000b74:	28ff      	cmp	r0, #255	; 0xff
 8000b76:	d039      	beq.n	8000bec <__aeabi_fsub+0x310>
 8000b78:	291b      	cmp	r1, #27
 8000b7a:	dc44      	bgt.n	8000c06 <__aeabi_fsub+0x32a>
 8000b7c:	001c      	movs	r4, r3
 8000b7e:	2720      	movs	r7, #32
 8000b80:	40cc      	lsrs	r4, r1
 8000b82:	1a79      	subs	r1, r7, r1
 8000b84:	408b      	lsls	r3, r1
 8000b86:	1e59      	subs	r1, r3, #1
 8000b88:	418b      	sbcs	r3, r1
 8000b8a:	4323      	orrs	r3, r4
 8000b8c:	199b      	adds	r3, r3, r6
 8000b8e:	0004      	movs	r4, r0
 8000b90:	e740      	b.n	8000a14 <__aeabi_fsub+0x138>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d11a      	bne.n	8000bcc <__aeabi_fsub+0x2f0>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d124      	bne.n	8000be4 <__aeabi_fsub+0x308>
 8000b9a:	2780      	movs	r7, #128	; 0x80
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	03ff      	lsls	r7, r7, #15
 8000ba0:	e71b      	b.n	80009da <__aeabi_fsub+0xfe>
 8000ba2:	0033      	movs	r3, r6
 8000ba4:	0004      	movs	r4, r0
 8000ba6:	000d      	movs	r5, r1
 8000ba8:	e6de      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000baa:	28ff      	cmp	r0, #255	; 0xff
 8000bac:	d01e      	beq.n	8000bec <__aeabi_fsub+0x310>
 8000bae:	2480      	movs	r4, #128	; 0x80
 8000bb0:	04e4      	lsls	r4, r4, #19
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	4323      	orrs	r3, r4
 8000bb6:	e7df      	b.n	8000b78 <__aeabi_fsub+0x29c>
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fsub+0x2e2>
 8000bbc:	e6d4      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000bbe:	1b9f      	subs	r7, r3, r6
 8000bc0:	017a      	lsls	r2, r7, #5
 8000bc2:	d400      	bmi.n	8000bc6 <__aeabi_fsub+0x2ea>
 8000bc4:	e737      	b.n	8000a36 <__aeabi_fsub+0x15a>
 8000bc6:	1af3      	subs	r3, r6, r3
 8000bc8:	000d      	movs	r5, r1
 8000bca:	e6cd      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000bcc:	24ff      	movs	r4, #255	; 0xff
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x2f8>
 8000bd2:	e6c9      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	4650      	mov	r0, sl
 8000bd8:	03d2      	lsls	r2, r2, #15
 8000bda:	4210      	tst	r0, r2
 8000bdc:	d0a4      	beq.n	8000b28 <__aeabi_fsub+0x24c>
 8000bde:	4660      	mov	r0, ip
 8000be0:	4210      	tst	r0, r2
 8000be2:	d1a1      	bne.n	8000b28 <__aeabi_fsub+0x24c>
 8000be4:	0033      	movs	r3, r6
 8000be6:	000d      	movs	r5, r1
 8000be8:	24ff      	movs	r4, #255	; 0xff
 8000bea:	e6bd      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000bec:	0033      	movs	r3, r6
 8000bee:	24ff      	movs	r4, #255	; 0xff
 8000bf0:	e6ba      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e76e      	b.n	8000ad4 <__aeabi_fsub+0x1f8>
 8000bf6:	0033      	movs	r3, r6
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	e6b5      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	2200      	movs	r2, #0
 8000c00:	e71c      	b.n	8000a3c <__aeabi_fsub+0x160>
 8000c02:	0033      	movs	r3, r6
 8000c04:	e6b0      	b.n	8000968 <__aeabi_fsub+0x8c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e7c0      	b.n	8000b8c <__aeabi_fsub+0x2b0>
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	7dffffff 	.word	0x7dffffff
 8000c10:	fbffffff 	.word	0xfbffffff

08000c14 <__aeabi_f2iz>:
 8000c14:	0241      	lsls	r1, r0, #9
 8000c16:	0043      	lsls	r3, r0, #1
 8000c18:	0fc2      	lsrs	r2, r0, #31
 8000c1a:	0a49      	lsrs	r1, r1, #9
 8000c1c:	0e1b      	lsrs	r3, r3, #24
 8000c1e:	2000      	movs	r0, #0
 8000c20:	2b7e      	cmp	r3, #126	; 0x7e
 8000c22:	dd0d      	ble.n	8000c40 <__aeabi_f2iz+0x2c>
 8000c24:	2b9d      	cmp	r3, #157	; 0x9d
 8000c26:	dc0c      	bgt.n	8000c42 <__aeabi_f2iz+0x2e>
 8000c28:	2080      	movs	r0, #128	; 0x80
 8000c2a:	0400      	lsls	r0, r0, #16
 8000c2c:	4301      	orrs	r1, r0
 8000c2e:	2b95      	cmp	r3, #149	; 0x95
 8000c30:	dc0a      	bgt.n	8000c48 <__aeabi_f2iz+0x34>
 8000c32:	2096      	movs	r0, #150	; 0x96
 8000c34:	1ac3      	subs	r3, r0, r3
 8000c36:	40d9      	lsrs	r1, r3
 8000c38:	4248      	negs	r0, r1
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_f2iz+0x2c>
 8000c3e:	0008      	movs	r0, r1
 8000c40:	4770      	bx	lr
 8000c42:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <__aeabi_f2iz+0x3c>)
 8000c44:	18d0      	adds	r0, r2, r3
 8000c46:	e7fb      	b.n	8000c40 <__aeabi_f2iz+0x2c>
 8000c48:	3b96      	subs	r3, #150	; 0x96
 8000c4a:	4099      	lsls	r1, r3
 8000c4c:	e7f4      	b.n	8000c38 <__aeabi_f2iz+0x24>
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	7fffffff 	.word	0x7fffffff

08000c54 <__aeabi_dadd>:
 8000c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c56:	4645      	mov	r5, r8
 8000c58:	46de      	mov	lr, fp
 8000c5a:	4657      	mov	r7, sl
 8000c5c:	464e      	mov	r6, r9
 8000c5e:	030c      	lsls	r4, r1, #12
 8000c60:	b5e0      	push	{r5, r6, r7, lr}
 8000c62:	004e      	lsls	r6, r1, #1
 8000c64:	0fc9      	lsrs	r1, r1, #31
 8000c66:	4688      	mov	r8, r1
 8000c68:	000d      	movs	r5, r1
 8000c6a:	0a61      	lsrs	r1, r4, #9
 8000c6c:	0f44      	lsrs	r4, r0, #29
 8000c6e:	430c      	orrs	r4, r1
 8000c70:	00c7      	lsls	r7, r0, #3
 8000c72:	0319      	lsls	r1, r3, #12
 8000c74:	0058      	lsls	r0, r3, #1
 8000c76:	0fdb      	lsrs	r3, r3, #31
 8000c78:	469b      	mov	fp, r3
 8000c7a:	0a4b      	lsrs	r3, r1, #9
 8000c7c:	0f51      	lsrs	r1, r2, #29
 8000c7e:	430b      	orrs	r3, r1
 8000c80:	0d76      	lsrs	r6, r6, #21
 8000c82:	0d40      	lsrs	r0, r0, #21
 8000c84:	0019      	movs	r1, r3
 8000c86:	00d2      	lsls	r2, r2, #3
 8000c88:	45d8      	cmp	r8, fp
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x3a>
 8000c8c:	e0ae      	b.n	8000dec <__aeabi_dadd+0x198>
 8000c8e:	1a35      	subs	r5, r6, r0
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	dc00      	bgt.n	8000c96 <__aeabi_dadd+0x42>
 8000c94:	e0f6      	b.n	8000e84 <__aeabi_dadd+0x230>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d10f      	bne.n	8000cba <__aeabi_dadd+0x66>
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0x4c>
 8000c9e:	e0db      	b.n	8000e58 <__aeabi_dadd+0x204>
 8000ca0:	1e6b      	subs	r3, r5, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_dadd+0x54>
 8000ca6:	e137      	b.n	8000f18 <__aeabi_dadd+0x2c4>
 8000ca8:	1aba      	subs	r2, r7, r2
 8000caa:	4297      	cmp	r7, r2
 8000cac:	41bf      	sbcs	r7, r7
 8000cae:	1a64      	subs	r4, r4, r1
 8000cb0:	427f      	negs	r7, r7
 8000cb2:	1be4      	subs	r4, r4, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	0017      	movs	r7, r2
 8000cb8:	e024      	b.n	8000d04 <__aeabi_dadd+0xb0>
 8000cba:	4bc6      	ldr	r3, [pc, #792]	; (8000fd4 <__aeabi_dadd+0x380>)
 8000cbc:	429e      	cmp	r6, r3
 8000cbe:	d04d      	beq.n	8000d5c <__aeabi_dadd+0x108>
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	041b      	lsls	r3, r3, #16
 8000cc4:	4319      	orrs	r1, r3
 8000cc6:	2d38      	cmp	r5, #56	; 0x38
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_dadd+0x78>
 8000cca:	e107      	b.n	8000edc <__aeabi_dadd+0x288>
 8000ccc:	2d1f      	cmp	r5, #31
 8000cce:	dd00      	ble.n	8000cd2 <__aeabi_dadd+0x7e>
 8000cd0:	e138      	b.n	8000f44 <__aeabi_dadd+0x2f0>
 8000cd2:	2020      	movs	r0, #32
 8000cd4:	1b43      	subs	r3, r0, r5
 8000cd6:	469a      	mov	sl, r3
 8000cd8:	000b      	movs	r3, r1
 8000cda:	4650      	mov	r0, sl
 8000cdc:	4083      	lsls	r3, r0
 8000cde:	4699      	mov	r9, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	4648      	mov	r0, r9
 8000ce4:	40eb      	lsrs	r3, r5
 8000ce6:	4318      	orrs	r0, r3
 8000ce8:	0003      	movs	r3, r0
 8000cea:	4650      	mov	r0, sl
 8000cec:	4082      	lsls	r2, r0
 8000cee:	1e50      	subs	r0, r2, #1
 8000cf0:	4182      	sbcs	r2, r0
 8000cf2:	40e9      	lsrs	r1, r5
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	1aba      	subs	r2, r7, r2
 8000cf8:	1a61      	subs	r1, r4, r1
 8000cfa:	4297      	cmp	r7, r2
 8000cfc:	41a4      	sbcs	r4, r4
 8000cfe:	0017      	movs	r7, r2
 8000d00:	4264      	negs	r4, r4
 8000d02:	1b0c      	subs	r4, r1, r4
 8000d04:	0223      	lsls	r3, r4, #8
 8000d06:	d562      	bpl.n	8000dce <__aeabi_dadd+0x17a>
 8000d08:	0264      	lsls	r4, r4, #9
 8000d0a:	0a65      	lsrs	r5, r4, #9
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0xbe>
 8000d10:	e0df      	b.n	8000ed2 <__aeabi_dadd+0x27e>
 8000d12:	0028      	movs	r0, r5
 8000d14:	f001 fd60 	bl	80027d8 <__clzsi2>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	3b08      	subs	r3, #8
 8000d1c:	2b1f      	cmp	r3, #31
 8000d1e:	dd00      	ble.n	8000d22 <__aeabi_dadd+0xce>
 8000d20:	e0d2      	b.n	8000ec8 <__aeabi_dadd+0x274>
 8000d22:	2220      	movs	r2, #32
 8000d24:	003c      	movs	r4, r7
 8000d26:	1ad2      	subs	r2, r2, r3
 8000d28:	409d      	lsls	r5, r3
 8000d2a:	40d4      	lsrs	r4, r2
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	4325      	orrs	r5, r4
 8000d30:	429e      	cmp	r6, r3
 8000d32:	dd00      	ble.n	8000d36 <__aeabi_dadd+0xe2>
 8000d34:	e0c4      	b.n	8000ec0 <__aeabi_dadd+0x26c>
 8000d36:	1b9e      	subs	r6, r3, r6
 8000d38:	1c73      	adds	r3, r6, #1
 8000d3a:	2b1f      	cmp	r3, #31
 8000d3c:	dd00      	ble.n	8000d40 <__aeabi_dadd+0xec>
 8000d3e:	e0f1      	b.n	8000f24 <__aeabi_dadd+0x2d0>
 8000d40:	2220      	movs	r2, #32
 8000d42:	0038      	movs	r0, r7
 8000d44:	0029      	movs	r1, r5
 8000d46:	1ad2      	subs	r2, r2, r3
 8000d48:	40d8      	lsrs	r0, r3
 8000d4a:	4091      	lsls	r1, r2
 8000d4c:	4097      	lsls	r7, r2
 8000d4e:	002c      	movs	r4, r5
 8000d50:	4301      	orrs	r1, r0
 8000d52:	1e78      	subs	r0, r7, #1
 8000d54:	4187      	sbcs	r7, r0
 8000d56:	40dc      	lsrs	r4, r3
 8000d58:	2600      	movs	r6, #0
 8000d5a:	430f      	orrs	r7, r1
 8000d5c:	077b      	lsls	r3, r7, #29
 8000d5e:	d009      	beq.n	8000d74 <__aeabi_dadd+0x120>
 8000d60:	230f      	movs	r3, #15
 8000d62:	403b      	ands	r3, r7
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d005      	beq.n	8000d74 <__aeabi_dadd+0x120>
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	42bb      	cmp	r3, r7
 8000d6c:	41bf      	sbcs	r7, r7
 8000d6e:	427f      	negs	r7, r7
 8000d70:	19e4      	adds	r4, r4, r7
 8000d72:	001f      	movs	r7, r3
 8000d74:	0223      	lsls	r3, r4, #8
 8000d76:	d52c      	bpl.n	8000dd2 <__aeabi_dadd+0x17e>
 8000d78:	4b96      	ldr	r3, [pc, #600]	; (8000fd4 <__aeabi_dadd+0x380>)
 8000d7a:	3601      	adds	r6, #1
 8000d7c:	429e      	cmp	r6, r3
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x12e>
 8000d80:	e09a      	b.n	8000eb8 <__aeabi_dadd+0x264>
 8000d82:	4645      	mov	r5, r8
 8000d84:	4b94      	ldr	r3, [pc, #592]	; (8000fd8 <__aeabi_dadd+0x384>)
 8000d86:	08ff      	lsrs	r7, r7, #3
 8000d88:	401c      	ands	r4, r3
 8000d8a:	0760      	lsls	r0, r4, #29
 8000d8c:	0576      	lsls	r6, r6, #21
 8000d8e:	0264      	lsls	r4, r4, #9
 8000d90:	4307      	orrs	r7, r0
 8000d92:	0b24      	lsrs	r4, r4, #12
 8000d94:	0d76      	lsrs	r6, r6, #21
 8000d96:	2100      	movs	r1, #0
 8000d98:	0324      	lsls	r4, r4, #12
 8000d9a:	0b23      	lsrs	r3, r4, #12
 8000d9c:	0d0c      	lsrs	r4, r1, #20
 8000d9e:	4a8f      	ldr	r2, [pc, #572]	; (8000fdc <__aeabi_dadd+0x388>)
 8000da0:	0524      	lsls	r4, r4, #20
 8000da2:	431c      	orrs	r4, r3
 8000da4:	4014      	ands	r4, r2
 8000da6:	0533      	lsls	r3, r6, #20
 8000da8:	4323      	orrs	r3, r4
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	07ed      	lsls	r5, r5, #31
 8000dae:	085b      	lsrs	r3, r3, #1
 8000db0:	432b      	orrs	r3, r5
 8000db2:	0038      	movs	r0, r7
 8000db4:	0019      	movs	r1, r3
 8000db6:	bc3c      	pop	{r2, r3, r4, r5}
 8000db8:	4690      	mov	r8, r2
 8000dba:	4699      	mov	r9, r3
 8000dbc:	46a2      	mov	sl, r4
 8000dbe:	46ab      	mov	fp, r5
 8000dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dc2:	4664      	mov	r4, ip
 8000dc4:	4304      	orrs	r4, r0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x176>
 8000dc8:	e211      	b.n	80011ee <__aeabi_dadd+0x59a>
 8000dca:	0004      	movs	r4, r0
 8000dcc:	4667      	mov	r7, ip
 8000dce:	077b      	lsls	r3, r7, #29
 8000dd0:	d1c6      	bne.n	8000d60 <__aeabi_dadd+0x10c>
 8000dd2:	4645      	mov	r5, r8
 8000dd4:	0760      	lsls	r0, r4, #29
 8000dd6:	08ff      	lsrs	r7, r7, #3
 8000dd8:	4307      	orrs	r7, r0
 8000dda:	08e4      	lsrs	r4, r4, #3
 8000ddc:	4b7d      	ldr	r3, [pc, #500]	; (8000fd4 <__aeabi_dadd+0x380>)
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d030      	beq.n	8000e44 <__aeabi_dadd+0x1f0>
 8000de2:	0324      	lsls	r4, r4, #12
 8000de4:	0576      	lsls	r6, r6, #21
 8000de6:	0b24      	lsrs	r4, r4, #12
 8000de8:	0d76      	lsrs	r6, r6, #21
 8000dea:	e7d4      	b.n	8000d96 <__aeabi_dadd+0x142>
 8000dec:	1a33      	subs	r3, r6, r0
 8000dee:	469a      	mov	sl, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	dd78      	ble.n	8000ee6 <__aeabi_dadd+0x292>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d031      	beq.n	8000e5c <__aeabi_dadd+0x208>
 8000df8:	4876      	ldr	r0, [pc, #472]	; (8000fd4 <__aeabi_dadd+0x380>)
 8000dfa:	4286      	cmp	r6, r0
 8000dfc:	d0ae      	beq.n	8000d5c <__aeabi_dadd+0x108>
 8000dfe:	2080      	movs	r0, #128	; 0x80
 8000e00:	0400      	lsls	r0, r0, #16
 8000e02:	4301      	orrs	r1, r0
 8000e04:	4653      	mov	r3, sl
 8000e06:	2b38      	cmp	r3, #56	; 0x38
 8000e08:	dc00      	bgt.n	8000e0c <__aeabi_dadd+0x1b8>
 8000e0a:	e0e9      	b.n	8000fe0 <__aeabi_dadd+0x38c>
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	1e51      	subs	r1, r2, #1
 8000e10:	418a      	sbcs	r2, r1
 8000e12:	2100      	movs	r1, #0
 8000e14:	19d2      	adds	r2, r2, r7
 8000e16:	42ba      	cmp	r2, r7
 8000e18:	41bf      	sbcs	r7, r7
 8000e1a:	1909      	adds	r1, r1, r4
 8000e1c:	427c      	negs	r4, r7
 8000e1e:	0017      	movs	r7, r2
 8000e20:	190c      	adds	r4, r1, r4
 8000e22:	0223      	lsls	r3, r4, #8
 8000e24:	d5d3      	bpl.n	8000dce <__aeabi_dadd+0x17a>
 8000e26:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <__aeabi_dadd+0x380>)
 8000e28:	3601      	adds	r6, #1
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dadd+0x1dc>
 8000e2e:	e13a      	b.n	80010a6 <__aeabi_dadd+0x452>
 8000e30:	2001      	movs	r0, #1
 8000e32:	4b69      	ldr	r3, [pc, #420]	; (8000fd8 <__aeabi_dadd+0x384>)
 8000e34:	401c      	ands	r4, r3
 8000e36:	087b      	lsrs	r3, r7, #1
 8000e38:	4007      	ands	r7, r0
 8000e3a:	431f      	orrs	r7, r3
 8000e3c:	07e0      	lsls	r0, r4, #31
 8000e3e:	4307      	orrs	r7, r0
 8000e40:	0864      	lsrs	r4, r4, #1
 8000e42:	e78b      	b.n	8000d5c <__aeabi_dadd+0x108>
 8000e44:	0023      	movs	r3, r4
 8000e46:	433b      	orrs	r3, r7
 8000e48:	d100      	bne.n	8000e4c <__aeabi_dadd+0x1f8>
 8000e4a:	e1cb      	b.n	80011e4 <__aeabi_dadd+0x590>
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	0312      	lsls	r2, r2, #12
 8000e50:	4314      	orrs	r4, r2
 8000e52:	0324      	lsls	r4, r4, #12
 8000e54:	0b24      	lsrs	r4, r4, #12
 8000e56:	e79e      	b.n	8000d96 <__aeabi_dadd+0x142>
 8000e58:	002e      	movs	r6, r5
 8000e5a:	e77f      	b.n	8000d5c <__aeabi_dadd+0x108>
 8000e5c:	0008      	movs	r0, r1
 8000e5e:	4310      	orrs	r0, r2
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dadd+0x210>
 8000e62:	e0b4      	b.n	8000fce <__aeabi_dadd+0x37a>
 8000e64:	1e58      	subs	r0, r3, #1
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d000      	beq.n	8000e6c <__aeabi_dadd+0x218>
 8000e6a:	e0de      	b.n	800102a <__aeabi_dadd+0x3d6>
 8000e6c:	18ba      	adds	r2, r7, r2
 8000e6e:	42ba      	cmp	r2, r7
 8000e70:	419b      	sbcs	r3, r3
 8000e72:	1864      	adds	r4, r4, r1
 8000e74:	425b      	negs	r3, r3
 8000e76:	18e4      	adds	r4, r4, r3
 8000e78:	0017      	movs	r7, r2
 8000e7a:	2601      	movs	r6, #1
 8000e7c:	0223      	lsls	r3, r4, #8
 8000e7e:	d5a6      	bpl.n	8000dce <__aeabi_dadd+0x17a>
 8000e80:	2602      	movs	r6, #2
 8000e82:	e7d5      	b.n	8000e30 <__aeabi_dadd+0x1dc>
 8000e84:	2d00      	cmp	r5, #0
 8000e86:	d16e      	bne.n	8000f66 <__aeabi_dadd+0x312>
 8000e88:	1c70      	adds	r0, r6, #1
 8000e8a:	0540      	lsls	r0, r0, #21
 8000e8c:	0d40      	lsrs	r0, r0, #21
 8000e8e:	2801      	cmp	r0, #1
 8000e90:	dc00      	bgt.n	8000e94 <__aeabi_dadd+0x240>
 8000e92:	e0f9      	b.n	8001088 <__aeabi_dadd+0x434>
 8000e94:	1ab8      	subs	r0, r7, r2
 8000e96:	4684      	mov	ip, r0
 8000e98:	4287      	cmp	r7, r0
 8000e9a:	4180      	sbcs	r0, r0
 8000e9c:	1ae5      	subs	r5, r4, r3
 8000e9e:	4240      	negs	r0, r0
 8000ea0:	1a2d      	subs	r5, r5, r0
 8000ea2:	0228      	lsls	r0, r5, #8
 8000ea4:	d400      	bmi.n	8000ea8 <__aeabi_dadd+0x254>
 8000ea6:	e089      	b.n	8000fbc <__aeabi_dadd+0x368>
 8000ea8:	1bd7      	subs	r7, r2, r7
 8000eaa:	42ba      	cmp	r2, r7
 8000eac:	4192      	sbcs	r2, r2
 8000eae:	1b1c      	subs	r4, r3, r4
 8000eb0:	4252      	negs	r2, r2
 8000eb2:	1aa5      	subs	r5, r4, r2
 8000eb4:	46d8      	mov	r8, fp
 8000eb6:	e729      	b.n	8000d0c <__aeabi_dadd+0xb8>
 8000eb8:	4645      	mov	r5, r8
 8000eba:	2400      	movs	r4, #0
 8000ebc:	2700      	movs	r7, #0
 8000ebe:	e76a      	b.n	8000d96 <__aeabi_dadd+0x142>
 8000ec0:	4c45      	ldr	r4, [pc, #276]	; (8000fd8 <__aeabi_dadd+0x384>)
 8000ec2:	1af6      	subs	r6, r6, r3
 8000ec4:	402c      	ands	r4, r5
 8000ec6:	e749      	b.n	8000d5c <__aeabi_dadd+0x108>
 8000ec8:	003d      	movs	r5, r7
 8000eca:	3828      	subs	r0, #40	; 0x28
 8000ecc:	4085      	lsls	r5, r0
 8000ece:	2700      	movs	r7, #0
 8000ed0:	e72e      	b.n	8000d30 <__aeabi_dadd+0xdc>
 8000ed2:	0038      	movs	r0, r7
 8000ed4:	f001 fc80 	bl	80027d8 <__clzsi2>
 8000ed8:	3020      	adds	r0, #32
 8000eda:	e71d      	b.n	8000d18 <__aeabi_dadd+0xc4>
 8000edc:	430a      	orrs	r2, r1
 8000ede:	1e51      	subs	r1, r2, #1
 8000ee0:	418a      	sbcs	r2, r1
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e707      	b.n	8000cf6 <__aeabi_dadd+0xa2>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d000      	beq.n	8000eec <__aeabi_dadd+0x298>
 8000eea:	e0f3      	b.n	80010d4 <__aeabi_dadd+0x480>
 8000eec:	1c70      	adds	r0, r6, #1
 8000eee:	0543      	lsls	r3, r0, #21
 8000ef0:	0d5b      	lsrs	r3, r3, #21
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	dc00      	bgt.n	8000ef8 <__aeabi_dadd+0x2a4>
 8000ef6:	e0ad      	b.n	8001054 <__aeabi_dadd+0x400>
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <__aeabi_dadd+0x380>)
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x2ac>
 8000efe:	e0d1      	b.n	80010a4 <__aeabi_dadd+0x450>
 8000f00:	18ba      	adds	r2, r7, r2
 8000f02:	42ba      	cmp	r2, r7
 8000f04:	41bf      	sbcs	r7, r7
 8000f06:	1864      	adds	r4, r4, r1
 8000f08:	427f      	negs	r7, r7
 8000f0a:	19e4      	adds	r4, r4, r7
 8000f0c:	07e7      	lsls	r7, r4, #31
 8000f0e:	0852      	lsrs	r2, r2, #1
 8000f10:	4317      	orrs	r7, r2
 8000f12:	0864      	lsrs	r4, r4, #1
 8000f14:	0006      	movs	r6, r0
 8000f16:	e721      	b.n	8000d5c <__aeabi_dadd+0x108>
 8000f18:	482e      	ldr	r0, [pc, #184]	; (8000fd4 <__aeabi_dadd+0x380>)
 8000f1a:	4285      	cmp	r5, r0
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_dadd+0x2cc>
 8000f1e:	e093      	b.n	8001048 <__aeabi_dadd+0x3f4>
 8000f20:	001d      	movs	r5, r3
 8000f22:	e6d0      	b.n	8000cc6 <__aeabi_dadd+0x72>
 8000f24:	0029      	movs	r1, r5
 8000f26:	3e1f      	subs	r6, #31
 8000f28:	40f1      	lsrs	r1, r6
 8000f2a:	2b20      	cmp	r3, #32
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dadd+0x2dc>
 8000f2e:	e08d      	b.n	800104c <__aeabi_dadd+0x3f8>
 8000f30:	2240      	movs	r2, #64	; 0x40
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	409d      	lsls	r5, r3
 8000f36:	432f      	orrs	r7, r5
 8000f38:	1e7d      	subs	r5, r7, #1
 8000f3a:	41af      	sbcs	r7, r5
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	430f      	orrs	r7, r1
 8000f40:	2600      	movs	r6, #0
 8000f42:	e744      	b.n	8000dce <__aeabi_dadd+0x17a>
 8000f44:	002b      	movs	r3, r5
 8000f46:	0008      	movs	r0, r1
 8000f48:	3b20      	subs	r3, #32
 8000f4a:	40d8      	lsrs	r0, r3
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	2d20      	cmp	r5, #32
 8000f50:	d100      	bne.n	8000f54 <__aeabi_dadd+0x300>
 8000f52:	e07d      	b.n	8001050 <__aeabi_dadd+0x3fc>
 8000f54:	2040      	movs	r0, #64	; 0x40
 8000f56:	1b45      	subs	r5, r0, r5
 8000f58:	40a9      	lsls	r1, r5
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	1e51      	subs	r1, r2, #1
 8000f5e:	418a      	sbcs	r2, r1
 8000f60:	2100      	movs	r1, #0
 8000f62:	431a      	orrs	r2, r3
 8000f64:	e6c7      	b.n	8000cf6 <__aeabi_dadd+0xa2>
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d050      	beq.n	800100c <__aeabi_dadd+0x3b8>
 8000f6a:	4e1a      	ldr	r6, [pc, #104]	; (8000fd4 <__aeabi_dadd+0x380>)
 8000f6c:	42b0      	cmp	r0, r6
 8000f6e:	d057      	beq.n	8001020 <__aeabi_dadd+0x3cc>
 8000f70:	2680      	movs	r6, #128	; 0x80
 8000f72:	426b      	negs	r3, r5
 8000f74:	4699      	mov	r9, r3
 8000f76:	0436      	lsls	r6, r6, #16
 8000f78:	4334      	orrs	r4, r6
 8000f7a:	464b      	mov	r3, r9
 8000f7c:	2b38      	cmp	r3, #56	; 0x38
 8000f7e:	dd00      	ble.n	8000f82 <__aeabi_dadd+0x32e>
 8000f80:	e0d6      	b.n	8001130 <__aeabi_dadd+0x4dc>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dd00      	ble.n	8000f88 <__aeabi_dadd+0x334>
 8000f86:	e135      	b.n	80011f4 <__aeabi_dadd+0x5a0>
 8000f88:	2620      	movs	r6, #32
 8000f8a:	1af5      	subs	r5, r6, r3
 8000f8c:	0026      	movs	r6, r4
 8000f8e:	40ae      	lsls	r6, r5
 8000f90:	46b2      	mov	sl, r6
 8000f92:	003e      	movs	r6, r7
 8000f94:	40de      	lsrs	r6, r3
 8000f96:	46ac      	mov	ip, r5
 8000f98:	0035      	movs	r5, r6
 8000f9a:	4656      	mov	r6, sl
 8000f9c:	432e      	orrs	r6, r5
 8000f9e:	4665      	mov	r5, ip
 8000fa0:	40af      	lsls	r7, r5
 8000fa2:	1e7d      	subs	r5, r7, #1
 8000fa4:	41af      	sbcs	r7, r5
 8000fa6:	40dc      	lsrs	r4, r3
 8000fa8:	4337      	orrs	r7, r6
 8000faa:	1bd7      	subs	r7, r2, r7
 8000fac:	42ba      	cmp	r2, r7
 8000fae:	4192      	sbcs	r2, r2
 8000fb0:	1b0c      	subs	r4, r1, r4
 8000fb2:	4252      	negs	r2, r2
 8000fb4:	1aa4      	subs	r4, r4, r2
 8000fb6:	0006      	movs	r6, r0
 8000fb8:	46d8      	mov	r8, fp
 8000fba:	e6a3      	b.n	8000d04 <__aeabi_dadd+0xb0>
 8000fbc:	4664      	mov	r4, ip
 8000fbe:	4667      	mov	r7, ip
 8000fc0:	432c      	orrs	r4, r5
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_dadd+0x372>
 8000fc4:	e6a2      	b.n	8000d0c <__aeabi_dadd+0xb8>
 8000fc6:	2500      	movs	r5, #0
 8000fc8:	2600      	movs	r6, #0
 8000fca:	2700      	movs	r7, #0
 8000fcc:	e706      	b.n	8000ddc <__aeabi_dadd+0x188>
 8000fce:	001e      	movs	r6, r3
 8000fd0:	e6c4      	b.n	8000d5c <__aeabi_dadd+0x108>
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	000007ff 	.word	0x000007ff
 8000fd8:	ff7fffff 	.word	0xff7fffff
 8000fdc:	800fffff 	.word	0x800fffff
 8000fe0:	2b1f      	cmp	r3, #31
 8000fe2:	dc63      	bgt.n	80010ac <__aeabi_dadd+0x458>
 8000fe4:	2020      	movs	r0, #32
 8000fe6:	1ac3      	subs	r3, r0, r3
 8000fe8:	0008      	movs	r0, r1
 8000fea:	4098      	lsls	r0, r3
 8000fec:	469c      	mov	ip, r3
 8000fee:	4683      	mov	fp, r0
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	40d8      	lsrs	r0, r3
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	4658      	mov	r0, fp
 8000ffa:	4318      	orrs	r0, r3
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	409a      	lsls	r2, r3
 8001000:	1e53      	subs	r3, r2, #1
 8001002:	419a      	sbcs	r2, r3
 8001004:	4653      	mov	r3, sl
 8001006:	4302      	orrs	r2, r0
 8001008:	40d9      	lsrs	r1, r3
 800100a:	e703      	b.n	8000e14 <__aeabi_dadd+0x1c0>
 800100c:	0026      	movs	r6, r4
 800100e:	433e      	orrs	r6, r7
 8001010:	d006      	beq.n	8001020 <__aeabi_dadd+0x3cc>
 8001012:	43eb      	mvns	r3, r5
 8001014:	4699      	mov	r9, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0c7      	beq.n	8000faa <__aeabi_dadd+0x356>
 800101a:	4e94      	ldr	r6, [pc, #592]	; (800126c <__aeabi_dadd+0x618>)
 800101c:	42b0      	cmp	r0, r6
 800101e:	d1ac      	bne.n	8000f7a <__aeabi_dadd+0x326>
 8001020:	000c      	movs	r4, r1
 8001022:	0017      	movs	r7, r2
 8001024:	0006      	movs	r6, r0
 8001026:	46d8      	mov	r8, fp
 8001028:	e698      	b.n	8000d5c <__aeabi_dadd+0x108>
 800102a:	4b90      	ldr	r3, [pc, #576]	; (800126c <__aeabi_dadd+0x618>)
 800102c:	459a      	cmp	sl, r3
 800102e:	d00b      	beq.n	8001048 <__aeabi_dadd+0x3f4>
 8001030:	4682      	mov	sl, r0
 8001032:	e6e7      	b.n	8000e04 <__aeabi_dadd+0x1b0>
 8001034:	2800      	cmp	r0, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x3e6>
 8001038:	e09e      	b.n	8001178 <__aeabi_dadd+0x524>
 800103a:	0018      	movs	r0, r3
 800103c:	4310      	orrs	r0, r2
 800103e:	d100      	bne.n	8001042 <__aeabi_dadd+0x3ee>
 8001040:	e0e9      	b.n	8001216 <__aeabi_dadd+0x5c2>
 8001042:	001c      	movs	r4, r3
 8001044:	0017      	movs	r7, r2
 8001046:	46d8      	mov	r8, fp
 8001048:	4e88      	ldr	r6, [pc, #544]	; (800126c <__aeabi_dadd+0x618>)
 800104a:	e687      	b.n	8000d5c <__aeabi_dadd+0x108>
 800104c:	2500      	movs	r5, #0
 800104e:	e772      	b.n	8000f36 <__aeabi_dadd+0x2e2>
 8001050:	2100      	movs	r1, #0
 8001052:	e782      	b.n	8000f5a <__aeabi_dadd+0x306>
 8001054:	0023      	movs	r3, r4
 8001056:	433b      	orrs	r3, r7
 8001058:	2e00      	cmp	r6, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dadd+0x40a>
 800105c:	e0ab      	b.n	80011b6 <__aeabi_dadd+0x562>
 800105e:	2b00      	cmp	r3, #0
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x410>
 8001062:	e0e7      	b.n	8001234 <__aeabi_dadd+0x5e0>
 8001064:	000b      	movs	r3, r1
 8001066:	4313      	orrs	r3, r2
 8001068:	d100      	bne.n	800106c <__aeabi_dadd+0x418>
 800106a:	e677      	b.n	8000d5c <__aeabi_dadd+0x108>
 800106c:	18ba      	adds	r2, r7, r2
 800106e:	42ba      	cmp	r2, r7
 8001070:	41bf      	sbcs	r7, r7
 8001072:	1864      	adds	r4, r4, r1
 8001074:	427f      	negs	r7, r7
 8001076:	19e4      	adds	r4, r4, r7
 8001078:	0223      	lsls	r3, r4, #8
 800107a:	d400      	bmi.n	800107e <__aeabi_dadd+0x42a>
 800107c:	e0f2      	b.n	8001264 <__aeabi_dadd+0x610>
 800107e:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <__aeabi_dadd+0x61c>)
 8001080:	0017      	movs	r7, r2
 8001082:	401c      	ands	r4, r3
 8001084:	0006      	movs	r6, r0
 8001086:	e669      	b.n	8000d5c <__aeabi_dadd+0x108>
 8001088:	0020      	movs	r0, r4
 800108a:	4338      	orrs	r0, r7
 800108c:	2e00      	cmp	r6, #0
 800108e:	d1d1      	bne.n	8001034 <__aeabi_dadd+0x3e0>
 8001090:	2800      	cmp	r0, #0
 8001092:	d15b      	bne.n	800114c <__aeabi_dadd+0x4f8>
 8001094:	001c      	movs	r4, r3
 8001096:	4314      	orrs	r4, r2
 8001098:	d100      	bne.n	800109c <__aeabi_dadd+0x448>
 800109a:	e0a8      	b.n	80011ee <__aeabi_dadd+0x59a>
 800109c:	001c      	movs	r4, r3
 800109e:	0017      	movs	r7, r2
 80010a0:	46d8      	mov	r8, fp
 80010a2:	e65b      	b.n	8000d5c <__aeabi_dadd+0x108>
 80010a4:	0006      	movs	r6, r0
 80010a6:	2400      	movs	r4, #0
 80010a8:	2700      	movs	r7, #0
 80010aa:	e697      	b.n	8000ddc <__aeabi_dadd+0x188>
 80010ac:	4650      	mov	r0, sl
 80010ae:	000b      	movs	r3, r1
 80010b0:	3820      	subs	r0, #32
 80010b2:	40c3      	lsrs	r3, r0
 80010b4:	4699      	mov	r9, r3
 80010b6:	4653      	mov	r3, sl
 80010b8:	2b20      	cmp	r3, #32
 80010ba:	d100      	bne.n	80010be <__aeabi_dadd+0x46a>
 80010bc:	e095      	b.n	80011ea <__aeabi_dadd+0x596>
 80010be:	2340      	movs	r3, #64	; 0x40
 80010c0:	4650      	mov	r0, sl
 80010c2:	1a1b      	subs	r3, r3, r0
 80010c4:	4099      	lsls	r1, r3
 80010c6:	430a      	orrs	r2, r1
 80010c8:	1e51      	subs	r1, r2, #1
 80010ca:	418a      	sbcs	r2, r1
 80010cc:	464b      	mov	r3, r9
 80010ce:	2100      	movs	r1, #0
 80010d0:	431a      	orrs	r2, r3
 80010d2:	e69f      	b.n	8000e14 <__aeabi_dadd+0x1c0>
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d130      	bne.n	800113a <__aeabi_dadd+0x4e6>
 80010d8:	0026      	movs	r6, r4
 80010da:	433e      	orrs	r6, r7
 80010dc:	d067      	beq.n	80011ae <__aeabi_dadd+0x55a>
 80010de:	43db      	mvns	r3, r3
 80010e0:	469a      	mov	sl, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d01c      	beq.n	8001120 <__aeabi_dadd+0x4cc>
 80010e6:	4e61      	ldr	r6, [pc, #388]	; (800126c <__aeabi_dadd+0x618>)
 80010e8:	42b0      	cmp	r0, r6
 80010ea:	d060      	beq.n	80011ae <__aeabi_dadd+0x55a>
 80010ec:	4653      	mov	r3, sl
 80010ee:	2b38      	cmp	r3, #56	; 0x38
 80010f0:	dd00      	ble.n	80010f4 <__aeabi_dadd+0x4a0>
 80010f2:	e096      	b.n	8001222 <__aeabi_dadd+0x5ce>
 80010f4:	2b1f      	cmp	r3, #31
 80010f6:	dd00      	ble.n	80010fa <__aeabi_dadd+0x4a6>
 80010f8:	e09f      	b.n	800123a <__aeabi_dadd+0x5e6>
 80010fa:	2620      	movs	r6, #32
 80010fc:	1af3      	subs	r3, r6, r3
 80010fe:	0026      	movs	r6, r4
 8001100:	409e      	lsls	r6, r3
 8001102:	469c      	mov	ip, r3
 8001104:	46b3      	mov	fp, r6
 8001106:	4653      	mov	r3, sl
 8001108:	003e      	movs	r6, r7
 800110a:	40de      	lsrs	r6, r3
 800110c:	0033      	movs	r3, r6
 800110e:	465e      	mov	r6, fp
 8001110:	431e      	orrs	r6, r3
 8001112:	4663      	mov	r3, ip
 8001114:	409f      	lsls	r7, r3
 8001116:	1e7b      	subs	r3, r7, #1
 8001118:	419f      	sbcs	r7, r3
 800111a:	4653      	mov	r3, sl
 800111c:	40dc      	lsrs	r4, r3
 800111e:	4337      	orrs	r7, r6
 8001120:	18bf      	adds	r7, r7, r2
 8001122:	4297      	cmp	r7, r2
 8001124:	4192      	sbcs	r2, r2
 8001126:	1864      	adds	r4, r4, r1
 8001128:	4252      	negs	r2, r2
 800112a:	18a4      	adds	r4, r4, r2
 800112c:	0006      	movs	r6, r0
 800112e:	e678      	b.n	8000e22 <__aeabi_dadd+0x1ce>
 8001130:	4327      	orrs	r7, r4
 8001132:	1e7c      	subs	r4, r7, #1
 8001134:	41a7      	sbcs	r7, r4
 8001136:	2400      	movs	r4, #0
 8001138:	e737      	b.n	8000faa <__aeabi_dadd+0x356>
 800113a:	4e4c      	ldr	r6, [pc, #304]	; (800126c <__aeabi_dadd+0x618>)
 800113c:	42b0      	cmp	r0, r6
 800113e:	d036      	beq.n	80011ae <__aeabi_dadd+0x55a>
 8001140:	2680      	movs	r6, #128	; 0x80
 8001142:	425b      	negs	r3, r3
 8001144:	0436      	lsls	r6, r6, #16
 8001146:	469a      	mov	sl, r3
 8001148:	4334      	orrs	r4, r6
 800114a:	e7cf      	b.n	80010ec <__aeabi_dadd+0x498>
 800114c:	0018      	movs	r0, r3
 800114e:	4310      	orrs	r0, r2
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x500>
 8001152:	e603      	b.n	8000d5c <__aeabi_dadd+0x108>
 8001154:	1ab8      	subs	r0, r7, r2
 8001156:	4684      	mov	ip, r0
 8001158:	4567      	cmp	r7, ip
 800115a:	41ad      	sbcs	r5, r5
 800115c:	1ae0      	subs	r0, r4, r3
 800115e:	426d      	negs	r5, r5
 8001160:	1b40      	subs	r0, r0, r5
 8001162:	0205      	lsls	r5, r0, #8
 8001164:	d400      	bmi.n	8001168 <__aeabi_dadd+0x514>
 8001166:	e62c      	b.n	8000dc2 <__aeabi_dadd+0x16e>
 8001168:	1bd7      	subs	r7, r2, r7
 800116a:	42ba      	cmp	r2, r7
 800116c:	4192      	sbcs	r2, r2
 800116e:	1b1c      	subs	r4, r3, r4
 8001170:	4252      	negs	r2, r2
 8001172:	1aa4      	subs	r4, r4, r2
 8001174:	46d8      	mov	r8, fp
 8001176:	e5f1      	b.n	8000d5c <__aeabi_dadd+0x108>
 8001178:	0018      	movs	r0, r3
 800117a:	4310      	orrs	r0, r2
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x52c>
 800117e:	e763      	b.n	8001048 <__aeabi_dadd+0x3f4>
 8001180:	08f8      	lsrs	r0, r7, #3
 8001182:	0767      	lsls	r7, r4, #29
 8001184:	4307      	orrs	r7, r0
 8001186:	2080      	movs	r0, #128	; 0x80
 8001188:	08e4      	lsrs	r4, r4, #3
 800118a:	0300      	lsls	r0, r0, #12
 800118c:	4204      	tst	r4, r0
 800118e:	d008      	beq.n	80011a2 <__aeabi_dadd+0x54e>
 8001190:	08dd      	lsrs	r5, r3, #3
 8001192:	4205      	tst	r5, r0
 8001194:	d105      	bne.n	80011a2 <__aeabi_dadd+0x54e>
 8001196:	08d2      	lsrs	r2, r2, #3
 8001198:	0759      	lsls	r1, r3, #29
 800119a:	4311      	orrs	r1, r2
 800119c:	000f      	movs	r7, r1
 800119e:	002c      	movs	r4, r5
 80011a0:	46d8      	mov	r8, fp
 80011a2:	0f7b      	lsrs	r3, r7, #29
 80011a4:	00e4      	lsls	r4, r4, #3
 80011a6:	431c      	orrs	r4, r3
 80011a8:	00ff      	lsls	r7, r7, #3
 80011aa:	4e30      	ldr	r6, [pc, #192]	; (800126c <__aeabi_dadd+0x618>)
 80011ac:	e5d6      	b.n	8000d5c <__aeabi_dadd+0x108>
 80011ae:	000c      	movs	r4, r1
 80011b0:	0017      	movs	r7, r2
 80011b2:	0006      	movs	r6, r0
 80011b4:	e5d2      	b.n	8000d5c <__aeabi_dadd+0x108>
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d038      	beq.n	800122c <__aeabi_dadd+0x5d8>
 80011ba:	000b      	movs	r3, r1
 80011bc:	4313      	orrs	r3, r2
 80011be:	d100      	bne.n	80011c2 <__aeabi_dadd+0x56e>
 80011c0:	e742      	b.n	8001048 <__aeabi_dadd+0x3f4>
 80011c2:	08f8      	lsrs	r0, r7, #3
 80011c4:	0767      	lsls	r7, r4, #29
 80011c6:	4307      	orrs	r7, r0
 80011c8:	2080      	movs	r0, #128	; 0x80
 80011ca:	08e4      	lsrs	r4, r4, #3
 80011cc:	0300      	lsls	r0, r0, #12
 80011ce:	4204      	tst	r4, r0
 80011d0:	d0e7      	beq.n	80011a2 <__aeabi_dadd+0x54e>
 80011d2:	08cb      	lsrs	r3, r1, #3
 80011d4:	4203      	tst	r3, r0
 80011d6:	d1e4      	bne.n	80011a2 <__aeabi_dadd+0x54e>
 80011d8:	08d2      	lsrs	r2, r2, #3
 80011da:	0749      	lsls	r1, r1, #29
 80011dc:	4311      	orrs	r1, r2
 80011de:	000f      	movs	r7, r1
 80011e0:	001c      	movs	r4, r3
 80011e2:	e7de      	b.n	80011a2 <__aeabi_dadd+0x54e>
 80011e4:	2700      	movs	r7, #0
 80011e6:	2400      	movs	r4, #0
 80011e8:	e5d5      	b.n	8000d96 <__aeabi_dadd+0x142>
 80011ea:	2100      	movs	r1, #0
 80011ec:	e76b      	b.n	80010c6 <__aeabi_dadd+0x472>
 80011ee:	2500      	movs	r5, #0
 80011f0:	2700      	movs	r7, #0
 80011f2:	e5f3      	b.n	8000ddc <__aeabi_dadd+0x188>
 80011f4:	464e      	mov	r6, r9
 80011f6:	0025      	movs	r5, r4
 80011f8:	3e20      	subs	r6, #32
 80011fa:	40f5      	lsrs	r5, r6
 80011fc:	464b      	mov	r3, r9
 80011fe:	002e      	movs	r6, r5
 8001200:	2b20      	cmp	r3, #32
 8001202:	d02d      	beq.n	8001260 <__aeabi_dadd+0x60c>
 8001204:	2540      	movs	r5, #64	; 0x40
 8001206:	1aed      	subs	r5, r5, r3
 8001208:	40ac      	lsls	r4, r5
 800120a:	4327      	orrs	r7, r4
 800120c:	1e7c      	subs	r4, r7, #1
 800120e:	41a7      	sbcs	r7, r4
 8001210:	2400      	movs	r4, #0
 8001212:	4337      	orrs	r7, r6
 8001214:	e6c9      	b.n	8000faa <__aeabi_dadd+0x356>
 8001216:	2480      	movs	r4, #128	; 0x80
 8001218:	2500      	movs	r5, #0
 800121a:	0324      	lsls	r4, r4, #12
 800121c:	4e13      	ldr	r6, [pc, #76]	; (800126c <__aeabi_dadd+0x618>)
 800121e:	2700      	movs	r7, #0
 8001220:	e5dc      	b.n	8000ddc <__aeabi_dadd+0x188>
 8001222:	4327      	orrs	r7, r4
 8001224:	1e7c      	subs	r4, r7, #1
 8001226:	41a7      	sbcs	r7, r4
 8001228:	2400      	movs	r4, #0
 800122a:	e779      	b.n	8001120 <__aeabi_dadd+0x4cc>
 800122c:	000c      	movs	r4, r1
 800122e:	0017      	movs	r7, r2
 8001230:	4e0e      	ldr	r6, [pc, #56]	; (800126c <__aeabi_dadd+0x618>)
 8001232:	e593      	b.n	8000d5c <__aeabi_dadd+0x108>
 8001234:	000c      	movs	r4, r1
 8001236:	0017      	movs	r7, r2
 8001238:	e590      	b.n	8000d5c <__aeabi_dadd+0x108>
 800123a:	4656      	mov	r6, sl
 800123c:	0023      	movs	r3, r4
 800123e:	3e20      	subs	r6, #32
 8001240:	40f3      	lsrs	r3, r6
 8001242:	4699      	mov	r9, r3
 8001244:	4653      	mov	r3, sl
 8001246:	2b20      	cmp	r3, #32
 8001248:	d00e      	beq.n	8001268 <__aeabi_dadd+0x614>
 800124a:	2340      	movs	r3, #64	; 0x40
 800124c:	4656      	mov	r6, sl
 800124e:	1b9b      	subs	r3, r3, r6
 8001250:	409c      	lsls	r4, r3
 8001252:	4327      	orrs	r7, r4
 8001254:	1e7c      	subs	r4, r7, #1
 8001256:	41a7      	sbcs	r7, r4
 8001258:	464b      	mov	r3, r9
 800125a:	2400      	movs	r4, #0
 800125c:	431f      	orrs	r7, r3
 800125e:	e75f      	b.n	8001120 <__aeabi_dadd+0x4cc>
 8001260:	2400      	movs	r4, #0
 8001262:	e7d2      	b.n	800120a <__aeabi_dadd+0x5b6>
 8001264:	0017      	movs	r7, r2
 8001266:	e5b2      	b.n	8000dce <__aeabi_dadd+0x17a>
 8001268:	2400      	movs	r4, #0
 800126a:	e7f2      	b.n	8001252 <__aeabi_dadd+0x5fe>
 800126c:	000007ff 	.word	0x000007ff
 8001270:	ff7fffff 	.word	0xff7fffff

08001274 <__aeabi_ddiv>:
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001276:	4657      	mov	r7, sl
 8001278:	4645      	mov	r5, r8
 800127a:	46de      	mov	lr, fp
 800127c:	464e      	mov	r6, r9
 800127e:	b5e0      	push	{r5, r6, r7, lr}
 8001280:	004c      	lsls	r4, r1, #1
 8001282:	030e      	lsls	r6, r1, #12
 8001284:	b087      	sub	sp, #28
 8001286:	4683      	mov	fp, r0
 8001288:	4692      	mov	sl, r2
 800128a:	001d      	movs	r5, r3
 800128c:	4680      	mov	r8, r0
 800128e:	0b36      	lsrs	r6, r6, #12
 8001290:	0d64      	lsrs	r4, r4, #21
 8001292:	0fcf      	lsrs	r7, r1, #31
 8001294:	2c00      	cmp	r4, #0
 8001296:	d04f      	beq.n	8001338 <__aeabi_ddiv+0xc4>
 8001298:	4b6f      	ldr	r3, [pc, #444]	; (8001458 <__aeabi_ddiv+0x1e4>)
 800129a:	429c      	cmp	r4, r3
 800129c:	d035      	beq.n	800130a <__aeabi_ddiv+0x96>
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	0f42      	lsrs	r2, r0, #29
 80012a2:	041b      	lsls	r3, r3, #16
 80012a4:	00f6      	lsls	r6, r6, #3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	4333      	orrs	r3, r6
 80012aa:	4699      	mov	r9, r3
 80012ac:	00c3      	lsls	r3, r0, #3
 80012ae:	4698      	mov	r8, r3
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <__aeabi_ddiv+0x1e8>)
 80012b2:	2600      	movs	r6, #0
 80012b4:	469c      	mov	ip, r3
 80012b6:	2300      	movs	r3, #0
 80012b8:	4464      	add	r4, ip
 80012ba:	9303      	str	r3, [sp, #12]
 80012bc:	032b      	lsls	r3, r5, #12
 80012be:	0b1b      	lsrs	r3, r3, #12
 80012c0:	469b      	mov	fp, r3
 80012c2:	006b      	lsls	r3, r5, #1
 80012c4:	0fed      	lsrs	r5, r5, #31
 80012c6:	4650      	mov	r0, sl
 80012c8:	0d5b      	lsrs	r3, r3, #21
 80012ca:	9501      	str	r5, [sp, #4]
 80012cc:	d05e      	beq.n	800138c <__aeabi_ddiv+0x118>
 80012ce:	4a62      	ldr	r2, [pc, #392]	; (8001458 <__aeabi_ddiv+0x1e4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d053      	beq.n	800137c <__aeabi_ddiv+0x108>
 80012d4:	465a      	mov	r2, fp
 80012d6:	00d1      	lsls	r1, r2, #3
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	0f40      	lsrs	r0, r0, #29
 80012dc:	0412      	lsls	r2, r2, #16
 80012de:	4302      	orrs	r2, r0
 80012e0:	430a      	orrs	r2, r1
 80012e2:	4693      	mov	fp, r2
 80012e4:	4652      	mov	r2, sl
 80012e6:	00d1      	lsls	r1, r2, #3
 80012e8:	4a5c      	ldr	r2, [pc, #368]	; (800145c <__aeabi_ddiv+0x1e8>)
 80012ea:	4694      	mov	ip, r2
 80012ec:	2200      	movs	r2, #0
 80012ee:	4463      	add	r3, ip
 80012f0:	0038      	movs	r0, r7
 80012f2:	4068      	eors	r0, r5
 80012f4:	4684      	mov	ip, r0
 80012f6:	9002      	str	r0, [sp, #8]
 80012f8:	1ae4      	subs	r4, r4, r3
 80012fa:	4316      	orrs	r6, r2
 80012fc:	2e0f      	cmp	r6, #15
 80012fe:	d900      	bls.n	8001302 <__aeabi_ddiv+0x8e>
 8001300:	e0b4      	b.n	800146c <__aeabi_ddiv+0x1f8>
 8001302:	4b57      	ldr	r3, [pc, #348]	; (8001460 <__aeabi_ddiv+0x1ec>)
 8001304:	00b6      	lsls	r6, r6, #2
 8001306:	599b      	ldr	r3, [r3, r6]
 8001308:	469f      	mov	pc, r3
 800130a:	0003      	movs	r3, r0
 800130c:	4333      	orrs	r3, r6
 800130e:	4699      	mov	r9, r3
 8001310:	d16c      	bne.n	80013ec <__aeabi_ddiv+0x178>
 8001312:	2300      	movs	r3, #0
 8001314:	4698      	mov	r8, r3
 8001316:	3302      	adds	r3, #2
 8001318:	2608      	movs	r6, #8
 800131a:	9303      	str	r3, [sp, #12]
 800131c:	e7ce      	b.n	80012bc <__aeabi_ddiv+0x48>
 800131e:	46cb      	mov	fp, r9
 8001320:	4641      	mov	r1, r8
 8001322:	9a03      	ldr	r2, [sp, #12]
 8001324:	9701      	str	r7, [sp, #4]
 8001326:	2a02      	cmp	r2, #2
 8001328:	d165      	bne.n	80013f6 <__aeabi_ddiv+0x182>
 800132a:	9b01      	ldr	r3, [sp, #4]
 800132c:	4c4a      	ldr	r4, [pc, #296]	; (8001458 <__aeabi_ddiv+0x1e4>)
 800132e:	469c      	mov	ip, r3
 8001330:	2300      	movs	r3, #0
 8001332:	2200      	movs	r2, #0
 8001334:	4698      	mov	r8, r3
 8001336:	e06b      	b.n	8001410 <__aeabi_ddiv+0x19c>
 8001338:	0003      	movs	r3, r0
 800133a:	4333      	orrs	r3, r6
 800133c:	4699      	mov	r9, r3
 800133e:	d04e      	beq.n	80013de <__aeabi_ddiv+0x16a>
 8001340:	2e00      	cmp	r6, #0
 8001342:	d100      	bne.n	8001346 <__aeabi_ddiv+0xd2>
 8001344:	e1bc      	b.n	80016c0 <__aeabi_ddiv+0x44c>
 8001346:	0030      	movs	r0, r6
 8001348:	f001 fa46 	bl	80027d8 <__clzsi2>
 800134c:	0003      	movs	r3, r0
 800134e:	3b0b      	subs	r3, #11
 8001350:	2b1c      	cmp	r3, #28
 8001352:	dd00      	ble.n	8001356 <__aeabi_ddiv+0xe2>
 8001354:	e1ac      	b.n	80016b0 <__aeabi_ddiv+0x43c>
 8001356:	221d      	movs	r2, #29
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	465a      	mov	r2, fp
 800135c:	0001      	movs	r1, r0
 800135e:	40da      	lsrs	r2, r3
 8001360:	3908      	subs	r1, #8
 8001362:	408e      	lsls	r6, r1
 8001364:	0013      	movs	r3, r2
 8001366:	4333      	orrs	r3, r6
 8001368:	4699      	mov	r9, r3
 800136a:	465b      	mov	r3, fp
 800136c:	408b      	lsls	r3, r1
 800136e:	4698      	mov	r8, r3
 8001370:	2300      	movs	r3, #0
 8001372:	4c3c      	ldr	r4, [pc, #240]	; (8001464 <__aeabi_ddiv+0x1f0>)
 8001374:	2600      	movs	r6, #0
 8001376:	1a24      	subs	r4, r4, r0
 8001378:	9303      	str	r3, [sp, #12]
 800137a:	e79f      	b.n	80012bc <__aeabi_ddiv+0x48>
 800137c:	4651      	mov	r1, sl
 800137e:	465a      	mov	r2, fp
 8001380:	4311      	orrs	r1, r2
 8001382:	d129      	bne.n	80013d8 <__aeabi_ddiv+0x164>
 8001384:	2200      	movs	r2, #0
 8001386:	4693      	mov	fp, r2
 8001388:	3202      	adds	r2, #2
 800138a:	e7b1      	b.n	80012f0 <__aeabi_ddiv+0x7c>
 800138c:	4659      	mov	r1, fp
 800138e:	4301      	orrs	r1, r0
 8001390:	d01e      	beq.n	80013d0 <__aeabi_ddiv+0x15c>
 8001392:	465b      	mov	r3, fp
 8001394:	2b00      	cmp	r3, #0
 8001396:	d100      	bne.n	800139a <__aeabi_ddiv+0x126>
 8001398:	e19e      	b.n	80016d8 <__aeabi_ddiv+0x464>
 800139a:	4658      	mov	r0, fp
 800139c:	f001 fa1c 	bl	80027d8 <__clzsi2>
 80013a0:	0003      	movs	r3, r0
 80013a2:	3b0b      	subs	r3, #11
 80013a4:	2b1c      	cmp	r3, #28
 80013a6:	dd00      	ble.n	80013aa <__aeabi_ddiv+0x136>
 80013a8:	e18f      	b.n	80016ca <__aeabi_ddiv+0x456>
 80013aa:	0002      	movs	r2, r0
 80013ac:	4659      	mov	r1, fp
 80013ae:	3a08      	subs	r2, #8
 80013b0:	4091      	lsls	r1, r2
 80013b2:	468b      	mov	fp, r1
 80013b4:	211d      	movs	r1, #29
 80013b6:	1acb      	subs	r3, r1, r3
 80013b8:	4651      	mov	r1, sl
 80013ba:	40d9      	lsrs	r1, r3
 80013bc:	000b      	movs	r3, r1
 80013be:	4659      	mov	r1, fp
 80013c0:	430b      	orrs	r3, r1
 80013c2:	4651      	mov	r1, sl
 80013c4:	469b      	mov	fp, r3
 80013c6:	4091      	lsls	r1, r2
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <__aeabi_ddiv+0x1f0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	1a1b      	subs	r3, r3, r0
 80013ce:	e78f      	b.n	80012f0 <__aeabi_ddiv+0x7c>
 80013d0:	2300      	movs	r3, #0
 80013d2:	2201      	movs	r2, #1
 80013d4:	469b      	mov	fp, r3
 80013d6:	e78b      	b.n	80012f0 <__aeabi_ddiv+0x7c>
 80013d8:	4651      	mov	r1, sl
 80013da:	2203      	movs	r2, #3
 80013dc:	e788      	b.n	80012f0 <__aeabi_ddiv+0x7c>
 80013de:	2300      	movs	r3, #0
 80013e0:	4698      	mov	r8, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	2604      	movs	r6, #4
 80013e6:	2400      	movs	r4, #0
 80013e8:	9303      	str	r3, [sp, #12]
 80013ea:	e767      	b.n	80012bc <__aeabi_ddiv+0x48>
 80013ec:	2303      	movs	r3, #3
 80013ee:	46b1      	mov	r9, r6
 80013f0:	9303      	str	r3, [sp, #12]
 80013f2:	260c      	movs	r6, #12
 80013f4:	e762      	b.n	80012bc <__aeabi_ddiv+0x48>
 80013f6:	2a03      	cmp	r2, #3
 80013f8:	d100      	bne.n	80013fc <__aeabi_ddiv+0x188>
 80013fa:	e25c      	b.n	80018b6 <__aeabi_ddiv+0x642>
 80013fc:	9b01      	ldr	r3, [sp, #4]
 80013fe:	2a01      	cmp	r2, #1
 8001400:	d000      	beq.n	8001404 <__aeabi_ddiv+0x190>
 8001402:	e1e4      	b.n	80017ce <__aeabi_ddiv+0x55a>
 8001404:	4013      	ands	r3, r2
 8001406:	469c      	mov	ip, r3
 8001408:	2300      	movs	r3, #0
 800140a:	2400      	movs	r4, #0
 800140c:	2200      	movs	r2, #0
 800140e:	4698      	mov	r8, r3
 8001410:	2100      	movs	r1, #0
 8001412:	0312      	lsls	r2, r2, #12
 8001414:	0b13      	lsrs	r3, r2, #12
 8001416:	0d0a      	lsrs	r2, r1, #20
 8001418:	0512      	lsls	r2, r2, #20
 800141a:	431a      	orrs	r2, r3
 800141c:	0523      	lsls	r3, r4, #20
 800141e:	4c12      	ldr	r4, [pc, #72]	; (8001468 <__aeabi_ddiv+0x1f4>)
 8001420:	4640      	mov	r0, r8
 8001422:	4022      	ands	r2, r4
 8001424:	4313      	orrs	r3, r2
 8001426:	4662      	mov	r2, ip
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	07d2      	lsls	r2, r2, #31
 800142c:	085b      	lsrs	r3, r3, #1
 800142e:	4313      	orrs	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	b007      	add	sp, #28
 8001434:	bc3c      	pop	{r2, r3, r4, r5}
 8001436:	4690      	mov	r8, r2
 8001438:	4699      	mov	r9, r3
 800143a:	46a2      	mov	sl, r4
 800143c:	46ab      	mov	fp, r5
 800143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001440:	2300      	movs	r3, #0
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	469c      	mov	ip, r3
 8001446:	0312      	lsls	r2, r2, #12
 8001448:	4698      	mov	r8, r3
 800144a:	4c03      	ldr	r4, [pc, #12]	; (8001458 <__aeabi_ddiv+0x1e4>)
 800144c:	e7e0      	b.n	8001410 <__aeabi_ddiv+0x19c>
 800144e:	2300      	movs	r3, #0
 8001450:	4c01      	ldr	r4, [pc, #4]	; (8001458 <__aeabi_ddiv+0x1e4>)
 8001452:	2200      	movs	r2, #0
 8001454:	4698      	mov	r8, r3
 8001456:	e7db      	b.n	8001410 <__aeabi_ddiv+0x19c>
 8001458:	000007ff 	.word	0x000007ff
 800145c:	fffffc01 	.word	0xfffffc01
 8001460:	0800c2ac 	.word	0x0800c2ac
 8001464:	fffffc0d 	.word	0xfffffc0d
 8001468:	800fffff 	.word	0x800fffff
 800146c:	45d9      	cmp	r9, fp
 800146e:	d900      	bls.n	8001472 <__aeabi_ddiv+0x1fe>
 8001470:	e139      	b.n	80016e6 <__aeabi_ddiv+0x472>
 8001472:	d100      	bne.n	8001476 <__aeabi_ddiv+0x202>
 8001474:	e134      	b.n	80016e0 <__aeabi_ddiv+0x46c>
 8001476:	2300      	movs	r3, #0
 8001478:	4646      	mov	r6, r8
 800147a:	464d      	mov	r5, r9
 800147c:	469a      	mov	sl, r3
 800147e:	3c01      	subs	r4, #1
 8001480:	465b      	mov	r3, fp
 8001482:	0e0a      	lsrs	r2, r1, #24
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	431a      	orrs	r2, r3
 8001488:	020b      	lsls	r3, r1, #8
 800148a:	0c17      	lsrs	r7, r2, #16
 800148c:	9303      	str	r3, [sp, #12]
 800148e:	0413      	lsls	r3, r2, #16
 8001490:	0c1b      	lsrs	r3, r3, #16
 8001492:	0039      	movs	r1, r7
 8001494:	0028      	movs	r0, r5
 8001496:	4690      	mov	r8, r2
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f7fe fe35 	bl	8000108 <__udivsi3>
 800149e:	0002      	movs	r2, r0
 80014a0:	9b01      	ldr	r3, [sp, #4]
 80014a2:	4683      	mov	fp, r0
 80014a4:	435a      	muls	r2, r3
 80014a6:	0028      	movs	r0, r5
 80014a8:	0039      	movs	r1, r7
 80014aa:	4691      	mov	r9, r2
 80014ac:	f7fe feb2 	bl	8000214 <__aeabi_uidivmod>
 80014b0:	0c35      	lsrs	r5, r6, #16
 80014b2:	0409      	lsls	r1, r1, #16
 80014b4:	430d      	orrs	r5, r1
 80014b6:	45a9      	cmp	r9, r5
 80014b8:	d90d      	bls.n	80014d6 <__aeabi_ddiv+0x262>
 80014ba:	465b      	mov	r3, fp
 80014bc:	4445      	add	r5, r8
 80014be:	3b01      	subs	r3, #1
 80014c0:	45a8      	cmp	r8, r5
 80014c2:	d900      	bls.n	80014c6 <__aeabi_ddiv+0x252>
 80014c4:	e13a      	b.n	800173c <__aeabi_ddiv+0x4c8>
 80014c6:	45a9      	cmp	r9, r5
 80014c8:	d800      	bhi.n	80014cc <__aeabi_ddiv+0x258>
 80014ca:	e137      	b.n	800173c <__aeabi_ddiv+0x4c8>
 80014cc:	2302      	movs	r3, #2
 80014ce:	425b      	negs	r3, r3
 80014d0:	469c      	mov	ip, r3
 80014d2:	4445      	add	r5, r8
 80014d4:	44e3      	add	fp, ip
 80014d6:	464b      	mov	r3, r9
 80014d8:	1aeb      	subs	r3, r5, r3
 80014da:	0039      	movs	r1, r7
 80014dc:	0018      	movs	r0, r3
 80014de:	9304      	str	r3, [sp, #16]
 80014e0:	f7fe fe12 	bl	8000108 <__udivsi3>
 80014e4:	9b01      	ldr	r3, [sp, #4]
 80014e6:	0005      	movs	r5, r0
 80014e8:	4343      	muls	r3, r0
 80014ea:	0039      	movs	r1, r7
 80014ec:	9804      	ldr	r0, [sp, #16]
 80014ee:	4699      	mov	r9, r3
 80014f0:	f7fe fe90 	bl	8000214 <__aeabi_uidivmod>
 80014f4:	0433      	lsls	r3, r6, #16
 80014f6:	0409      	lsls	r1, r1, #16
 80014f8:	0c1b      	lsrs	r3, r3, #16
 80014fa:	430b      	orrs	r3, r1
 80014fc:	4599      	cmp	r9, r3
 80014fe:	d909      	bls.n	8001514 <__aeabi_ddiv+0x2a0>
 8001500:	4443      	add	r3, r8
 8001502:	1e6a      	subs	r2, r5, #1
 8001504:	4598      	cmp	r8, r3
 8001506:	d900      	bls.n	800150a <__aeabi_ddiv+0x296>
 8001508:	e11a      	b.n	8001740 <__aeabi_ddiv+0x4cc>
 800150a:	4599      	cmp	r9, r3
 800150c:	d800      	bhi.n	8001510 <__aeabi_ddiv+0x29c>
 800150e:	e117      	b.n	8001740 <__aeabi_ddiv+0x4cc>
 8001510:	3d02      	subs	r5, #2
 8001512:	4443      	add	r3, r8
 8001514:	464a      	mov	r2, r9
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	465a      	mov	r2, fp
 800151a:	0412      	lsls	r2, r2, #16
 800151c:	432a      	orrs	r2, r5
 800151e:	9903      	ldr	r1, [sp, #12]
 8001520:	4693      	mov	fp, r2
 8001522:	0c10      	lsrs	r0, r2, #16
 8001524:	0c0a      	lsrs	r2, r1, #16
 8001526:	4691      	mov	r9, r2
 8001528:	0409      	lsls	r1, r1, #16
 800152a:	465a      	mov	r2, fp
 800152c:	0c09      	lsrs	r1, r1, #16
 800152e:	464e      	mov	r6, r9
 8001530:	000d      	movs	r5, r1
 8001532:	0412      	lsls	r2, r2, #16
 8001534:	0c12      	lsrs	r2, r2, #16
 8001536:	4345      	muls	r5, r0
 8001538:	9105      	str	r1, [sp, #20]
 800153a:	4351      	muls	r1, r2
 800153c:	4372      	muls	r2, r6
 800153e:	4370      	muls	r0, r6
 8001540:	1952      	adds	r2, r2, r5
 8001542:	0c0e      	lsrs	r6, r1, #16
 8001544:	18b2      	adds	r2, r6, r2
 8001546:	4295      	cmp	r5, r2
 8001548:	d903      	bls.n	8001552 <__aeabi_ddiv+0x2de>
 800154a:	2580      	movs	r5, #128	; 0x80
 800154c:	026d      	lsls	r5, r5, #9
 800154e:	46ac      	mov	ip, r5
 8001550:	4460      	add	r0, ip
 8001552:	0c15      	lsrs	r5, r2, #16
 8001554:	0409      	lsls	r1, r1, #16
 8001556:	0412      	lsls	r2, r2, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	1828      	adds	r0, r5, r0
 800155c:	1852      	adds	r2, r2, r1
 800155e:	4283      	cmp	r3, r0
 8001560:	d200      	bcs.n	8001564 <__aeabi_ddiv+0x2f0>
 8001562:	e0ce      	b.n	8001702 <__aeabi_ddiv+0x48e>
 8001564:	d100      	bne.n	8001568 <__aeabi_ddiv+0x2f4>
 8001566:	e0c8      	b.n	80016fa <__aeabi_ddiv+0x486>
 8001568:	1a1d      	subs	r5, r3, r0
 800156a:	4653      	mov	r3, sl
 800156c:	1a9e      	subs	r6, r3, r2
 800156e:	45b2      	cmp	sl, r6
 8001570:	4192      	sbcs	r2, r2
 8001572:	4252      	negs	r2, r2
 8001574:	1aab      	subs	r3, r5, r2
 8001576:	469a      	mov	sl, r3
 8001578:	4598      	cmp	r8, r3
 800157a:	d100      	bne.n	800157e <__aeabi_ddiv+0x30a>
 800157c:	e117      	b.n	80017ae <__aeabi_ddiv+0x53a>
 800157e:	0039      	movs	r1, r7
 8001580:	0018      	movs	r0, r3
 8001582:	f7fe fdc1 	bl	8000108 <__udivsi3>
 8001586:	9b01      	ldr	r3, [sp, #4]
 8001588:	0005      	movs	r5, r0
 800158a:	4343      	muls	r3, r0
 800158c:	0039      	movs	r1, r7
 800158e:	4650      	mov	r0, sl
 8001590:	9304      	str	r3, [sp, #16]
 8001592:	f7fe fe3f 	bl	8000214 <__aeabi_uidivmod>
 8001596:	9804      	ldr	r0, [sp, #16]
 8001598:	040b      	lsls	r3, r1, #16
 800159a:	0c31      	lsrs	r1, r6, #16
 800159c:	4319      	orrs	r1, r3
 800159e:	4288      	cmp	r0, r1
 80015a0:	d909      	bls.n	80015b6 <__aeabi_ddiv+0x342>
 80015a2:	4441      	add	r1, r8
 80015a4:	1e6b      	subs	r3, r5, #1
 80015a6:	4588      	cmp	r8, r1
 80015a8:	d900      	bls.n	80015ac <__aeabi_ddiv+0x338>
 80015aa:	e107      	b.n	80017bc <__aeabi_ddiv+0x548>
 80015ac:	4288      	cmp	r0, r1
 80015ae:	d800      	bhi.n	80015b2 <__aeabi_ddiv+0x33e>
 80015b0:	e104      	b.n	80017bc <__aeabi_ddiv+0x548>
 80015b2:	3d02      	subs	r5, #2
 80015b4:	4441      	add	r1, r8
 80015b6:	9b04      	ldr	r3, [sp, #16]
 80015b8:	1acb      	subs	r3, r1, r3
 80015ba:	0018      	movs	r0, r3
 80015bc:	0039      	movs	r1, r7
 80015be:	9304      	str	r3, [sp, #16]
 80015c0:	f7fe fda2 	bl	8000108 <__udivsi3>
 80015c4:	9b01      	ldr	r3, [sp, #4]
 80015c6:	4682      	mov	sl, r0
 80015c8:	4343      	muls	r3, r0
 80015ca:	0039      	movs	r1, r7
 80015cc:	9804      	ldr	r0, [sp, #16]
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	f7fe fe20 	bl	8000214 <__aeabi_uidivmod>
 80015d4:	9801      	ldr	r0, [sp, #4]
 80015d6:	040b      	lsls	r3, r1, #16
 80015d8:	0431      	lsls	r1, r6, #16
 80015da:	0c09      	lsrs	r1, r1, #16
 80015dc:	4319      	orrs	r1, r3
 80015de:	4288      	cmp	r0, r1
 80015e0:	d90d      	bls.n	80015fe <__aeabi_ddiv+0x38a>
 80015e2:	4653      	mov	r3, sl
 80015e4:	4441      	add	r1, r8
 80015e6:	3b01      	subs	r3, #1
 80015e8:	4588      	cmp	r8, r1
 80015ea:	d900      	bls.n	80015ee <__aeabi_ddiv+0x37a>
 80015ec:	e0e8      	b.n	80017c0 <__aeabi_ddiv+0x54c>
 80015ee:	4288      	cmp	r0, r1
 80015f0:	d800      	bhi.n	80015f4 <__aeabi_ddiv+0x380>
 80015f2:	e0e5      	b.n	80017c0 <__aeabi_ddiv+0x54c>
 80015f4:	2302      	movs	r3, #2
 80015f6:	425b      	negs	r3, r3
 80015f8:	469c      	mov	ip, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	44e2      	add	sl, ip
 80015fe:	9b01      	ldr	r3, [sp, #4]
 8001600:	042d      	lsls	r5, r5, #16
 8001602:	1ace      	subs	r6, r1, r3
 8001604:	4651      	mov	r1, sl
 8001606:	4329      	orrs	r1, r5
 8001608:	9d05      	ldr	r5, [sp, #20]
 800160a:	464f      	mov	r7, r9
 800160c:	002a      	movs	r2, r5
 800160e:	040b      	lsls	r3, r1, #16
 8001610:	0c08      	lsrs	r0, r1, #16
 8001612:	0c1b      	lsrs	r3, r3, #16
 8001614:	435a      	muls	r2, r3
 8001616:	4345      	muls	r5, r0
 8001618:	437b      	muls	r3, r7
 800161a:	4378      	muls	r0, r7
 800161c:	195b      	adds	r3, r3, r5
 800161e:	0c17      	lsrs	r7, r2, #16
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	429d      	cmp	r5, r3
 8001624:	d903      	bls.n	800162e <__aeabi_ddiv+0x3ba>
 8001626:	2580      	movs	r5, #128	; 0x80
 8001628:	026d      	lsls	r5, r5, #9
 800162a:	46ac      	mov	ip, r5
 800162c:	4460      	add	r0, ip
 800162e:	0c1d      	lsrs	r5, r3, #16
 8001630:	0412      	lsls	r2, r2, #16
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	0c12      	lsrs	r2, r2, #16
 8001636:	1828      	adds	r0, r5, r0
 8001638:	189b      	adds	r3, r3, r2
 800163a:	4286      	cmp	r6, r0
 800163c:	d200      	bcs.n	8001640 <__aeabi_ddiv+0x3cc>
 800163e:	e093      	b.n	8001768 <__aeabi_ddiv+0x4f4>
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x3d0>
 8001642:	e08e      	b.n	8001762 <__aeabi_ddiv+0x4ee>
 8001644:	2301      	movs	r3, #1
 8001646:	4319      	orrs	r1, r3
 8001648:	4ba0      	ldr	r3, [pc, #640]	; (80018cc <__aeabi_ddiv+0x658>)
 800164a:	18e3      	adds	r3, r4, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	dc00      	bgt.n	8001652 <__aeabi_ddiv+0x3de>
 8001650:	e099      	b.n	8001786 <__aeabi_ddiv+0x512>
 8001652:	074a      	lsls	r2, r1, #29
 8001654:	d000      	beq.n	8001658 <__aeabi_ddiv+0x3e4>
 8001656:	e09e      	b.n	8001796 <__aeabi_ddiv+0x522>
 8001658:	465a      	mov	r2, fp
 800165a:	01d2      	lsls	r2, r2, #7
 800165c:	d506      	bpl.n	800166c <__aeabi_ddiv+0x3f8>
 800165e:	465a      	mov	r2, fp
 8001660:	4b9b      	ldr	r3, [pc, #620]	; (80018d0 <__aeabi_ddiv+0x65c>)
 8001662:	401a      	ands	r2, r3
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	4693      	mov	fp, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	18e3      	adds	r3, r4, r3
 800166c:	4a99      	ldr	r2, [pc, #612]	; (80018d4 <__aeabi_ddiv+0x660>)
 800166e:	4293      	cmp	r3, r2
 8001670:	dd68      	ble.n	8001744 <__aeabi_ddiv+0x4d0>
 8001672:	2301      	movs	r3, #1
 8001674:	9a02      	ldr	r2, [sp, #8]
 8001676:	4c98      	ldr	r4, [pc, #608]	; (80018d8 <__aeabi_ddiv+0x664>)
 8001678:	401a      	ands	r2, r3
 800167a:	2300      	movs	r3, #0
 800167c:	4694      	mov	ip, r2
 800167e:	4698      	mov	r8, r3
 8001680:	2200      	movs	r2, #0
 8001682:	e6c5      	b.n	8001410 <__aeabi_ddiv+0x19c>
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	464b      	mov	r3, r9
 8001688:	0312      	lsls	r2, r2, #12
 800168a:	4213      	tst	r3, r2
 800168c:	d00a      	beq.n	80016a4 <__aeabi_ddiv+0x430>
 800168e:	465b      	mov	r3, fp
 8001690:	4213      	tst	r3, r2
 8001692:	d106      	bne.n	80016a2 <__aeabi_ddiv+0x42e>
 8001694:	431a      	orrs	r2, r3
 8001696:	0312      	lsls	r2, r2, #12
 8001698:	0b12      	lsrs	r2, r2, #12
 800169a:	46ac      	mov	ip, r5
 800169c:	4688      	mov	r8, r1
 800169e:	4c8e      	ldr	r4, [pc, #568]	; (80018d8 <__aeabi_ddiv+0x664>)
 80016a0:	e6b6      	b.n	8001410 <__aeabi_ddiv+0x19c>
 80016a2:	464b      	mov	r3, r9
 80016a4:	431a      	orrs	r2, r3
 80016a6:	0312      	lsls	r2, r2, #12
 80016a8:	0b12      	lsrs	r2, r2, #12
 80016aa:	46bc      	mov	ip, r7
 80016ac:	4c8a      	ldr	r4, [pc, #552]	; (80018d8 <__aeabi_ddiv+0x664>)
 80016ae:	e6af      	b.n	8001410 <__aeabi_ddiv+0x19c>
 80016b0:	0003      	movs	r3, r0
 80016b2:	465a      	mov	r2, fp
 80016b4:	3b28      	subs	r3, #40	; 0x28
 80016b6:	409a      	lsls	r2, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	4691      	mov	r9, r2
 80016bc:	4698      	mov	r8, r3
 80016be:	e657      	b.n	8001370 <__aeabi_ddiv+0xfc>
 80016c0:	4658      	mov	r0, fp
 80016c2:	f001 f889 	bl	80027d8 <__clzsi2>
 80016c6:	3020      	adds	r0, #32
 80016c8:	e640      	b.n	800134c <__aeabi_ddiv+0xd8>
 80016ca:	0003      	movs	r3, r0
 80016cc:	4652      	mov	r2, sl
 80016ce:	3b28      	subs	r3, #40	; 0x28
 80016d0:	409a      	lsls	r2, r3
 80016d2:	2100      	movs	r1, #0
 80016d4:	4693      	mov	fp, r2
 80016d6:	e677      	b.n	80013c8 <__aeabi_ddiv+0x154>
 80016d8:	f001 f87e 	bl	80027d8 <__clzsi2>
 80016dc:	3020      	adds	r0, #32
 80016de:	e65f      	b.n	80013a0 <__aeabi_ddiv+0x12c>
 80016e0:	4588      	cmp	r8, r1
 80016e2:	d200      	bcs.n	80016e6 <__aeabi_ddiv+0x472>
 80016e4:	e6c7      	b.n	8001476 <__aeabi_ddiv+0x202>
 80016e6:	464b      	mov	r3, r9
 80016e8:	07de      	lsls	r6, r3, #31
 80016ea:	085d      	lsrs	r5, r3, #1
 80016ec:	4643      	mov	r3, r8
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	431e      	orrs	r6, r3
 80016f2:	4643      	mov	r3, r8
 80016f4:	07db      	lsls	r3, r3, #31
 80016f6:	469a      	mov	sl, r3
 80016f8:	e6c2      	b.n	8001480 <__aeabi_ddiv+0x20c>
 80016fa:	2500      	movs	r5, #0
 80016fc:	4592      	cmp	sl, r2
 80016fe:	d300      	bcc.n	8001702 <__aeabi_ddiv+0x48e>
 8001700:	e733      	b.n	800156a <__aeabi_ddiv+0x2f6>
 8001702:	9e03      	ldr	r6, [sp, #12]
 8001704:	4659      	mov	r1, fp
 8001706:	46b4      	mov	ip, r6
 8001708:	44e2      	add	sl, ip
 800170a:	45b2      	cmp	sl, r6
 800170c:	41ad      	sbcs	r5, r5
 800170e:	426d      	negs	r5, r5
 8001710:	4445      	add	r5, r8
 8001712:	18eb      	adds	r3, r5, r3
 8001714:	3901      	subs	r1, #1
 8001716:	4598      	cmp	r8, r3
 8001718:	d207      	bcs.n	800172a <__aeabi_ddiv+0x4b6>
 800171a:	4298      	cmp	r0, r3
 800171c:	d900      	bls.n	8001720 <__aeabi_ddiv+0x4ac>
 800171e:	e07f      	b.n	8001820 <__aeabi_ddiv+0x5ac>
 8001720:	d100      	bne.n	8001724 <__aeabi_ddiv+0x4b0>
 8001722:	e0bc      	b.n	800189e <__aeabi_ddiv+0x62a>
 8001724:	1a1d      	subs	r5, r3, r0
 8001726:	468b      	mov	fp, r1
 8001728:	e71f      	b.n	800156a <__aeabi_ddiv+0x2f6>
 800172a:	4598      	cmp	r8, r3
 800172c:	d1fa      	bne.n	8001724 <__aeabi_ddiv+0x4b0>
 800172e:	9d03      	ldr	r5, [sp, #12]
 8001730:	4555      	cmp	r5, sl
 8001732:	d9f2      	bls.n	800171a <__aeabi_ddiv+0x4a6>
 8001734:	4643      	mov	r3, r8
 8001736:	468b      	mov	fp, r1
 8001738:	1a1d      	subs	r5, r3, r0
 800173a:	e716      	b.n	800156a <__aeabi_ddiv+0x2f6>
 800173c:	469b      	mov	fp, r3
 800173e:	e6ca      	b.n	80014d6 <__aeabi_ddiv+0x262>
 8001740:	0015      	movs	r5, r2
 8001742:	e6e7      	b.n	8001514 <__aeabi_ddiv+0x2a0>
 8001744:	465a      	mov	r2, fp
 8001746:	08c9      	lsrs	r1, r1, #3
 8001748:	0752      	lsls	r2, r2, #29
 800174a:	430a      	orrs	r2, r1
 800174c:	055b      	lsls	r3, r3, #21
 800174e:	4690      	mov	r8, r2
 8001750:	0d5c      	lsrs	r4, r3, #21
 8001752:	465a      	mov	r2, fp
 8001754:	2301      	movs	r3, #1
 8001756:	9902      	ldr	r1, [sp, #8]
 8001758:	0252      	lsls	r2, r2, #9
 800175a:	4019      	ands	r1, r3
 800175c:	0b12      	lsrs	r2, r2, #12
 800175e:	468c      	mov	ip, r1
 8001760:	e656      	b.n	8001410 <__aeabi_ddiv+0x19c>
 8001762:	2b00      	cmp	r3, #0
 8001764:	d100      	bne.n	8001768 <__aeabi_ddiv+0x4f4>
 8001766:	e76f      	b.n	8001648 <__aeabi_ddiv+0x3d4>
 8001768:	4446      	add	r6, r8
 800176a:	1e4a      	subs	r2, r1, #1
 800176c:	45b0      	cmp	r8, r6
 800176e:	d929      	bls.n	80017c4 <__aeabi_ddiv+0x550>
 8001770:	0011      	movs	r1, r2
 8001772:	4286      	cmp	r6, r0
 8001774:	d000      	beq.n	8001778 <__aeabi_ddiv+0x504>
 8001776:	e765      	b.n	8001644 <__aeabi_ddiv+0x3d0>
 8001778:	9a03      	ldr	r2, [sp, #12]
 800177a:	4293      	cmp	r3, r2
 800177c:	d000      	beq.n	8001780 <__aeabi_ddiv+0x50c>
 800177e:	e761      	b.n	8001644 <__aeabi_ddiv+0x3d0>
 8001780:	e762      	b.n	8001648 <__aeabi_ddiv+0x3d4>
 8001782:	2101      	movs	r1, #1
 8001784:	4249      	negs	r1, r1
 8001786:	2001      	movs	r0, #1
 8001788:	1ac2      	subs	r2, r0, r3
 800178a:	2a38      	cmp	r2, #56	; 0x38
 800178c:	dd21      	ble.n	80017d2 <__aeabi_ddiv+0x55e>
 800178e:	9b02      	ldr	r3, [sp, #8]
 8001790:	4003      	ands	r3, r0
 8001792:	469c      	mov	ip, r3
 8001794:	e638      	b.n	8001408 <__aeabi_ddiv+0x194>
 8001796:	220f      	movs	r2, #15
 8001798:	400a      	ands	r2, r1
 800179a:	2a04      	cmp	r2, #4
 800179c:	d100      	bne.n	80017a0 <__aeabi_ddiv+0x52c>
 800179e:	e75b      	b.n	8001658 <__aeabi_ddiv+0x3e4>
 80017a0:	000a      	movs	r2, r1
 80017a2:	1d11      	adds	r1, r2, #4
 80017a4:	4291      	cmp	r1, r2
 80017a6:	4192      	sbcs	r2, r2
 80017a8:	4252      	negs	r2, r2
 80017aa:	4493      	add	fp, r2
 80017ac:	e754      	b.n	8001658 <__aeabi_ddiv+0x3e4>
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <__aeabi_ddiv+0x658>)
 80017b0:	18e3      	adds	r3, r4, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	dde5      	ble.n	8001782 <__aeabi_ddiv+0x50e>
 80017b6:	2201      	movs	r2, #1
 80017b8:	4252      	negs	r2, r2
 80017ba:	e7f2      	b.n	80017a2 <__aeabi_ddiv+0x52e>
 80017bc:	001d      	movs	r5, r3
 80017be:	e6fa      	b.n	80015b6 <__aeabi_ddiv+0x342>
 80017c0:	469a      	mov	sl, r3
 80017c2:	e71c      	b.n	80015fe <__aeabi_ddiv+0x38a>
 80017c4:	42b0      	cmp	r0, r6
 80017c6:	d839      	bhi.n	800183c <__aeabi_ddiv+0x5c8>
 80017c8:	d06e      	beq.n	80018a8 <__aeabi_ddiv+0x634>
 80017ca:	0011      	movs	r1, r2
 80017cc:	e73a      	b.n	8001644 <__aeabi_ddiv+0x3d0>
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	e73a      	b.n	8001648 <__aeabi_ddiv+0x3d4>
 80017d2:	2a1f      	cmp	r2, #31
 80017d4:	dc3c      	bgt.n	8001850 <__aeabi_ddiv+0x5dc>
 80017d6:	2320      	movs	r3, #32
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	000c      	movs	r4, r1
 80017dc:	4658      	mov	r0, fp
 80017de:	4099      	lsls	r1, r3
 80017e0:	4098      	lsls	r0, r3
 80017e2:	1e4b      	subs	r3, r1, #1
 80017e4:	4199      	sbcs	r1, r3
 80017e6:	465b      	mov	r3, fp
 80017e8:	40d4      	lsrs	r4, r2
 80017ea:	40d3      	lsrs	r3, r2
 80017ec:	4320      	orrs	r0, r4
 80017ee:	4308      	orrs	r0, r1
 80017f0:	001a      	movs	r2, r3
 80017f2:	0743      	lsls	r3, r0, #29
 80017f4:	d009      	beq.n	800180a <__aeabi_ddiv+0x596>
 80017f6:	230f      	movs	r3, #15
 80017f8:	4003      	ands	r3, r0
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d005      	beq.n	800180a <__aeabi_ddiv+0x596>
 80017fe:	0001      	movs	r1, r0
 8001800:	1d08      	adds	r0, r1, #4
 8001802:	4288      	cmp	r0, r1
 8001804:	419b      	sbcs	r3, r3
 8001806:	425b      	negs	r3, r3
 8001808:	18d2      	adds	r2, r2, r3
 800180a:	0213      	lsls	r3, r2, #8
 800180c:	d53a      	bpl.n	8001884 <__aeabi_ddiv+0x610>
 800180e:	2301      	movs	r3, #1
 8001810:	9a02      	ldr	r2, [sp, #8]
 8001812:	2401      	movs	r4, #1
 8001814:	401a      	ands	r2, r3
 8001816:	2300      	movs	r3, #0
 8001818:	4694      	mov	ip, r2
 800181a:	4698      	mov	r8, r3
 800181c:	2200      	movs	r2, #0
 800181e:	e5f7      	b.n	8001410 <__aeabi_ddiv+0x19c>
 8001820:	2102      	movs	r1, #2
 8001822:	4249      	negs	r1, r1
 8001824:	468c      	mov	ip, r1
 8001826:	9d03      	ldr	r5, [sp, #12]
 8001828:	44e3      	add	fp, ip
 800182a:	46ac      	mov	ip, r5
 800182c:	44e2      	add	sl, ip
 800182e:	45aa      	cmp	sl, r5
 8001830:	41ad      	sbcs	r5, r5
 8001832:	426d      	negs	r5, r5
 8001834:	4445      	add	r5, r8
 8001836:	18ed      	adds	r5, r5, r3
 8001838:	1a2d      	subs	r5, r5, r0
 800183a:	e696      	b.n	800156a <__aeabi_ddiv+0x2f6>
 800183c:	1e8a      	subs	r2, r1, #2
 800183e:	9903      	ldr	r1, [sp, #12]
 8001840:	004d      	lsls	r5, r1, #1
 8001842:	428d      	cmp	r5, r1
 8001844:	4189      	sbcs	r1, r1
 8001846:	4249      	negs	r1, r1
 8001848:	4441      	add	r1, r8
 800184a:	1876      	adds	r6, r6, r1
 800184c:	9503      	str	r5, [sp, #12]
 800184e:	e78f      	b.n	8001770 <__aeabi_ddiv+0x4fc>
 8001850:	201f      	movs	r0, #31
 8001852:	4240      	negs	r0, r0
 8001854:	1ac3      	subs	r3, r0, r3
 8001856:	4658      	mov	r0, fp
 8001858:	40d8      	lsrs	r0, r3
 800185a:	0003      	movs	r3, r0
 800185c:	2a20      	cmp	r2, #32
 800185e:	d028      	beq.n	80018b2 <__aeabi_ddiv+0x63e>
 8001860:	2040      	movs	r0, #64	; 0x40
 8001862:	465d      	mov	r5, fp
 8001864:	1a82      	subs	r2, r0, r2
 8001866:	4095      	lsls	r5, r2
 8001868:	4329      	orrs	r1, r5
 800186a:	1e4a      	subs	r2, r1, #1
 800186c:	4191      	sbcs	r1, r2
 800186e:	4319      	orrs	r1, r3
 8001870:	2307      	movs	r3, #7
 8001872:	2200      	movs	r2, #0
 8001874:	400b      	ands	r3, r1
 8001876:	d009      	beq.n	800188c <__aeabi_ddiv+0x618>
 8001878:	230f      	movs	r3, #15
 800187a:	2200      	movs	r2, #0
 800187c:	400b      	ands	r3, r1
 800187e:	0008      	movs	r0, r1
 8001880:	2b04      	cmp	r3, #4
 8001882:	d1bd      	bne.n	8001800 <__aeabi_ddiv+0x58c>
 8001884:	0001      	movs	r1, r0
 8001886:	0753      	lsls	r3, r2, #29
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	0b12      	lsrs	r2, r2, #12
 800188c:	08c9      	lsrs	r1, r1, #3
 800188e:	4319      	orrs	r1, r3
 8001890:	2301      	movs	r3, #1
 8001892:	4688      	mov	r8, r1
 8001894:	9902      	ldr	r1, [sp, #8]
 8001896:	2400      	movs	r4, #0
 8001898:	4019      	ands	r1, r3
 800189a:	468c      	mov	ip, r1
 800189c:	e5b8      	b.n	8001410 <__aeabi_ddiv+0x19c>
 800189e:	4552      	cmp	r2, sl
 80018a0:	d8be      	bhi.n	8001820 <__aeabi_ddiv+0x5ac>
 80018a2:	468b      	mov	fp, r1
 80018a4:	2500      	movs	r5, #0
 80018a6:	e660      	b.n	800156a <__aeabi_ddiv+0x2f6>
 80018a8:	9d03      	ldr	r5, [sp, #12]
 80018aa:	429d      	cmp	r5, r3
 80018ac:	d3c6      	bcc.n	800183c <__aeabi_ddiv+0x5c8>
 80018ae:	0011      	movs	r1, r2
 80018b0:	e762      	b.n	8001778 <__aeabi_ddiv+0x504>
 80018b2:	2500      	movs	r5, #0
 80018b4:	e7d8      	b.n	8001868 <__aeabi_ddiv+0x5f4>
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	465b      	mov	r3, fp
 80018ba:	0312      	lsls	r2, r2, #12
 80018bc:	431a      	orrs	r2, r3
 80018be:	9b01      	ldr	r3, [sp, #4]
 80018c0:	0312      	lsls	r2, r2, #12
 80018c2:	0b12      	lsrs	r2, r2, #12
 80018c4:	469c      	mov	ip, r3
 80018c6:	4688      	mov	r8, r1
 80018c8:	4c03      	ldr	r4, [pc, #12]	; (80018d8 <__aeabi_ddiv+0x664>)
 80018ca:	e5a1      	b.n	8001410 <__aeabi_ddiv+0x19c>
 80018cc:	000003ff 	.word	0x000003ff
 80018d0:	feffffff 	.word	0xfeffffff
 80018d4:	000007fe 	.word	0x000007fe
 80018d8:	000007ff 	.word	0x000007ff

080018dc <__eqdf2>:
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018de:	464f      	mov	r7, r9
 80018e0:	4646      	mov	r6, r8
 80018e2:	46d6      	mov	lr, sl
 80018e4:	005c      	lsls	r4, r3, #1
 80018e6:	b5c0      	push	{r6, r7, lr}
 80018e8:	031f      	lsls	r7, r3, #12
 80018ea:	0fdb      	lsrs	r3, r3, #31
 80018ec:	469a      	mov	sl, r3
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <__eqdf2+0x70>)
 80018f0:	030e      	lsls	r6, r1, #12
 80018f2:	004d      	lsls	r5, r1, #1
 80018f4:	4684      	mov	ip, r0
 80018f6:	4680      	mov	r8, r0
 80018f8:	0b36      	lsrs	r6, r6, #12
 80018fa:	0d6d      	lsrs	r5, r5, #21
 80018fc:	0fc9      	lsrs	r1, r1, #31
 80018fe:	4691      	mov	r9, r2
 8001900:	0b3f      	lsrs	r7, r7, #12
 8001902:	0d64      	lsrs	r4, r4, #21
 8001904:	2001      	movs	r0, #1
 8001906:	429d      	cmp	r5, r3
 8001908:	d008      	beq.n	800191c <__eqdf2+0x40>
 800190a:	429c      	cmp	r4, r3
 800190c:	d001      	beq.n	8001912 <__eqdf2+0x36>
 800190e:	42a5      	cmp	r5, r4
 8001910:	d00b      	beq.n	800192a <__eqdf2+0x4e>
 8001912:	bc1c      	pop	{r2, r3, r4}
 8001914:	4690      	mov	r8, r2
 8001916:	4699      	mov	r9, r3
 8001918:	46a2      	mov	sl, r4
 800191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191c:	4663      	mov	r3, ip
 800191e:	4333      	orrs	r3, r6
 8001920:	d1f7      	bne.n	8001912 <__eqdf2+0x36>
 8001922:	42ac      	cmp	r4, r5
 8001924:	d1f5      	bne.n	8001912 <__eqdf2+0x36>
 8001926:	433a      	orrs	r2, r7
 8001928:	d1f3      	bne.n	8001912 <__eqdf2+0x36>
 800192a:	2001      	movs	r0, #1
 800192c:	42be      	cmp	r6, r7
 800192e:	d1f0      	bne.n	8001912 <__eqdf2+0x36>
 8001930:	45c8      	cmp	r8, r9
 8001932:	d1ee      	bne.n	8001912 <__eqdf2+0x36>
 8001934:	4551      	cmp	r1, sl
 8001936:	d007      	beq.n	8001948 <__eqdf2+0x6c>
 8001938:	2d00      	cmp	r5, #0
 800193a:	d1ea      	bne.n	8001912 <__eqdf2+0x36>
 800193c:	4663      	mov	r3, ip
 800193e:	431e      	orrs	r6, r3
 8001940:	0030      	movs	r0, r6
 8001942:	1e46      	subs	r6, r0, #1
 8001944:	41b0      	sbcs	r0, r6
 8001946:	e7e4      	b.n	8001912 <__eqdf2+0x36>
 8001948:	2000      	movs	r0, #0
 800194a:	e7e2      	b.n	8001912 <__eqdf2+0x36>
 800194c:	000007ff 	.word	0x000007ff

08001950 <__gedf2>:
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	4645      	mov	r5, r8
 8001954:	46de      	mov	lr, fp
 8001956:	4657      	mov	r7, sl
 8001958:	464e      	mov	r6, r9
 800195a:	b5e0      	push	{r5, r6, r7, lr}
 800195c:	031f      	lsls	r7, r3, #12
 800195e:	0b3d      	lsrs	r5, r7, #12
 8001960:	4f2c      	ldr	r7, [pc, #176]	; (8001a14 <__gedf2+0xc4>)
 8001962:	030e      	lsls	r6, r1, #12
 8001964:	004c      	lsls	r4, r1, #1
 8001966:	46ab      	mov	fp, r5
 8001968:	005d      	lsls	r5, r3, #1
 800196a:	4684      	mov	ip, r0
 800196c:	0b36      	lsrs	r6, r6, #12
 800196e:	0d64      	lsrs	r4, r4, #21
 8001970:	0fc9      	lsrs	r1, r1, #31
 8001972:	4690      	mov	r8, r2
 8001974:	0d6d      	lsrs	r5, r5, #21
 8001976:	0fdb      	lsrs	r3, r3, #31
 8001978:	42bc      	cmp	r4, r7
 800197a:	d02a      	beq.n	80019d2 <__gedf2+0x82>
 800197c:	4f25      	ldr	r7, [pc, #148]	; (8001a14 <__gedf2+0xc4>)
 800197e:	42bd      	cmp	r5, r7
 8001980:	d02d      	beq.n	80019de <__gedf2+0x8e>
 8001982:	2c00      	cmp	r4, #0
 8001984:	d10f      	bne.n	80019a6 <__gedf2+0x56>
 8001986:	4330      	orrs	r0, r6
 8001988:	0007      	movs	r7, r0
 800198a:	4681      	mov	r9, r0
 800198c:	4278      	negs	r0, r7
 800198e:	4178      	adcs	r0, r7
 8001990:	b2c0      	uxtb	r0, r0
 8001992:	2d00      	cmp	r5, #0
 8001994:	d117      	bne.n	80019c6 <__gedf2+0x76>
 8001996:	465f      	mov	r7, fp
 8001998:	433a      	orrs	r2, r7
 800199a:	d114      	bne.n	80019c6 <__gedf2+0x76>
 800199c:	464b      	mov	r3, r9
 800199e:	2000      	movs	r0, #0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00a      	beq.n	80019ba <__gedf2+0x6a>
 80019a4:	e006      	b.n	80019b4 <__gedf2+0x64>
 80019a6:	2d00      	cmp	r5, #0
 80019a8:	d102      	bne.n	80019b0 <__gedf2+0x60>
 80019aa:	4658      	mov	r0, fp
 80019ac:	4302      	orrs	r2, r0
 80019ae:	d001      	beq.n	80019b4 <__gedf2+0x64>
 80019b0:	4299      	cmp	r1, r3
 80019b2:	d018      	beq.n	80019e6 <__gedf2+0x96>
 80019b4:	4248      	negs	r0, r1
 80019b6:	2101      	movs	r1, #1
 80019b8:	4308      	orrs	r0, r1
 80019ba:	bc3c      	pop	{r2, r3, r4, r5}
 80019bc:	4690      	mov	r8, r2
 80019be:	4699      	mov	r9, r3
 80019c0:	46a2      	mov	sl, r4
 80019c2:	46ab      	mov	fp, r5
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d0f2      	beq.n	80019b0 <__gedf2+0x60>
 80019ca:	2001      	movs	r0, #1
 80019cc:	3b01      	subs	r3, #1
 80019ce:	4318      	orrs	r0, r3
 80019d0:	e7f3      	b.n	80019ba <__gedf2+0x6a>
 80019d2:	0037      	movs	r7, r6
 80019d4:	4307      	orrs	r7, r0
 80019d6:	d0d1      	beq.n	800197c <__gedf2+0x2c>
 80019d8:	2002      	movs	r0, #2
 80019da:	4240      	negs	r0, r0
 80019dc:	e7ed      	b.n	80019ba <__gedf2+0x6a>
 80019de:	465f      	mov	r7, fp
 80019e0:	4317      	orrs	r7, r2
 80019e2:	d0ce      	beq.n	8001982 <__gedf2+0x32>
 80019e4:	e7f8      	b.n	80019d8 <__gedf2+0x88>
 80019e6:	42ac      	cmp	r4, r5
 80019e8:	dce4      	bgt.n	80019b4 <__gedf2+0x64>
 80019ea:	da03      	bge.n	80019f4 <__gedf2+0xa4>
 80019ec:	1e48      	subs	r0, r1, #1
 80019ee:	2101      	movs	r1, #1
 80019f0:	4308      	orrs	r0, r1
 80019f2:	e7e2      	b.n	80019ba <__gedf2+0x6a>
 80019f4:	455e      	cmp	r6, fp
 80019f6:	d8dd      	bhi.n	80019b4 <__gedf2+0x64>
 80019f8:	d006      	beq.n	8001a08 <__gedf2+0xb8>
 80019fa:	2000      	movs	r0, #0
 80019fc:	455e      	cmp	r6, fp
 80019fe:	d2dc      	bcs.n	80019ba <__gedf2+0x6a>
 8001a00:	2301      	movs	r3, #1
 8001a02:	1e48      	subs	r0, r1, #1
 8001a04:	4318      	orrs	r0, r3
 8001a06:	e7d8      	b.n	80019ba <__gedf2+0x6a>
 8001a08:	45c4      	cmp	ip, r8
 8001a0a:	d8d3      	bhi.n	80019b4 <__gedf2+0x64>
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	45c4      	cmp	ip, r8
 8001a10:	d3f6      	bcc.n	8001a00 <__gedf2+0xb0>
 8001a12:	e7d2      	b.n	80019ba <__gedf2+0x6a>
 8001a14:	000007ff 	.word	0x000007ff

08001a18 <__ledf2>:
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	464e      	mov	r6, r9
 8001a1c:	4645      	mov	r5, r8
 8001a1e:	46de      	mov	lr, fp
 8001a20:	4657      	mov	r7, sl
 8001a22:	005c      	lsls	r4, r3, #1
 8001a24:	b5e0      	push	{r5, r6, r7, lr}
 8001a26:	031f      	lsls	r7, r3, #12
 8001a28:	0fdb      	lsrs	r3, r3, #31
 8001a2a:	4699      	mov	r9, r3
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <__ledf2+0xc0>)
 8001a2e:	030e      	lsls	r6, r1, #12
 8001a30:	004d      	lsls	r5, r1, #1
 8001a32:	0fc9      	lsrs	r1, r1, #31
 8001a34:	4684      	mov	ip, r0
 8001a36:	0b36      	lsrs	r6, r6, #12
 8001a38:	0d6d      	lsrs	r5, r5, #21
 8001a3a:	468b      	mov	fp, r1
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	0b3f      	lsrs	r7, r7, #12
 8001a40:	0d64      	lsrs	r4, r4, #21
 8001a42:	429d      	cmp	r5, r3
 8001a44:	d020      	beq.n	8001a88 <__ledf2+0x70>
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <__ledf2+0xc0>)
 8001a48:	429c      	cmp	r4, r3
 8001a4a:	d022      	beq.n	8001a92 <__ledf2+0x7a>
 8001a4c:	2d00      	cmp	r5, #0
 8001a4e:	d112      	bne.n	8001a76 <__ledf2+0x5e>
 8001a50:	4330      	orrs	r0, r6
 8001a52:	4243      	negs	r3, r0
 8001a54:	4143      	adcs	r3, r0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d01f      	beq.n	8001a9c <__ledf2+0x84>
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <__ledf2+0x62>
 8001a60:	464b      	mov	r3, r9
 8001a62:	2001      	movs	r0, #1
 8001a64:	3b01      	subs	r3, #1
 8001a66:	4303      	orrs	r3, r0
 8001a68:	0018      	movs	r0, r3
 8001a6a:	bc3c      	pop	{r2, r3, r4, r5}
 8001a6c:	4690      	mov	r8, r2
 8001a6e:	4699      	mov	r9, r3
 8001a70:	46a2      	mov	sl, r4
 8001a72:	46ab      	mov	fp, r5
 8001a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a76:	2c00      	cmp	r4, #0
 8001a78:	d016      	beq.n	8001aa8 <__ledf2+0x90>
 8001a7a:	45cb      	cmp	fp, r9
 8001a7c:	d017      	beq.n	8001aae <__ledf2+0x96>
 8001a7e:	465b      	mov	r3, fp
 8001a80:	4259      	negs	r1, r3
 8001a82:	2301      	movs	r3, #1
 8001a84:	430b      	orrs	r3, r1
 8001a86:	e7ef      	b.n	8001a68 <__ledf2+0x50>
 8001a88:	0031      	movs	r1, r6
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	4301      	orrs	r1, r0
 8001a8e:	d1eb      	bne.n	8001a68 <__ledf2+0x50>
 8001a90:	e7d9      	b.n	8001a46 <__ledf2+0x2e>
 8001a92:	0039      	movs	r1, r7
 8001a94:	2302      	movs	r3, #2
 8001a96:	4311      	orrs	r1, r2
 8001a98:	d1e6      	bne.n	8001a68 <__ledf2+0x50>
 8001a9a:	e7d7      	b.n	8001a4c <__ledf2+0x34>
 8001a9c:	433a      	orrs	r2, r7
 8001a9e:	d1dd      	bne.n	8001a5c <__ledf2+0x44>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d0e0      	beq.n	8001a68 <__ledf2+0x50>
 8001aa6:	e7ea      	b.n	8001a7e <__ledf2+0x66>
 8001aa8:	433a      	orrs	r2, r7
 8001aaa:	d1e6      	bne.n	8001a7a <__ledf2+0x62>
 8001aac:	e7e7      	b.n	8001a7e <__ledf2+0x66>
 8001aae:	42a5      	cmp	r5, r4
 8001ab0:	dce5      	bgt.n	8001a7e <__ledf2+0x66>
 8001ab2:	db05      	blt.n	8001ac0 <__ledf2+0xa8>
 8001ab4:	42be      	cmp	r6, r7
 8001ab6:	d8e2      	bhi.n	8001a7e <__ledf2+0x66>
 8001ab8:	d007      	beq.n	8001aca <__ledf2+0xb2>
 8001aba:	2300      	movs	r3, #0
 8001abc:	42be      	cmp	r6, r7
 8001abe:	d2d3      	bcs.n	8001a68 <__ledf2+0x50>
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	3901      	subs	r1, #1
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	e7ce      	b.n	8001a68 <__ledf2+0x50>
 8001aca:	45c4      	cmp	ip, r8
 8001acc:	d8d7      	bhi.n	8001a7e <__ledf2+0x66>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	45c4      	cmp	ip, r8
 8001ad2:	d3f5      	bcc.n	8001ac0 <__ledf2+0xa8>
 8001ad4:	e7c8      	b.n	8001a68 <__ledf2+0x50>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff

08001adc <__aeabi_dmul>:
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ade:	4657      	mov	r7, sl
 8001ae0:	4645      	mov	r5, r8
 8001ae2:	46de      	mov	lr, fp
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	b5e0      	push	{r5, r6, r7, lr}
 8001ae8:	030c      	lsls	r4, r1, #12
 8001aea:	4698      	mov	r8, r3
 8001aec:	004e      	lsls	r6, r1, #1
 8001aee:	0b23      	lsrs	r3, r4, #12
 8001af0:	b087      	sub	sp, #28
 8001af2:	0007      	movs	r7, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	469b      	mov	fp, r3
 8001af8:	0d76      	lsrs	r6, r6, #21
 8001afa:	0fcd      	lsrs	r5, r1, #31
 8001afc:	2e00      	cmp	r6, #0
 8001afe:	d06b      	beq.n	8001bd8 <__aeabi_dmul+0xfc>
 8001b00:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <__aeabi_dmul+0x1dc>)
 8001b02:	429e      	cmp	r6, r3
 8001b04:	d035      	beq.n	8001b72 <__aeabi_dmul+0x96>
 8001b06:	2480      	movs	r4, #128	; 0x80
 8001b08:	465b      	mov	r3, fp
 8001b0a:	0f42      	lsrs	r2, r0, #29
 8001b0c:	0424      	lsls	r4, r4, #16
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4314      	orrs	r4, r2
 8001b12:	431c      	orrs	r4, r3
 8001b14:	00c3      	lsls	r3, r0, #3
 8001b16:	4699      	mov	r9, r3
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <__aeabi_dmul+0x1e0>)
 8001b1a:	46a3      	mov	fp, r4
 8001b1c:	469c      	mov	ip, r3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2700      	movs	r7, #0
 8001b22:	4466      	add	r6, ip
 8001b24:	9302      	str	r3, [sp, #8]
 8001b26:	4643      	mov	r3, r8
 8001b28:	031c      	lsls	r4, r3, #12
 8001b2a:	005a      	lsls	r2, r3, #1
 8001b2c:	0fdb      	lsrs	r3, r3, #31
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d52      	lsrs	r2, r2, #21
 8001b34:	4698      	mov	r8, r3
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dmul+0x5e>
 8001b38:	e076      	b.n	8001c28 <__aeabi_dmul+0x14c>
 8001b3a:	4b5f      	ldr	r3, [pc, #380]	; (8001cb8 <__aeabi_dmul+0x1dc>)
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d06d      	beq.n	8001c1c <__aeabi_dmul+0x140>
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	0f41      	lsrs	r1, r0, #29
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	430b      	orrs	r3, r1
 8001b48:	495c      	ldr	r1, [pc, #368]	; (8001cbc <__aeabi_dmul+0x1e0>)
 8001b4a:	00e4      	lsls	r4, r4, #3
 8001b4c:	468c      	mov	ip, r1
 8001b4e:	431c      	orrs	r4, r3
 8001b50:	00c3      	lsls	r3, r0, #3
 8001b52:	2000      	movs	r0, #0
 8001b54:	4462      	add	r2, ip
 8001b56:	4641      	mov	r1, r8
 8001b58:	18b6      	adds	r6, r6, r2
 8001b5a:	4069      	eors	r1, r5
 8001b5c:	1c72      	adds	r2, r6, #1
 8001b5e:	9101      	str	r1, [sp, #4]
 8001b60:	4694      	mov	ip, r2
 8001b62:	4307      	orrs	r7, r0
 8001b64:	2f0f      	cmp	r7, #15
 8001b66:	d900      	bls.n	8001b6a <__aeabi_dmul+0x8e>
 8001b68:	e0b0      	b.n	8001ccc <__aeabi_dmul+0x1f0>
 8001b6a:	4a55      	ldr	r2, [pc, #340]	; (8001cc0 <__aeabi_dmul+0x1e4>)
 8001b6c:	00bf      	lsls	r7, r7, #2
 8001b6e:	59d2      	ldr	r2, [r2, r7]
 8001b70:	4697      	mov	pc, r2
 8001b72:	465b      	mov	r3, fp
 8001b74:	4303      	orrs	r3, r0
 8001b76:	4699      	mov	r9, r3
 8001b78:	d000      	beq.n	8001b7c <__aeabi_dmul+0xa0>
 8001b7a:	e087      	b.n	8001c8c <__aeabi_dmul+0x1b0>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	469b      	mov	fp, r3
 8001b80:	3302      	adds	r3, #2
 8001b82:	2708      	movs	r7, #8
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	e7ce      	b.n	8001b26 <__aeabi_dmul+0x4a>
 8001b88:	4642      	mov	r2, r8
 8001b8a:	9201      	str	r2, [sp, #4]
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d067      	beq.n	8001c60 <__aeabi_dmul+0x184>
 8001b90:	2803      	cmp	r0, #3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dmul+0xba>
 8001b94:	e20e      	b.n	8001fb4 <__aeabi_dmul+0x4d8>
 8001b96:	2801      	cmp	r0, #1
 8001b98:	d000      	beq.n	8001b9c <__aeabi_dmul+0xc0>
 8001b9a:	e162      	b.n	8001e62 <__aeabi_dmul+0x386>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	9901      	ldr	r1, [sp, #4]
 8001ba6:	4001      	ands	r1, r0
 8001ba8:	b2cd      	uxtb	r5, r1
 8001baa:	2100      	movs	r1, #0
 8001bac:	0312      	lsls	r2, r2, #12
 8001bae:	0d0b      	lsrs	r3, r1, #20
 8001bb0:	0b12      	lsrs	r2, r2, #12
 8001bb2:	051b      	lsls	r3, r3, #20
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	4a43      	ldr	r2, [pc, #268]	; (8001cc4 <__aeabi_dmul+0x1e8>)
 8001bb8:	0524      	lsls	r4, r4, #20
 8001bba:	4013      	ands	r3, r2
 8001bbc:	431c      	orrs	r4, r3
 8001bbe:	0064      	lsls	r4, r4, #1
 8001bc0:	07ed      	lsls	r5, r5, #31
 8001bc2:	0864      	lsrs	r4, r4, #1
 8001bc4:	432c      	orrs	r4, r5
 8001bc6:	4648      	mov	r0, r9
 8001bc8:	0021      	movs	r1, r4
 8001bca:	b007      	add	sp, #28
 8001bcc:	bc3c      	pop	{r2, r3, r4, r5}
 8001bce:	4690      	mov	r8, r2
 8001bd0:	4699      	mov	r9, r3
 8001bd2:	46a2      	mov	sl, r4
 8001bd4:	46ab      	mov	fp, r5
 8001bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd8:	4303      	orrs	r3, r0
 8001bda:	4699      	mov	r9, r3
 8001bdc:	d04f      	beq.n	8001c7e <__aeabi_dmul+0x1a2>
 8001bde:	465b      	mov	r3, fp
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dmul+0x10a>
 8001be4:	e189      	b.n	8001efa <__aeabi_dmul+0x41e>
 8001be6:	4658      	mov	r0, fp
 8001be8:	f000 fdf6 	bl	80027d8 <__clzsi2>
 8001bec:	0003      	movs	r3, r0
 8001bee:	3b0b      	subs	r3, #11
 8001bf0:	2b1c      	cmp	r3, #28
 8001bf2:	dd00      	ble.n	8001bf6 <__aeabi_dmul+0x11a>
 8001bf4:	e17a      	b.n	8001eec <__aeabi_dmul+0x410>
 8001bf6:	221d      	movs	r2, #29
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	003a      	movs	r2, r7
 8001bfc:	0001      	movs	r1, r0
 8001bfe:	465c      	mov	r4, fp
 8001c00:	40da      	lsrs	r2, r3
 8001c02:	3908      	subs	r1, #8
 8001c04:	408c      	lsls	r4, r1
 8001c06:	0013      	movs	r3, r2
 8001c08:	408f      	lsls	r7, r1
 8001c0a:	4323      	orrs	r3, r4
 8001c0c:	469b      	mov	fp, r3
 8001c0e:	46b9      	mov	r9, r7
 8001c10:	2300      	movs	r3, #0
 8001c12:	4e2d      	ldr	r6, [pc, #180]	; (8001cc8 <__aeabi_dmul+0x1ec>)
 8001c14:	2700      	movs	r7, #0
 8001c16:	1a36      	subs	r6, r6, r0
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	e784      	b.n	8001b26 <__aeabi_dmul+0x4a>
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	4323      	orrs	r3, r4
 8001c20:	d12a      	bne.n	8001c78 <__aeabi_dmul+0x19c>
 8001c22:	2400      	movs	r4, #0
 8001c24:	2002      	movs	r0, #2
 8001c26:	e796      	b.n	8001b56 <__aeabi_dmul+0x7a>
 8001c28:	4653      	mov	r3, sl
 8001c2a:	4323      	orrs	r3, r4
 8001c2c:	d020      	beq.n	8001c70 <__aeabi_dmul+0x194>
 8001c2e:	2c00      	cmp	r4, #0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dmul+0x158>
 8001c32:	e157      	b.n	8001ee4 <__aeabi_dmul+0x408>
 8001c34:	0020      	movs	r0, r4
 8001c36:	f000 fdcf 	bl	80027d8 <__clzsi2>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	3b0b      	subs	r3, #11
 8001c3e:	2b1c      	cmp	r3, #28
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dmul+0x168>
 8001c42:	e149      	b.n	8001ed8 <__aeabi_dmul+0x3fc>
 8001c44:	211d      	movs	r1, #29
 8001c46:	1acb      	subs	r3, r1, r3
 8001c48:	4651      	mov	r1, sl
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	40d9      	lsrs	r1, r3
 8001c4e:	4653      	mov	r3, sl
 8001c50:	3a08      	subs	r2, #8
 8001c52:	4094      	lsls	r4, r2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	430c      	orrs	r4, r1
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <__aeabi_dmul+0x1ec>)
 8001c5a:	1a12      	subs	r2, r2, r0
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	e77a      	b.n	8001b56 <__aeabi_dmul+0x7a>
 8001c60:	2501      	movs	r5, #1
 8001c62:	9b01      	ldr	r3, [sp, #4]
 8001c64:	4c14      	ldr	r4, [pc, #80]	; (8001cb8 <__aeabi_dmul+0x1dc>)
 8001c66:	401d      	ands	r5, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	4699      	mov	r9, r3
 8001c6e:	e79c      	b.n	8001baa <__aeabi_dmul+0xce>
 8001c70:	2400      	movs	r4, #0
 8001c72:	2200      	movs	r2, #0
 8001c74:	2001      	movs	r0, #1
 8001c76:	e76e      	b.n	8001b56 <__aeabi_dmul+0x7a>
 8001c78:	4653      	mov	r3, sl
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	e76b      	b.n	8001b56 <__aeabi_dmul+0x7a>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	469b      	mov	fp, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	2704      	movs	r7, #4
 8001c86:	2600      	movs	r6, #0
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	e74c      	b.n	8001b26 <__aeabi_dmul+0x4a>
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	4681      	mov	r9, r0
 8001c90:	270c      	movs	r7, #12
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	e747      	b.n	8001b26 <__aeabi_dmul+0x4a>
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2500      	movs	r5, #0
 8001c9c:	0312      	lsls	r2, r2, #12
 8001c9e:	4699      	mov	r9, r3
 8001ca0:	4c05      	ldr	r4, [pc, #20]	; (8001cb8 <__aeabi_dmul+0x1dc>)
 8001ca2:	e782      	b.n	8001baa <__aeabi_dmul+0xce>
 8001ca4:	465c      	mov	r4, fp
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	9802      	ldr	r0, [sp, #8]
 8001caa:	e76f      	b.n	8001b8c <__aeabi_dmul+0xb0>
 8001cac:	465c      	mov	r4, fp
 8001cae:	464b      	mov	r3, r9
 8001cb0:	9501      	str	r5, [sp, #4]
 8001cb2:	9802      	ldr	r0, [sp, #8]
 8001cb4:	e76a      	b.n	8001b8c <__aeabi_dmul+0xb0>
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	000007ff 	.word	0x000007ff
 8001cbc:	fffffc01 	.word	0xfffffc01
 8001cc0:	0800c2ec 	.word	0x0800c2ec
 8001cc4:	800fffff 	.word	0x800fffff
 8001cc8:	fffffc0d 	.word	0xfffffc0d
 8001ccc:	464a      	mov	r2, r9
 8001cce:	4649      	mov	r1, r9
 8001cd0:	0c17      	lsrs	r7, r2, #16
 8001cd2:	0c1a      	lsrs	r2, r3, #16
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	0c1b      	lsrs	r3, r3, #16
 8001cd8:	0408      	lsls	r0, r1, #16
 8001cda:	0019      	movs	r1, r3
 8001cdc:	0c00      	lsrs	r0, r0, #16
 8001cde:	4341      	muls	r1, r0
 8001ce0:	0015      	movs	r5, r2
 8001ce2:	4688      	mov	r8, r1
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	437d      	muls	r5, r7
 8001ce8:	4379      	muls	r1, r7
 8001cea:	9503      	str	r5, [sp, #12]
 8001cec:	4689      	mov	r9, r1
 8001cee:	0029      	movs	r1, r5
 8001cf0:	0015      	movs	r5, r2
 8001cf2:	4345      	muls	r5, r0
 8001cf4:	444d      	add	r5, r9
 8001cf6:	9502      	str	r5, [sp, #8]
 8001cf8:	4645      	mov	r5, r8
 8001cfa:	0c2d      	lsrs	r5, r5, #16
 8001cfc:	46aa      	mov	sl, r5
 8001cfe:	9d02      	ldr	r5, [sp, #8]
 8001d00:	4455      	add	r5, sl
 8001d02:	45a9      	cmp	r9, r5
 8001d04:	d906      	bls.n	8001d14 <__aeabi_dmul+0x238>
 8001d06:	468a      	mov	sl, r1
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	0249      	lsls	r1, r1, #9
 8001d0c:	4689      	mov	r9, r1
 8001d0e:	44ca      	add	sl, r9
 8001d10:	4651      	mov	r1, sl
 8001d12:	9103      	str	r1, [sp, #12]
 8001d14:	0c29      	lsrs	r1, r5, #16
 8001d16:	9104      	str	r1, [sp, #16]
 8001d18:	4641      	mov	r1, r8
 8001d1a:	0409      	lsls	r1, r1, #16
 8001d1c:	042d      	lsls	r5, r5, #16
 8001d1e:	0c09      	lsrs	r1, r1, #16
 8001d20:	4688      	mov	r8, r1
 8001d22:	0029      	movs	r1, r5
 8001d24:	0c25      	lsrs	r5, r4, #16
 8001d26:	0424      	lsls	r4, r4, #16
 8001d28:	4441      	add	r1, r8
 8001d2a:	0c24      	lsrs	r4, r4, #16
 8001d2c:	9105      	str	r1, [sp, #20]
 8001d2e:	0021      	movs	r1, r4
 8001d30:	4341      	muls	r1, r0
 8001d32:	4688      	mov	r8, r1
 8001d34:	0021      	movs	r1, r4
 8001d36:	4379      	muls	r1, r7
 8001d38:	468a      	mov	sl, r1
 8001d3a:	4368      	muls	r0, r5
 8001d3c:	4641      	mov	r1, r8
 8001d3e:	4450      	add	r0, sl
 8001d40:	4681      	mov	r9, r0
 8001d42:	0c08      	lsrs	r0, r1, #16
 8001d44:	4448      	add	r0, r9
 8001d46:	436f      	muls	r7, r5
 8001d48:	4582      	cmp	sl, r0
 8001d4a:	d903      	bls.n	8001d54 <__aeabi_dmul+0x278>
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0249      	lsls	r1, r1, #9
 8001d50:	4689      	mov	r9, r1
 8001d52:	444f      	add	r7, r9
 8001d54:	0c01      	lsrs	r1, r0, #16
 8001d56:	4689      	mov	r9, r1
 8001d58:	0039      	movs	r1, r7
 8001d5a:	4449      	add	r1, r9
 8001d5c:	9102      	str	r1, [sp, #8]
 8001d5e:	4641      	mov	r1, r8
 8001d60:	040f      	lsls	r7, r1, #16
 8001d62:	9904      	ldr	r1, [sp, #16]
 8001d64:	0c3f      	lsrs	r7, r7, #16
 8001d66:	4688      	mov	r8, r1
 8001d68:	0400      	lsls	r0, r0, #16
 8001d6a:	19c0      	adds	r0, r0, r7
 8001d6c:	4480      	add	r8, r0
 8001d6e:	4641      	mov	r1, r8
 8001d70:	9104      	str	r1, [sp, #16]
 8001d72:	4659      	mov	r1, fp
 8001d74:	0c0f      	lsrs	r7, r1, #16
 8001d76:	0409      	lsls	r1, r1, #16
 8001d78:	0c09      	lsrs	r1, r1, #16
 8001d7a:	4688      	mov	r8, r1
 8001d7c:	4359      	muls	r1, r3
 8001d7e:	468a      	mov	sl, r1
 8001d80:	0039      	movs	r1, r7
 8001d82:	4351      	muls	r1, r2
 8001d84:	4689      	mov	r9, r1
 8001d86:	4641      	mov	r1, r8
 8001d88:	434a      	muls	r2, r1
 8001d8a:	4651      	mov	r1, sl
 8001d8c:	0c09      	lsrs	r1, r1, #16
 8001d8e:	468b      	mov	fp, r1
 8001d90:	437b      	muls	r3, r7
 8001d92:	18d2      	adds	r2, r2, r3
 8001d94:	445a      	add	r2, fp
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d903      	bls.n	8001da2 <__aeabi_dmul+0x2c6>
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	025b      	lsls	r3, r3, #9
 8001d9e:	469b      	mov	fp, r3
 8001da0:	44d9      	add	r9, fp
 8001da2:	4651      	mov	r1, sl
 8001da4:	0409      	lsls	r1, r1, #16
 8001da6:	0c09      	lsrs	r1, r1, #16
 8001da8:	468a      	mov	sl, r1
 8001daa:	4641      	mov	r1, r8
 8001dac:	4361      	muls	r1, r4
 8001dae:	437c      	muls	r4, r7
 8001db0:	0c13      	lsrs	r3, r2, #16
 8001db2:	0412      	lsls	r2, r2, #16
 8001db4:	444b      	add	r3, r9
 8001db6:	4452      	add	r2, sl
 8001db8:	46a1      	mov	r9, r4
 8001dba:	468a      	mov	sl, r1
 8001dbc:	003c      	movs	r4, r7
 8001dbe:	4641      	mov	r1, r8
 8001dc0:	436c      	muls	r4, r5
 8001dc2:	434d      	muls	r5, r1
 8001dc4:	4651      	mov	r1, sl
 8001dc6:	444d      	add	r5, r9
 8001dc8:	0c0f      	lsrs	r7, r1, #16
 8001dca:	197d      	adds	r5, r7, r5
 8001dcc:	45a9      	cmp	r9, r5
 8001dce:	d903      	bls.n	8001dd8 <__aeabi_dmul+0x2fc>
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0249      	lsls	r1, r1, #9
 8001dd4:	4688      	mov	r8, r1
 8001dd6:	4444      	add	r4, r8
 8001dd8:	9f04      	ldr	r7, [sp, #16]
 8001dda:	9903      	ldr	r1, [sp, #12]
 8001ddc:	46b8      	mov	r8, r7
 8001dde:	4441      	add	r1, r8
 8001de0:	468b      	mov	fp, r1
 8001de2:	4583      	cmp	fp, r0
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	4241      	negs	r1, r0
 8001de8:	4688      	mov	r8, r1
 8001dea:	4651      	mov	r1, sl
 8001dec:	0408      	lsls	r0, r1, #16
 8001dee:	042f      	lsls	r7, r5, #16
 8001df0:	0c00      	lsrs	r0, r0, #16
 8001df2:	183f      	adds	r7, r7, r0
 8001df4:	4658      	mov	r0, fp
 8001df6:	9902      	ldr	r1, [sp, #8]
 8001df8:	1810      	adds	r0, r2, r0
 8001dfa:	4689      	mov	r9, r1
 8001dfc:	4290      	cmp	r0, r2
 8001dfe:	4192      	sbcs	r2, r2
 8001e00:	444f      	add	r7, r9
 8001e02:	46ba      	mov	sl, r7
 8001e04:	4252      	negs	r2, r2
 8001e06:	4699      	mov	r9, r3
 8001e08:	4693      	mov	fp, r2
 8001e0a:	44c2      	add	sl, r8
 8001e0c:	44d1      	add	r9, sl
 8001e0e:	44cb      	add	fp, r9
 8001e10:	428f      	cmp	r7, r1
 8001e12:	41bf      	sbcs	r7, r7
 8001e14:	45c2      	cmp	sl, r8
 8001e16:	4189      	sbcs	r1, r1
 8001e18:	4599      	cmp	r9, r3
 8001e1a:	419b      	sbcs	r3, r3
 8001e1c:	4593      	cmp	fp, r2
 8001e1e:	4192      	sbcs	r2, r2
 8001e20:	427f      	negs	r7, r7
 8001e22:	4249      	negs	r1, r1
 8001e24:	0c2d      	lsrs	r5, r5, #16
 8001e26:	4252      	negs	r2, r2
 8001e28:	430f      	orrs	r7, r1
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	197f      	adds	r7, r7, r5
 8001e30:	18ff      	adds	r7, r7, r3
 8001e32:	465b      	mov	r3, fp
 8001e34:	193c      	adds	r4, r7, r4
 8001e36:	0ddb      	lsrs	r3, r3, #23
 8001e38:	9a05      	ldr	r2, [sp, #20]
 8001e3a:	0264      	lsls	r4, r4, #9
 8001e3c:	431c      	orrs	r4, r3
 8001e3e:	0243      	lsls	r3, r0, #9
 8001e40:	4313      	orrs	r3, r2
 8001e42:	1e5d      	subs	r5, r3, #1
 8001e44:	41ab      	sbcs	r3, r5
 8001e46:	465a      	mov	r2, fp
 8001e48:	0dc0      	lsrs	r0, r0, #23
 8001e4a:	4303      	orrs	r3, r0
 8001e4c:	0252      	lsls	r2, r2, #9
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	01e2      	lsls	r2, r4, #7
 8001e52:	d556      	bpl.n	8001f02 <__aeabi_dmul+0x426>
 8001e54:	2001      	movs	r0, #1
 8001e56:	085a      	lsrs	r2, r3, #1
 8001e58:	4003      	ands	r3, r0
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	07e2      	lsls	r2, r4, #31
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	0864      	lsrs	r4, r4, #1
 8001e62:	485a      	ldr	r0, [pc, #360]	; (8001fcc <__aeabi_dmul+0x4f0>)
 8001e64:	4460      	add	r0, ip
 8001e66:	2800      	cmp	r0, #0
 8001e68:	dd4d      	ble.n	8001f06 <__aeabi_dmul+0x42a>
 8001e6a:	075a      	lsls	r2, r3, #29
 8001e6c:	d009      	beq.n	8001e82 <__aeabi_dmul+0x3a6>
 8001e6e:	220f      	movs	r2, #15
 8001e70:	401a      	ands	r2, r3
 8001e72:	2a04      	cmp	r2, #4
 8001e74:	d005      	beq.n	8001e82 <__aeabi_dmul+0x3a6>
 8001e76:	1d1a      	adds	r2, r3, #4
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	18e4      	adds	r4, r4, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	01e2      	lsls	r2, r4, #7
 8001e84:	d504      	bpl.n	8001e90 <__aeabi_dmul+0x3b4>
 8001e86:	2080      	movs	r0, #128	; 0x80
 8001e88:	4a51      	ldr	r2, [pc, #324]	; (8001fd0 <__aeabi_dmul+0x4f4>)
 8001e8a:	00c0      	lsls	r0, r0, #3
 8001e8c:	4014      	ands	r4, r2
 8001e8e:	4460      	add	r0, ip
 8001e90:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <__aeabi_dmul+0x4f8>)
 8001e92:	4290      	cmp	r0, r2
 8001e94:	dd00      	ble.n	8001e98 <__aeabi_dmul+0x3bc>
 8001e96:	e6e3      	b.n	8001c60 <__aeabi_dmul+0x184>
 8001e98:	2501      	movs	r5, #1
 8001e9a:	08db      	lsrs	r3, r3, #3
 8001e9c:	0762      	lsls	r2, r4, #29
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	0264      	lsls	r4, r4, #9
 8001ea2:	9b01      	ldr	r3, [sp, #4]
 8001ea4:	4691      	mov	r9, r2
 8001ea6:	0b22      	lsrs	r2, r4, #12
 8001ea8:	0544      	lsls	r4, r0, #21
 8001eaa:	0d64      	lsrs	r4, r4, #21
 8001eac:	401d      	ands	r5, r3
 8001eae:	e67c      	b.n	8001baa <__aeabi_dmul+0xce>
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	4659      	mov	r1, fp
 8001eb4:	0312      	lsls	r2, r2, #12
 8001eb6:	4211      	tst	r1, r2
 8001eb8:	d008      	beq.n	8001ecc <__aeabi_dmul+0x3f0>
 8001eba:	4214      	tst	r4, r2
 8001ebc:	d106      	bne.n	8001ecc <__aeabi_dmul+0x3f0>
 8001ebe:	4322      	orrs	r2, r4
 8001ec0:	0312      	lsls	r2, r2, #12
 8001ec2:	0b12      	lsrs	r2, r2, #12
 8001ec4:	4645      	mov	r5, r8
 8001ec6:	4699      	mov	r9, r3
 8001ec8:	4c43      	ldr	r4, [pc, #268]	; (8001fd8 <__aeabi_dmul+0x4fc>)
 8001eca:	e66e      	b.n	8001baa <__aeabi_dmul+0xce>
 8001ecc:	465b      	mov	r3, fp
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	0312      	lsls	r2, r2, #12
 8001ed2:	0b12      	lsrs	r2, r2, #12
 8001ed4:	4c40      	ldr	r4, [pc, #256]	; (8001fd8 <__aeabi_dmul+0x4fc>)
 8001ed6:	e668      	b.n	8001baa <__aeabi_dmul+0xce>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	4654      	mov	r4, sl
 8001edc:	3b28      	subs	r3, #40	; 0x28
 8001ede:	409c      	lsls	r4, r3
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e6b9      	b.n	8001c58 <__aeabi_dmul+0x17c>
 8001ee4:	f000 fc78 	bl	80027d8 <__clzsi2>
 8001ee8:	3020      	adds	r0, #32
 8001eea:	e6a6      	b.n	8001c3a <__aeabi_dmul+0x15e>
 8001eec:	0003      	movs	r3, r0
 8001eee:	3b28      	subs	r3, #40	; 0x28
 8001ef0:	409f      	lsls	r7, r3
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	46bb      	mov	fp, r7
 8001ef6:	4699      	mov	r9, r3
 8001ef8:	e68a      	b.n	8001c10 <__aeabi_dmul+0x134>
 8001efa:	f000 fc6d 	bl	80027d8 <__clzsi2>
 8001efe:	3020      	adds	r0, #32
 8001f00:	e674      	b.n	8001bec <__aeabi_dmul+0x110>
 8001f02:	46b4      	mov	ip, r6
 8001f04:	e7ad      	b.n	8001e62 <__aeabi_dmul+0x386>
 8001f06:	2501      	movs	r5, #1
 8001f08:	1a2a      	subs	r2, r5, r0
 8001f0a:	2a38      	cmp	r2, #56	; 0x38
 8001f0c:	dd06      	ble.n	8001f1c <__aeabi_dmul+0x440>
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	2400      	movs	r4, #0
 8001f12:	401d      	ands	r5, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	2200      	movs	r2, #0
 8001f18:	4699      	mov	r9, r3
 8001f1a:	e646      	b.n	8001baa <__aeabi_dmul+0xce>
 8001f1c:	2a1f      	cmp	r2, #31
 8001f1e:	dc21      	bgt.n	8001f64 <__aeabi_dmul+0x488>
 8001f20:	2520      	movs	r5, #32
 8001f22:	0020      	movs	r0, r4
 8001f24:	1aad      	subs	r5, r5, r2
 8001f26:	001e      	movs	r6, r3
 8001f28:	40ab      	lsls	r3, r5
 8001f2a:	40a8      	lsls	r0, r5
 8001f2c:	40d6      	lsrs	r6, r2
 8001f2e:	1e5d      	subs	r5, r3, #1
 8001f30:	41ab      	sbcs	r3, r5
 8001f32:	4330      	orrs	r0, r6
 8001f34:	4318      	orrs	r0, r3
 8001f36:	40d4      	lsrs	r4, r2
 8001f38:	0743      	lsls	r3, r0, #29
 8001f3a:	d009      	beq.n	8001f50 <__aeabi_dmul+0x474>
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	4003      	ands	r3, r0
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d005      	beq.n	8001f50 <__aeabi_dmul+0x474>
 8001f44:	0003      	movs	r3, r0
 8001f46:	1d18      	adds	r0, r3, #4
 8001f48:	4298      	cmp	r0, r3
 8001f4a:	419b      	sbcs	r3, r3
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	18e4      	adds	r4, r4, r3
 8001f50:	0223      	lsls	r3, r4, #8
 8001f52:	d521      	bpl.n	8001f98 <__aeabi_dmul+0x4bc>
 8001f54:	2501      	movs	r5, #1
 8001f56:	9b01      	ldr	r3, [sp, #4]
 8001f58:	2401      	movs	r4, #1
 8001f5a:	401d      	ands	r5, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4699      	mov	r9, r3
 8001f62:	e622      	b.n	8001baa <__aeabi_dmul+0xce>
 8001f64:	251f      	movs	r5, #31
 8001f66:	0021      	movs	r1, r4
 8001f68:	426d      	negs	r5, r5
 8001f6a:	1a28      	subs	r0, r5, r0
 8001f6c:	40c1      	lsrs	r1, r0
 8001f6e:	0008      	movs	r0, r1
 8001f70:	2a20      	cmp	r2, #32
 8001f72:	d01d      	beq.n	8001fb0 <__aeabi_dmul+0x4d4>
 8001f74:	355f      	adds	r5, #95	; 0x5f
 8001f76:	1aaa      	subs	r2, r5, r2
 8001f78:	4094      	lsls	r4, r2
 8001f7a:	4323      	orrs	r3, r4
 8001f7c:	1e5c      	subs	r4, r3, #1
 8001f7e:	41a3      	sbcs	r3, r4
 8001f80:	2507      	movs	r5, #7
 8001f82:	4303      	orrs	r3, r0
 8001f84:	401d      	ands	r5, r3
 8001f86:	2200      	movs	r2, #0
 8001f88:	2d00      	cmp	r5, #0
 8001f8a:	d009      	beq.n	8001fa0 <__aeabi_dmul+0x4c4>
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	2400      	movs	r4, #0
 8001f90:	401a      	ands	r2, r3
 8001f92:	0018      	movs	r0, r3
 8001f94:	2a04      	cmp	r2, #4
 8001f96:	d1d6      	bne.n	8001f46 <__aeabi_dmul+0x46a>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	0765      	lsls	r5, r4, #29
 8001f9c:	0264      	lsls	r4, r4, #9
 8001f9e:	0b22      	lsrs	r2, r4, #12
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	432b      	orrs	r3, r5
 8001fa4:	2501      	movs	r5, #1
 8001fa6:	4699      	mov	r9, r3
 8001fa8:	9b01      	ldr	r3, [sp, #4]
 8001faa:	2400      	movs	r4, #0
 8001fac:	401d      	ands	r5, r3
 8001fae:	e5fc      	b.n	8001baa <__aeabi_dmul+0xce>
 8001fb0:	2400      	movs	r4, #0
 8001fb2:	e7e2      	b.n	8001f7a <__aeabi_dmul+0x49e>
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	2501      	movs	r5, #1
 8001fb8:	0312      	lsls	r2, r2, #12
 8001fba:	4322      	orrs	r2, r4
 8001fbc:	9901      	ldr	r1, [sp, #4]
 8001fbe:	0312      	lsls	r2, r2, #12
 8001fc0:	0b12      	lsrs	r2, r2, #12
 8001fc2:	400d      	ands	r5, r1
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	4c04      	ldr	r4, [pc, #16]	; (8001fd8 <__aeabi_dmul+0x4fc>)
 8001fc8:	e5ef      	b.n	8001baa <__aeabi_dmul+0xce>
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	000003ff 	.word	0x000003ff
 8001fd0:	feffffff 	.word	0xfeffffff
 8001fd4:	000007fe 	.word	0x000007fe
 8001fd8:	000007ff 	.word	0x000007ff

08001fdc <__aeabi_dsub>:
 8001fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fde:	4646      	mov	r6, r8
 8001fe0:	46d6      	mov	lr, sl
 8001fe2:	464f      	mov	r7, r9
 8001fe4:	030c      	lsls	r4, r1, #12
 8001fe6:	b5c0      	push	{r6, r7, lr}
 8001fe8:	0fcd      	lsrs	r5, r1, #31
 8001fea:	004e      	lsls	r6, r1, #1
 8001fec:	0a61      	lsrs	r1, r4, #9
 8001fee:	0f44      	lsrs	r4, r0, #29
 8001ff0:	430c      	orrs	r4, r1
 8001ff2:	00c1      	lsls	r1, r0, #3
 8001ff4:	0058      	lsls	r0, r3, #1
 8001ff6:	0d40      	lsrs	r0, r0, #21
 8001ff8:	4684      	mov	ip, r0
 8001ffa:	468a      	mov	sl, r1
 8001ffc:	000f      	movs	r7, r1
 8001ffe:	0319      	lsls	r1, r3, #12
 8002000:	0f50      	lsrs	r0, r2, #29
 8002002:	0a49      	lsrs	r1, r1, #9
 8002004:	4301      	orrs	r1, r0
 8002006:	48c6      	ldr	r0, [pc, #792]	; (8002320 <__aeabi_dsub+0x344>)
 8002008:	0d76      	lsrs	r6, r6, #21
 800200a:	46a8      	mov	r8, r5
 800200c:	0fdb      	lsrs	r3, r3, #31
 800200e:	00d2      	lsls	r2, r2, #3
 8002010:	4584      	cmp	ip, r0
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x3a>
 8002014:	e0d8      	b.n	80021c8 <__aeabi_dsub+0x1ec>
 8002016:	2001      	movs	r0, #1
 8002018:	4043      	eors	r3, r0
 800201a:	42ab      	cmp	r3, r5
 800201c:	d100      	bne.n	8002020 <__aeabi_dsub+0x44>
 800201e:	e0a6      	b.n	800216e <__aeabi_dsub+0x192>
 8002020:	4660      	mov	r0, ip
 8002022:	1a35      	subs	r5, r6, r0
 8002024:	2d00      	cmp	r5, #0
 8002026:	dc00      	bgt.n	800202a <__aeabi_dsub+0x4e>
 8002028:	e105      	b.n	8002236 <__aeabi_dsub+0x25a>
 800202a:	2800      	cmp	r0, #0
 800202c:	d110      	bne.n	8002050 <__aeabi_dsub+0x74>
 800202e:	000b      	movs	r3, r1
 8002030:	4313      	orrs	r3, r2
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x5a>
 8002034:	e0d7      	b.n	80021e6 <__aeabi_dsub+0x20a>
 8002036:	1e6b      	subs	r3, r5, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d000      	beq.n	800203e <__aeabi_dsub+0x62>
 800203c:	e14b      	b.n	80022d6 <__aeabi_dsub+0x2fa>
 800203e:	4653      	mov	r3, sl
 8002040:	1a9f      	subs	r7, r3, r2
 8002042:	45ba      	cmp	sl, r7
 8002044:	4180      	sbcs	r0, r0
 8002046:	1a64      	subs	r4, r4, r1
 8002048:	4240      	negs	r0, r0
 800204a:	1a24      	subs	r4, r4, r0
 800204c:	2601      	movs	r6, #1
 800204e:	e01e      	b.n	800208e <__aeabi_dsub+0xb2>
 8002050:	4bb3      	ldr	r3, [pc, #716]	; (8002320 <__aeabi_dsub+0x344>)
 8002052:	429e      	cmp	r6, r3
 8002054:	d048      	beq.n	80020e8 <__aeabi_dsub+0x10c>
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	4319      	orrs	r1, r3
 800205c:	2d38      	cmp	r5, #56	; 0x38
 800205e:	dd00      	ble.n	8002062 <__aeabi_dsub+0x86>
 8002060:	e119      	b.n	8002296 <__aeabi_dsub+0x2ba>
 8002062:	2d1f      	cmp	r5, #31
 8002064:	dd00      	ble.n	8002068 <__aeabi_dsub+0x8c>
 8002066:	e14c      	b.n	8002302 <__aeabi_dsub+0x326>
 8002068:	2320      	movs	r3, #32
 800206a:	000f      	movs	r7, r1
 800206c:	1b5b      	subs	r3, r3, r5
 800206e:	0010      	movs	r0, r2
 8002070:	409a      	lsls	r2, r3
 8002072:	409f      	lsls	r7, r3
 8002074:	40e8      	lsrs	r0, r5
 8002076:	1e53      	subs	r3, r2, #1
 8002078:	419a      	sbcs	r2, r3
 800207a:	40e9      	lsrs	r1, r5
 800207c:	4307      	orrs	r7, r0
 800207e:	4317      	orrs	r7, r2
 8002080:	4653      	mov	r3, sl
 8002082:	1bdf      	subs	r7, r3, r7
 8002084:	1a61      	subs	r1, r4, r1
 8002086:	45ba      	cmp	sl, r7
 8002088:	41a4      	sbcs	r4, r4
 800208a:	4264      	negs	r4, r4
 800208c:	1b0c      	subs	r4, r1, r4
 800208e:	0223      	lsls	r3, r4, #8
 8002090:	d400      	bmi.n	8002094 <__aeabi_dsub+0xb8>
 8002092:	e0c5      	b.n	8002220 <__aeabi_dsub+0x244>
 8002094:	0264      	lsls	r4, r4, #9
 8002096:	0a65      	lsrs	r5, r4, #9
 8002098:	2d00      	cmp	r5, #0
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0xc2>
 800209c:	e0f6      	b.n	800228c <__aeabi_dsub+0x2b0>
 800209e:	0028      	movs	r0, r5
 80020a0:	f000 fb9a 	bl	80027d8 <__clzsi2>
 80020a4:	0003      	movs	r3, r0
 80020a6:	3b08      	subs	r3, #8
 80020a8:	2b1f      	cmp	r3, #31
 80020aa:	dd00      	ble.n	80020ae <__aeabi_dsub+0xd2>
 80020ac:	e0e9      	b.n	8002282 <__aeabi_dsub+0x2a6>
 80020ae:	2220      	movs	r2, #32
 80020b0:	003c      	movs	r4, r7
 80020b2:	1ad2      	subs	r2, r2, r3
 80020b4:	409d      	lsls	r5, r3
 80020b6:	40d4      	lsrs	r4, r2
 80020b8:	409f      	lsls	r7, r3
 80020ba:	4325      	orrs	r5, r4
 80020bc:	429e      	cmp	r6, r3
 80020be:	dd00      	ble.n	80020c2 <__aeabi_dsub+0xe6>
 80020c0:	e0db      	b.n	800227a <__aeabi_dsub+0x29e>
 80020c2:	1b9e      	subs	r6, r3, r6
 80020c4:	1c73      	adds	r3, r6, #1
 80020c6:	2b1f      	cmp	r3, #31
 80020c8:	dd00      	ble.n	80020cc <__aeabi_dsub+0xf0>
 80020ca:	e10a      	b.n	80022e2 <__aeabi_dsub+0x306>
 80020cc:	2220      	movs	r2, #32
 80020ce:	0038      	movs	r0, r7
 80020d0:	1ad2      	subs	r2, r2, r3
 80020d2:	0029      	movs	r1, r5
 80020d4:	4097      	lsls	r7, r2
 80020d6:	002c      	movs	r4, r5
 80020d8:	4091      	lsls	r1, r2
 80020da:	40d8      	lsrs	r0, r3
 80020dc:	1e7a      	subs	r2, r7, #1
 80020de:	4197      	sbcs	r7, r2
 80020e0:	40dc      	lsrs	r4, r3
 80020e2:	2600      	movs	r6, #0
 80020e4:	4301      	orrs	r1, r0
 80020e6:	430f      	orrs	r7, r1
 80020e8:	077b      	lsls	r3, r7, #29
 80020ea:	d009      	beq.n	8002100 <__aeabi_dsub+0x124>
 80020ec:	230f      	movs	r3, #15
 80020ee:	403b      	ands	r3, r7
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d005      	beq.n	8002100 <__aeabi_dsub+0x124>
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	42bb      	cmp	r3, r7
 80020f8:	41bf      	sbcs	r7, r7
 80020fa:	427f      	negs	r7, r7
 80020fc:	19e4      	adds	r4, r4, r7
 80020fe:	001f      	movs	r7, r3
 8002100:	0223      	lsls	r3, r4, #8
 8002102:	d525      	bpl.n	8002150 <__aeabi_dsub+0x174>
 8002104:	4b86      	ldr	r3, [pc, #536]	; (8002320 <__aeabi_dsub+0x344>)
 8002106:	3601      	adds	r6, #1
 8002108:	429e      	cmp	r6, r3
 800210a:	d100      	bne.n	800210e <__aeabi_dsub+0x132>
 800210c:	e0af      	b.n	800226e <__aeabi_dsub+0x292>
 800210e:	4b85      	ldr	r3, [pc, #532]	; (8002324 <__aeabi_dsub+0x348>)
 8002110:	2501      	movs	r5, #1
 8002112:	401c      	ands	r4, r3
 8002114:	4643      	mov	r3, r8
 8002116:	0762      	lsls	r2, r4, #29
 8002118:	08ff      	lsrs	r7, r7, #3
 800211a:	0264      	lsls	r4, r4, #9
 800211c:	0576      	lsls	r6, r6, #21
 800211e:	4317      	orrs	r7, r2
 8002120:	0b24      	lsrs	r4, r4, #12
 8002122:	0d76      	lsrs	r6, r6, #21
 8002124:	401d      	ands	r5, r3
 8002126:	2100      	movs	r1, #0
 8002128:	0324      	lsls	r4, r4, #12
 800212a:	0b23      	lsrs	r3, r4, #12
 800212c:	0d0c      	lsrs	r4, r1, #20
 800212e:	4a7e      	ldr	r2, [pc, #504]	; (8002328 <__aeabi_dsub+0x34c>)
 8002130:	0524      	lsls	r4, r4, #20
 8002132:	431c      	orrs	r4, r3
 8002134:	4014      	ands	r4, r2
 8002136:	0533      	lsls	r3, r6, #20
 8002138:	4323      	orrs	r3, r4
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	07ed      	lsls	r5, r5, #31
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	432b      	orrs	r3, r5
 8002142:	0038      	movs	r0, r7
 8002144:	0019      	movs	r1, r3
 8002146:	bc1c      	pop	{r2, r3, r4}
 8002148:	4690      	mov	r8, r2
 800214a:	4699      	mov	r9, r3
 800214c:	46a2      	mov	sl, r4
 800214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002150:	2501      	movs	r5, #1
 8002152:	4643      	mov	r3, r8
 8002154:	0762      	lsls	r2, r4, #29
 8002156:	08ff      	lsrs	r7, r7, #3
 8002158:	4317      	orrs	r7, r2
 800215a:	08e4      	lsrs	r4, r4, #3
 800215c:	401d      	ands	r5, r3
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <__aeabi_dsub+0x344>)
 8002160:	429e      	cmp	r6, r3
 8002162:	d036      	beq.n	80021d2 <__aeabi_dsub+0x1f6>
 8002164:	0324      	lsls	r4, r4, #12
 8002166:	0576      	lsls	r6, r6, #21
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d76      	lsrs	r6, r6, #21
 800216c:	e7db      	b.n	8002126 <__aeabi_dsub+0x14a>
 800216e:	4663      	mov	r3, ip
 8002170:	1af3      	subs	r3, r6, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	dc00      	bgt.n	8002178 <__aeabi_dsub+0x19c>
 8002176:	e094      	b.n	80022a2 <__aeabi_dsub+0x2c6>
 8002178:	4660      	mov	r0, ip
 800217a:	2800      	cmp	r0, #0
 800217c:	d035      	beq.n	80021ea <__aeabi_dsub+0x20e>
 800217e:	4868      	ldr	r0, [pc, #416]	; (8002320 <__aeabi_dsub+0x344>)
 8002180:	4286      	cmp	r6, r0
 8002182:	d0b1      	beq.n	80020e8 <__aeabi_dsub+0x10c>
 8002184:	2780      	movs	r7, #128	; 0x80
 8002186:	043f      	lsls	r7, r7, #16
 8002188:	4339      	orrs	r1, r7
 800218a:	2b38      	cmp	r3, #56	; 0x38
 800218c:	dc00      	bgt.n	8002190 <__aeabi_dsub+0x1b4>
 800218e:	e0fd      	b.n	800238c <__aeabi_dsub+0x3b0>
 8002190:	430a      	orrs	r2, r1
 8002192:	0017      	movs	r7, r2
 8002194:	2100      	movs	r1, #0
 8002196:	1e7a      	subs	r2, r7, #1
 8002198:	4197      	sbcs	r7, r2
 800219a:	4457      	add	r7, sl
 800219c:	4557      	cmp	r7, sl
 800219e:	4180      	sbcs	r0, r0
 80021a0:	1909      	adds	r1, r1, r4
 80021a2:	4244      	negs	r4, r0
 80021a4:	190c      	adds	r4, r1, r4
 80021a6:	0223      	lsls	r3, r4, #8
 80021a8:	d53a      	bpl.n	8002220 <__aeabi_dsub+0x244>
 80021aa:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <__aeabi_dsub+0x344>)
 80021ac:	3601      	adds	r6, #1
 80021ae:	429e      	cmp	r6, r3
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x1d8>
 80021b2:	e14b      	b.n	800244c <__aeabi_dsub+0x470>
 80021b4:	2201      	movs	r2, #1
 80021b6:	4b5b      	ldr	r3, [pc, #364]	; (8002324 <__aeabi_dsub+0x348>)
 80021b8:	401c      	ands	r4, r3
 80021ba:	087b      	lsrs	r3, r7, #1
 80021bc:	4017      	ands	r7, r2
 80021be:	431f      	orrs	r7, r3
 80021c0:	07e2      	lsls	r2, r4, #31
 80021c2:	4317      	orrs	r7, r2
 80021c4:	0864      	lsrs	r4, r4, #1
 80021c6:	e78f      	b.n	80020e8 <__aeabi_dsub+0x10c>
 80021c8:	0008      	movs	r0, r1
 80021ca:	4310      	orrs	r0, r2
 80021cc:	d000      	beq.n	80021d0 <__aeabi_dsub+0x1f4>
 80021ce:	e724      	b.n	800201a <__aeabi_dsub+0x3e>
 80021d0:	e721      	b.n	8002016 <__aeabi_dsub+0x3a>
 80021d2:	0023      	movs	r3, r4
 80021d4:	433b      	orrs	r3, r7
 80021d6:	d100      	bne.n	80021da <__aeabi_dsub+0x1fe>
 80021d8:	e1b9      	b.n	800254e <__aeabi_dsub+0x572>
 80021da:	2280      	movs	r2, #128	; 0x80
 80021dc:	0312      	lsls	r2, r2, #12
 80021de:	4314      	orrs	r4, r2
 80021e0:	0324      	lsls	r4, r4, #12
 80021e2:	0b24      	lsrs	r4, r4, #12
 80021e4:	e79f      	b.n	8002126 <__aeabi_dsub+0x14a>
 80021e6:	002e      	movs	r6, r5
 80021e8:	e77e      	b.n	80020e8 <__aeabi_dsub+0x10c>
 80021ea:	0008      	movs	r0, r1
 80021ec:	4310      	orrs	r0, r2
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dsub+0x216>
 80021f0:	e0ca      	b.n	8002388 <__aeabi_dsub+0x3ac>
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	4684      	mov	ip, r0
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d000      	beq.n	80021fc <__aeabi_dsub+0x220>
 80021fa:	e0e7      	b.n	80023cc <__aeabi_dsub+0x3f0>
 80021fc:	4452      	add	r2, sl
 80021fe:	4552      	cmp	r2, sl
 8002200:	4180      	sbcs	r0, r0
 8002202:	1864      	adds	r4, r4, r1
 8002204:	4240      	negs	r0, r0
 8002206:	1824      	adds	r4, r4, r0
 8002208:	0017      	movs	r7, r2
 800220a:	2601      	movs	r6, #1
 800220c:	0223      	lsls	r3, r4, #8
 800220e:	d507      	bpl.n	8002220 <__aeabi_dsub+0x244>
 8002210:	2602      	movs	r6, #2
 8002212:	e7cf      	b.n	80021b4 <__aeabi_dsub+0x1d8>
 8002214:	4664      	mov	r4, ip
 8002216:	432c      	orrs	r4, r5
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x240>
 800221a:	e1b3      	b.n	8002584 <__aeabi_dsub+0x5a8>
 800221c:	002c      	movs	r4, r5
 800221e:	4667      	mov	r7, ip
 8002220:	077b      	lsls	r3, r7, #29
 8002222:	d000      	beq.n	8002226 <__aeabi_dsub+0x24a>
 8002224:	e762      	b.n	80020ec <__aeabi_dsub+0x110>
 8002226:	0763      	lsls	r3, r4, #29
 8002228:	08ff      	lsrs	r7, r7, #3
 800222a:	431f      	orrs	r7, r3
 800222c:	2501      	movs	r5, #1
 800222e:	4643      	mov	r3, r8
 8002230:	08e4      	lsrs	r4, r4, #3
 8002232:	401d      	ands	r5, r3
 8002234:	e793      	b.n	800215e <__aeabi_dsub+0x182>
 8002236:	2d00      	cmp	r5, #0
 8002238:	d178      	bne.n	800232c <__aeabi_dsub+0x350>
 800223a:	1c75      	adds	r5, r6, #1
 800223c:	056d      	lsls	r5, r5, #21
 800223e:	0d6d      	lsrs	r5, r5, #21
 8002240:	2d01      	cmp	r5, #1
 8002242:	dc00      	bgt.n	8002246 <__aeabi_dsub+0x26a>
 8002244:	e0f2      	b.n	800242c <__aeabi_dsub+0x450>
 8002246:	4650      	mov	r0, sl
 8002248:	1a80      	subs	r0, r0, r2
 800224a:	4582      	cmp	sl, r0
 800224c:	41bf      	sbcs	r7, r7
 800224e:	1a65      	subs	r5, r4, r1
 8002250:	427f      	negs	r7, r7
 8002252:	1bed      	subs	r5, r5, r7
 8002254:	4684      	mov	ip, r0
 8002256:	0228      	lsls	r0, r5, #8
 8002258:	d400      	bmi.n	800225c <__aeabi_dsub+0x280>
 800225a:	e08c      	b.n	8002376 <__aeabi_dsub+0x39a>
 800225c:	4650      	mov	r0, sl
 800225e:	1a17      	subs	r7, r2, r0
 8002260:	42ba      	cmp	r2, r7
 8002262:	4192      	sbcs	r2, r2
 8002264:	1b0c      	subs	r4, r1, r4
 8002266:	4255      	negs	r5, r2
 8002268:	1b65      	subs	r5, r4, r5
 800226a:	4698      	mov	r8, r3
 800226c:	e714      	b.n	8002098 <__aeabi_dsub+0xbc>
 800226e:	2501      	movs	r5, #1
 8002270:	4643      	mov	r3, r8
 8002272:	2400      	movs	r4, #0
 8002274:	401d      	ands	r5, r3
 8002276:	2700      	movs	r7, #0
 8002278:	e755      	b.n	8002126 <__aeabi_dsub+0x14a>
 800227a:	4c2a      	ldr	r4, [pc, #168]	; (8002324 <__aeabi_dsub+0x348>)
 800227c:	1af6      	subs	r6, r6, r3
 800227e:	402c      	ands	r4, r5
 8002280:	e732      	b.n	80020e8 <__aeabi_dsub+0x10c>
 8002282:	003d      	movs	r5, r7
 8002284:	3828      	subs	r0, #40	; 0x28
 8002286:	4085      	lsls	r5, r0
 8002288:	2700      	movs	r7, #0
 800228a:	e717      	b.n	80020bc <__aeabi_dsub+0xe0>
 800228c:	0038      	movs	r0, r7
 800228e:	f000 faa3 	bl	80027d8 <__clzsi2>
 8002292:	3020      	adds	r0, #32
 8002294:	e706      	b.n	80020a4 <__aeabi_dsub+0xc8>
 8002296:	430a      	orrs	r2, r1
 8002298:	0017      	movs	r7, r2
 800229a:	2100      	movs	r1, #0
 800229c:	1e7a      	subs	r2, r7, #1
 800229e:	4197      	sbcs	r7, r2
 80022a0:	e6ee      	b.n	8002080 <__aeabi_dsub+0xa4>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d000      	beq.n	80022a8 <__aeabi_dsub+0x2cc>
 80022a6:	e0e5      	b.n	8002474 <__aeabi_dsub+0x498>
 80022a8:	1c73      	adds	r3, r6, #1
 80022aa:	469c      	mov	ip, r3
 80022ac:	055b      	lsls	r3, r3, #21
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	dc00      	bgt.n	80022b6 <__aeabi_dsub+0x2da>
 80022b4:	e09f      	b.n	80023f6 <__aeabi_dsub+0x41a>
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <__aeabi_dsub+0x344>)
 80022b8:	459c      	cmp	ip, r3
 80022ba:	d100      	bne.n	80022be <__aeabi_dsub+0x2e2>
 80022bc:	e0c5      	b.n	800244a <__aeabi_dsub+0x46e>
 80022be:	4452      	add	r2, sl
 80022c0:	4552      	cmp	r2, sl
 80022c2:	4180      	sbcs	r0, r0
 80022c4:	1864      	adds	r4, r4, r1
 80022c6:	4240      	negs	r0, r0
 80022c8:	1824      	adds	r4, r4, r0
 80022ca:	07e7      	lsls	r7, r4, #31
 80022cc:	0852      	lsrs	r2, r2, #1
 80022ce:	4317      	orrs	r7, r2
 80022d0:	0864      	lsrs	r4, r4, #1
 80022d2:	4666      	mov	r6, ip
 80022d4:	e708      	b.n	80020e8 <__aeabi_dsub+0x10c>
 80022d6:	4812      	ldr	r0, [pc, #72]	; (8002320 <__aeabi_dsub+0x344>)
 80022d8:	4285      	cmp	r5, r0
 80022da:	d100      	bne.n	80022de <__aeabi_dsub+0x302>
 80022dc:	e085      	b.n	80023ea <__aeabi_dsub+0x40e>
 80022de:	001d      	movs	r5, r3
 80022e0:	e6bc      	b.n	800205c <__aeabi_dsub+0x80>
 80022e2:	0029      	movs	r1, r5
 80022e4:	3e1f      	subs	r6, #31
 80022e6:	40f1      	lsrs	r1, r6
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x312>
 80022ec:	e07f      	b.n	80023ee <__aeabi_dsub+0x412>
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	409d      	lsls	r5, r3
 80022f4:	432f      	orrs	r7, r5
 80022f6:	1e7d      	subs	r5, r7, #1
 80022f8:	41af      	sbcs	r7, r5
 80022fa:	2400      	movs	r4, #0
 80022fc:	430f      	orrs	r7, r1
 80022fe:	2600      	movs	r6, #0
 8002300:	e78e      	b.n	8002220 <__aeabi_dsub+0x244>
 8002302:	002b      	movs	r3, r5
 8002304:	000f      	movs	r7, r1
 8002306:	3b20      	subs	r3, #32
 8002308:	40df      	lsrs	r7, r3
 800230a:	2d20      	cmp	r5, #32
 800230c:	d071      	beq.n	80023f2 <__aeabi_dsub+0x416>
 800230e:	2340      	movs	r3, #64	; 0x40
 8002310:	1b5d      	subs	r5, r3, r5
 8002312:	40a9      	lsls	r1, r5
 8002314:	430a      	orrs	r2, r1
 8002316:	1e51      	subs	r1, r2, #1
 8002318:	418a      	sbcs	r2, r1
 800231a:	2100      	movs	r1, #0
 800231c:	4317      	orrs	r7, r2
 800231e:	e6af      	b.n	8002080 <__aeabi_dsub+0xa4>
 8002320:	000007ff 	.word	0x000007ff
 8002324:	ff7fffff 	.word	0xff7fffff
 8002328:	800fffff 	.word	0x800fffff
 800232c:	2e00      	cmp	r6, #0
 800232e:	d03e      	beq.n	80023ae <__aeabi_dsub+0x3d2>
 8002330:	4eb3      	ldr	r6, [pc, #716]	; (8002600 <__aeabi_dsub+0x624>)
 8002332:	45b4      	cmp	ip, r6
 8002334:	d045      	beq.n	80023c2 <__aeabi_dsub+0x3e6>
 8002336:	2680      	movs	r6, #128	; 0x80
 8002338:	0436      	lsls	r6, r6, #16
 800233a:	426d      	negs	r5, r5
 800233c:	4334      	orrs	r4, r6
 800233e:	2d38      	cmp	r5, #56	; 0x38
 8002340:	dd00      	ble.n	8002344 <__aeabi_dsub+0x368>
 8002342:	e0a8      	b.n	8002496 <__aeabi_dsub+0x4ba>
 8002344:	2d1f      	cmp	r5, #31
 8002346:	dd00      	ble.n	800234a <__aeabi_dsub+0x36e>
 8002348:	e11f      	b.n	800258a <__aeabi_dsub+0x5ae>
 800234a:	2620      	movs	r6, #32
 800234c:	0027      	movs	r7, r4
 800234e:	4650      	mov	r0, sl
 8002350:	1b76      	subs	r6, r6, r5
 8002352:	40b7      	lsls	r7, r6
 8002354:	40e8      	lsrs	r0, r5
 8002356:	4307      	orrs	r7, r0
 8002358:	4650      	mov	r0, sl
 800235a:	40b0      	lsls	r0, r6
 800235c:	1e46      	subs	r6, r0, #1
 800235e:	41b0      	sbcs	r0, r6
 8002360:	40ec      	lsrs	r4, r5
 8002362:	4338      	orrs	r0, r7
 8002364:	1a17      	subs	r7, r2, r0
 8002366:	42ba      	cmp	r2, r7
 8002368:	4192      	sbcs	r2, r2
 800236a:	1b0c      	subs	r4, r1, r4
 800236c:	4252      	negs	r2, r2
 800236e:	1aa4      	subs	r4, r4, r2
 8002370:	4666      	mov	r6, ip
 8002372:	4698      	mov	r8, r3
 8002374:	e68b      	b.n	800208e <__aeabi_dsub+0xb2>
 8002376:	4664      	mov	r4, ip
 8002378:	4667      	mov	r7, ip
 800237a:	432c      	orrs	r4, r5
 800237c:	d000      	beq.n	8002380 <__aeabi_dsub+0x3a4>
 800237e:	e68b      	b.n	8002098 <__aeabi_dsub+0xbc>
 8002380:	2500      	movs	r5, #0
 8002382:	2600      	movs	r6, #0
 8002384:	2700      	movs	r7, #0
 8002386:	e6ea      	b.n	800215e <__aeabi_dsub+0x182>
 8002388:	001e      	movs	r6, r3
 800238a:	e6ad      	b.n	80020e8 <__aeabi_dsub+0x10c>
 800238c:	2b1f      	cmp	r3, #31
 800238e:	dc60      	bgt.n	8002452 <__aeabi_dsub+0x476>
 8002390:	2720      	movs	r7, #32
 8002392:	1af8      	subs	r0, r7, r3
 8002394:	000f      	movs	r7, r1
 8002396:	4684      	mov	ip, r0
 8002398:	4087      	lsls	r7, r0
 800239a:	0010      	movs	r0, r2
 800239c:	40d8      	lsrs	r0, r3
 800239e:	4307      	orrs	r7, r0
 80023a0:	4660      	mov	r0, ip
 80023a2:	4082      	lsls	r2, r0
 80023a4:	1e50      	subs	r0, r2, #1
 80023a6:	4182      	sbcs	r2, r0
 80023a8:	40d9      	lsrs	r1, r3
 80023aa:	4317      	orrs	r7, r2
 80023ac:	e6f5      	b.n	800219a <__aeabi_dsub+0x1be>
 80023ae:	0026      	movs	r6, r4
 80023b0:	4650      	mov	r0, sl
 80023b2:	4306      	orrs	r6, r0
 80023b4:	d005      	beq.n	80023c2 <__aeabi_dsub+0x3e6>
 80023b6:	43ed      	mvns	r5, r5
 80023b8:	2d00      	cmp	r5, #0
 80023ba:	d0d3      	beq.n	8002364 <__aeabi_dsub+0x388>
 80023bc:	4e90      	ldr	r6, [pc, #576]	; (8002600 <__aeabi_dsub+0x624>)
 80023be:	45b4      	cmp	ip, r6
 80023c0:	d1bd      	bne.n	800233e <__aeabi_dsub+0x362>
 80023c2:	000c      	movs	r4, r1
 80023c4:	0017      	movs	r7, r2
 80023c6:	4666      	mov	r6, ip
 80023c8:	4698      	mov	r8, r3
 80023ca:	e68d      	b.n	80020e8 <__aeabi_dsub+0x10c>
 80023cc:	488c      	ldr	r0, [pc, #560]	; (8002600 <__aeabi_dsub+0x624>)
 80023ce:	4283      	cmp	r3, r0
 80023d0:	d00b      	beq.n	80023ea <__aeabi_dsub+0x40e>
 80023d2:	4663      	mov	r3, ip
 80023d4:	e6d9      	b.n	800218a <__aeabi_dsub+0x1ae>
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	d000      	beq.n	80023dc <__aeabi_dsub+0x400>
 80023da:	e096      	b.n	800250a <__aeabi_dsub+0x52e>
 80023dc:	0008      	movs	r0, r1
 80023de:	4310      	orrs	r0, r2
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x408>
 80023e2:	e0e2      	b.n	80025aa <__aeabi_dsub+0x5ce>
 80023e4:	000c      	movs	r4, r1
 80023e6:	0017      	movs	r7, r2
 80023e8:	4698      	mov	r8, r3
 80023ea:	4e85      	ldr	r6, [pc, #532]	; (8002600 <__aeabi_dsub+0x624>)
 80023ec:	e67c      	b.n	80020e8 <__aeabi_dsub+0x10c>
 80023ee:	2500      	movs	r5, #0
 80023f0:	e780      	b.n	80022f4 <__aeabi_dsub+0x318>
 80023f2:	2100      	movs	r1, #0
 80023f4:	e78e      	b.n	8002314 <__aeabi_dsub+0x338>
 80023f6:	0023      	movs	r3, r4
 80023f8:	4650      	mov	r0, sl
 80023fa:	4303      	orrs	r3, r0
 80023fc:	2e00      	cmp	r6, #0
 80023fe:	d000      	beq.n	8002402 <__aeabi_dsub+0x426>
 8002400:	e0a8      	b.n	8002554 <__aeabi_dsub+0x578>
 8002402:	2b00      	cmp	r3, #0
 8002404:	d100      	bne.n	8002408 <__aeabi_dsub+0x42c>
 8002406:	e0de      	b.n	80025c6 <__aeabi_dsub+0x5ea>
 8002408:	000b      	movs	r3, r1
 800240a:	4313      	orrs	r3, r2
 800240c:	d100      	bne.n	8002410 <__aeabi_dsub+0x434>
 800240e:	e66b      	b.n	80020e8 <__aeabi_dsub+0x10c>
 8002410:	4452      	add	r2, sl
 8002412:	4552      	cmp	r2, sl
 8002414:	4180      	sbcs	r0, r0
 8002416:	1864      	adds	r4, r4, r1
 8002418:	4240      	negs	r0, r0
 800241a:	1824      	adds	r4, r4, r0
 800241c:	0017      	movs	r7, r2
 800241e:	0223      	lsls	r3, r4, #8
 8002420:	d400      	bmi.n	8002424 <__aeabi_dsub+0x448>
 8002422:	e6fd      	b.n	8002220 <__aeabi_dsub+0x244>
 8002424:	4b77      	ldr	r3, [pc, #476]	; (8002604 <__aeabi_dsub+0x628>)
 8002426:	4666      	mov	r6, ip
 8002428:	401c      	ands	r4, r3
 800242a:	e65d      	b.n	80020e8 <__aeabi_dsub+0x10c>
 800242c:	0025      	movs	r5, r4
 800242e:	4650      	mov	r0, sl
 8002430:	4305      	orrs	r5, r0
 8002432:	2e00      	cmp	r6, #0
 8002434:	d1cf      	bne.n	80023d6 <__aeabi_dsub+0x3fa>
 8002436:	2d00      	cmp	r5, #0
 8002438:	d14f      	bne.n	80024da <__aeabi_dsub+0x4fe>
 800243a:	000c      	movs	r4, r1
 800243c:	4314      	orrs	r4, r2
 800243e:	d100      	bne.n	8002442 <__aeabi_dsub+0x466>
 8002440:	e0a0      	b.n	8002584 <__aeabi_dsub+0x5a8>
 8002442:	000c      	movs	r4, r1
 8002444:	0017      	movs	r7, r2
 8002446:	4698      	mov	r8, r3
 8002448:	e64e      	b.n	80020e8 <__aeabi_dsub+0x10c>
 800244a:	4666      	mov	r6, ip
 800244c:	2400      	movs	r4, #0
 800244e:	2700      	movs	r7, #0
 8002450:	e685      	b.n	800215e <__aeabi_dsub+0x182>
 8002452:	001f      	movs	r7, r3
 8002454:	0008      	movs	r0, r1
 8002456:	3f20      	subs	r7, #32
 8002458:	40f8      	lsrs	r0, r7
 800245a:	0007      	movs	r7, r0
 800245c:	2b20      	cmp	r3, #32
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x486>
 8002460:	e08e      	b.n	8002580 <__aeabi_dsub+0x5a4>
 8002462:	2040      	movs	r0, #64	; 0x40
 8002464:	1ac3      	subs	r3, r0, r3
 8002466:	4099      	lsls	r1, r3
 8002468:	430a      	orrs	r2, r1
 800246a:	1e51      	subs	r1, r2, #1
 800246c:	418a      	sbcs	r2, r1
 800246e:	2100      	movs	r1, #0
 8002470:	4317      	orrs	r7, r2
 8002472:	e692      	b.n	800219a <__aeabi_dsub+0x1be>
 8002474:	2e00      	cmp	r6, #0
 8002476:	d114      	bne.n	80024a2 <__aeabi_dsub+0x4c6>
 8002478:	0026      	movs	r6, r4
 800247a:	4650      	mov	r0, sl
 800247c:	4306      	orrs	r6, r0
 800247e:	d062      	beq.n	8002546 <__aeabi_dsub+0x56a>
 8002480:	43db      	mvns	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d15c      	bne.n	8002540 <__aeabi_dsub+0x564>
 8002486:	1887      	adds	r7, r0, r2
 8002488:	4297      	cmp	r7, r2
 800248a:	4192      	sbcs	r2, r2
 800248c:	1864      	adds	r4, r4, r1
 800248e:	4252      	negs	r2, r2
 8002490:	18a4      	adds	r4, r4, r2
 8002492:	4666      	mov	r6, ip
 8002494:	e687      	b.n	80021a6 <__aeabi_dsub+0x1ca>
 8002496:	4650      	mov	r0, sl
 8002498:	4320      	orrs	r0, r4
 800249a:	1e44      	subs	r4, r0, #1
 800249c:	41a0      	sbcs	r0, r4
 800249e:	2400      	movs	r4, #0
 80024a0:	e760      	b.n	8002364 <__aeabi_dsub+0x388>
 80024a2:	4e57      	ldr	r6, [pc, #348]	; (8002600 <__aeabi_dsub+0x624>)
 80024a4:	45b4      	cmp	ip, r6
 80024a6:	d04e      	beq.n	8002546 <__aeabi_dsub+0x56a>
 80024a8:	2680      	movs	r6, #128	; 0x80
 80024aa:	0436      	lsls	r6, r6, #16
 80024ac:	425b      	negs	r3, r3
 80024ae:	4334      	orrs	r4, r6
 80024b0:	2b38      	cmp	r3, #56	; 0x38
 80024b2:	dd00      	ble.n	80024b6 <__aeabi_dsub+0x4da>
 80024b4:	e07f      	b.n	80025b6 <__aeabi_dsub+0x5da>
 80024b6:	2b1f      	cmp	r3, #31
 80024b8:	dd00      	ble.n	80024bc <__aeabi_dsub+0x4e0>
 80024ba:	e08b      	b.n	80025d4 <__aeabi_dsub+0x5f8>
 80024bc:	2620      	movs	r6, #32
 80024be:	0027      	movs	r7, r4
 80024c0:	4650      	mov	r0, sl
 80024c2:	1af6      	subs	r6, r6, r3
 80024c4:	40b7      	lsls	r7, r6
 80024c6:	40d8      	lsrs	r0, r3
 80024c8:	4307      	orrs	r7, r0
 80024ca:	4650      	mov	r0, sl
 80024cc:	40b0      	lsls	r0, r6
 80024ce:	1e46      	subs	r6, r0, #1
 80024d0:	41b0      	sbcs	r0, r6
 80024d2:	4307      	orrs	r7, r0
 80024d4:	40dc      	lsrs	r4, r3
 80024d6:	18bf      	adds	r7, r7, r2
 80024d8:	e7d6      	b.n	8002488 <__aeabi_dsub+0x4ac>
 80024da:	000d      	movs	r5, r1
 80024dc:	4315      	orrs	r5, r2
 80024de:	d100      	bne.n	80024e2 <__aeabi_dsub+0x506>
 80024e0:	e602      	b.n	80020e8 <__aeabi_dsub+0x10c>
 80024e2:	4650      	mov	r0, sl
 80024e4:	1a80      	subs	r0, r0, r2
 80024e6:	4582      	cmp	sl, r0
 80024e8:	41bf      	sbcs	r7, r7
 80024ea:	1a65      	subs	r5, r4, r1
 80024ec:	427f      	negs	r7, r7
 80024ee:	1bed      	subs	r5, r5, r7
 80024f0:	4684      	mov	ip, r0
 80024f2:	0228      	lsls	r0, r5, #8
 80024f4:	d400      	bmi.n	80024f8 <__aeabi_dsub+0x51c>
 80024f6:	e68d      	b.n	8002214 <__aeabi_dsub+0x238>
 80024f8:	4650      	mov	r0, sl
 80024fa:	1a17      	subs	r7, r2, r0
 80024fc:	42ba      	cmp	r2, r7
 80024fe:	4192      	sbcs	r2, r2
 8002500:	1b0c      	subs	r4, r1, r4
 8002502:	4252      	negs	r2, r2
 8002504:	1aa4      	subs	r4, r4, r2
 8002506:	4698      	mov	r8, r3
 8002508:	e5ee      	b.n	80020e8 <__aeabi_dsub+0x10c>
 800250a:	000d      	movs	r5, r1
 800250c:	4315      	orrs	r5, r2
 800250e:	d100      	bne.n	8002512 <__aeabi_dsub+0x536>
 8002510:	e76b      	b.n	80023ea <__aeabi_dsub+0x40e>
 8002512:	4650      	mov	r0, sl
 8002514:	0767      	lsls	r7, r4, #29
 8002516:	08c0      	lsrs	r0, r0, #3
 8002518:	4307      	orrs	r7, r0
 800251a:	2080      	movs	r0, #128	; 0x80
 800251c:	08e4      	lsrs	r4, r4, #3
 800251e:	0300      	lsls	r0, r0, #12
 8002520:	4204      	tst	r4, r0
 8002522:	d007      	beq.n	8002534 <__aeabi_dsub+0x558>
 8002524:	08cd      	lsrs	r5, r1, #3
 8002526:	4205      	tst	r5, r0
 8002528:	d104      	bne.n	8002534 <__aeabi_dsub+0x558>
 800252a:	002c      	movs	r4, r5
 800252c:	4698      	mov	r8, r3
 800252e:	08d7      	lsrs	r7, r2, #3
 8002530:	0749      	lsls	r1, r1, #29
 8002532:	430f      	orrs	r7, r1
 8002534:	0f7b      	lsrs	r3, r7, #29
 8002536:	00e4      	lsls	r4, r4, #3
 8002538:	431c      	orrs	r4, r3
 800253a:	00ff      	lsls	r7, r7, #3
 800253c:	4e30      	ldr	r6, [pc, #192]	; (8002600 <__aeabi_dsub+0x624>)
 800253e:	e5d3      	b.n	80020e8 <__aeabi_dsub+0x10c>
 8002540:	4e2f      	ldr	r6, [pc, #188]	; (8002600 <__aeabi_dsub+0x624>)
 8002542:	45b4      	cmp	ip, r6
 8002544:	d1b4      	bne.n	80024b0 <__aeabi_dsub+0x4d4>
 8002546:	000c      	movs	r4, r1
 8002548:	0017      	movs	r7, r2
 800254a:	4666      	mov	r6, ip
 800254c:	e5cc      	b.n	80020e8 <__aeabi_dsub+0x10c>
 800254e:	2700      	movs	r7, #0
 8002550:	2400      	movs	r4, #0
 8002552:	e5e8      	b.n	8002126 <__aeabi_dsub+0x14a>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d039      	beq.n	80025cc <__aeabi_dsub+0x5f0>
 8002558:	000b      	movs	r3, r1
 800255a:	4313      	orrs	r3, r2
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0x584>
 800255e:	e744      	b.n	80023ea <__aeabi_dsub+0x40e>
 8002560:	08c0      	lsrs	r0, r0, #3
 8002562:	0767      	lsls	r7, r4, #29
 8002564:	4307      	orrs	r7, r0
 8002566:	2080      	movs	r0, #128	; 0x80
 8002568:	08e4      	lsrs	r4, r4, #3
 800256a:	0300      	lsls	r0, r0, #12
 800256c:	4204      	tst	r4, r0
 800256e:	d0e1      	beq.n	8002534 <__aeabi_dsub+0x558>
 8002570:	08cb      	lsrs	r3, r1, #3
 8002572:	4203      	tst	r3, r0
 8002574:	d1de      	bne.n	8002534 <__aeabi_dsub+0x558>
 8002576:	08d7      	lsrs	r7, r2, #3
 8002578:	0749      	lsls	r1, r1, #29
 800257a:	430f      	orrs	r7, r1
 800257c:	001c      	movs	r4, r3
 800257e:	e7d9      	b.n	8002534 <__aeabi_dsub+0x558>
 8002580:	2100      	movs	r1, #0
 8002582:	e771      	b.n	8002468 <__aeabi_dsub+0x48c>
 8002584:	2500      	movs	r5, #0
 8002586:	2700      	movs	r7, #0
 8002588:	e5e9      	b.n	800215e <__aeabi_dsub+0x182>
 800258a:	002e      	movs	r6, r5
 800258c:	0027      	movs	r7, r4
 800258e:	3e20      	subs	r6, #32
 8002590:	40f7      	lsrs	r7, r6
 8002592:	2d20      	cmp	r5, #32
 8002594:	d02f      	beq.n	80025f6 <__aeabi_dsub+0x61a>
 8002596:	2640      	movs	r6, #64	; 0x40
 8002598:	1b75      	subs	r5, r6, r5
 800259a:	40ac      	lsls	r4, r5
 800259c:	4650      	mov	r0, sl
 800259e:	4320      	orrs	r0, r4
 80025a0:	1e44      	subs	r4, r0, #1
 80025a2:	41a0      	sbcs	r0, r4
 80025a4:	2400      	movs	r4, #0
 80025a6:	4338      	orrs	r0, r7
 80025a8:	e6dc      	b.n	8002364 <__aeabi_dsub+0x388>
 80025aa:	2480      	movs	r4, #128	; 0x80
 80025ac:	2500      	movs	r5, #0
 80025ae:	0324      	lsls	r4, r4, #12
 80025b0:	4e13      	ldr	r6, [pc, #76]	; (8002600 <__aeabi_dsub+0x624>)
 80025b2:	2700      	movs	r7, #0
 80025b4:	e5d3      	b.n	800215e <__aeabi_dsub+0x182>
 80025b6:	4650      	mov	r0, sl
 80025b8:	4320      	orrs	r0, r4
 80025ba:	0007      	movs	r7, r0
 80025bc:	1e78      	subs	r0, r7, #1
 80025be:	4187      	sbcs	r7, r0
 80025c0:	2400      	movs	r4, #0
 80025c2:	18bf      	adds	r7, r7, r2
 80025c4:	e760      	b.n	8002488 <__aeabi_dsub+0x4ac>
 80025c6:	000c      	movs	r4, r1
 80025c8:	0017      	movs	r7, r2
 80025ca:	e58d      	b.n	80020e8 <__aeabi_dsub+0x10c>
 80025cc:	000c      	movs	r4, r1
 80025ce:	0017      	movs	r7, r2
 80025d0:	4e0b      	ldr	r6, [pc, #44]	; (8002600 <__aeabi_dsub+0x624>)
 80025d2:	e589      	b.n	80020e8 <__aeabi_dsub+0x10c>
 80025d4:	001e      	movs	r6, r3
 80025d6:	0027      	movs	r7, r4
 80025d8:	3e20      	subs	r6, #32
 80025da:	40f7      	lsrs	r7, r6
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d00c      	beq.n	80025fa <__aeabi_dsub+0x61e>
 80025e0:	2640      	movs	r6, #64	; 0x40
 80025e2:	1af3      	subs	r3, r6, r3
 80025e4:	409c      	lsls	r4, r3
 80025e6:	4650      	mov	r0, sl
 80025e8:	4320      	orrs	r0, r4
 80025ea:	1e44      	subs	r4, r0, #1
 80025ec:	41a0      	sbcs	r0, r4
 80025ee:	4307      	orrs	r7, r0
 80025f0:	2400      	movs	r4, #0
 80025f2:	18bf      	adds	r7, r7, r2
 80025f4:	e748      	b.n	8002488 <__aeabi_dsub+0x4ac>
 80025f6:	2400      	movs	r4, #0
 80025f8:	e7d0      	b.n	800259c <__aeabi_dsub+0x5c0>
 80025fa:	2400      	movs	r4, #0
 80025fc:	e7f3      	b.n	80025e6 <__aeabi_dsub+0x60a>
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	000007ff 	.word	0x000007ff
 8002604:	ff7fffff 	.word	0xff7fffff

08002608 <__aeabi_d2iz>:
 8002608:	b530      	push	{r4, r5, lr}
 800260a:	4d13      	ldr	r5, [pc, #76]	; (8002658 <__aeabi_d2iz+0x50>)
 800260c:	030a      	lsls	r2, r1, #12
 800260e:	004b      	lsls	r3, r1, #1
 8002610:	0b12      	lsrs	r2, r2, #12
 8002612:	0d5b      	lsrs	r3, r3, #21
 8002614:	0fc9      	lsrs	r1, r1, #31
 8002616:	2400      	movs	r4, #0
 8002618:	42ab      	cmp	r3, r5
 800261a:	dd10      	ble.n	800263e <__aeabi_d2iz+0x36>
 800261c:	4c0f      	ldr	r4, [pc, #60]	; (800265c <__aeabi_d2iz+0x54>)
 800261e:	42a3      	cmp	r3, r4
 8002620:	dc0f      	bgt.n	8002642 <__aeabi_d2iz+0x3a>
 8002622:	2480      	movs	r4, #128	; 0x80
 8002624:	4d0e      	ldr	r5, [pc, #56]	; (8002660 <__aeabi_d2iz+0x58>)
 8002626:	0364      	lsls	r4, r4, #13
 8002628:	4322      	orrs	r2, r4
 800262a:	1aed      	subs	r5, r5, r3
 800262c:	2d1f      	cmp	r5, #31
 800262e:	dd0b      	ble.n	8002648 <__aeabi_d2iz+0x40>
 8002630:	480c      	ldr	r0, [pc, #48]	; (8002664 <__aeabi_d2iz+0x5c>)
 8002632:	1ac3      	subs	r3, r0, r3
 8002634:	40da      	lsrs	r2, r3
 8002636:	4254      	negs	r4, r2
 8002638:	2900      	cmp	r1, #0
 800263a:	d100      	bne.n	800263e <__aeabi_d2iz+0x36>
 800263c:	0014      	movs	r4, r2
 800263e:	0020      	movs	r0, r4
 8002640:	bd30      	pop	{r4, r5, pc}
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <__aeabi_d2iz+0x60>)
 8002644:	18cc      	adds	r4, r1, r3
 8002646:	e7fa      	b.n	800263e <__aeabi_d2iz+0x36>
 8002648:	4c08      	ldr	r4, [pc, #32]	; (800266c <__aeabi_d2iz+0x64>)
 800264a:	40e8      	lsrs	r0, r5
 800264c:	46a4      	mov	ip, r4
 800264e:	4463      	add	r3, ip
 8002650:	409a      	lsls	r2, r3
 8002652:	4302      	orrs	r2, r0
 8002654:	e7ef      	b.n	8002636 <__aeabi_d2iz+0x2e>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	000003fe 	.word	0x000003fe
 800265c:	0000041d 	.word	0x0000041d
 8002660:	00000433 	.word	0x00000433
 8002664:	00000413 	.word	0x00000413
 8002668:	7fffffff 	.word	0x7fffffff
 800266c:	fffffbed 	.word	0xfffffbed

08002670 <__aeabi_i2d>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	2800      	cmp	r0, #0
 8002674:	d030      	beq.n	80026d8 <__aeabi_i2d+0x68>
 8002676:	17c3      	asrs	r3, r0, #31
 8002678:	18c4      	adds	r4, r0, r3
 800267a:	405c      	eors	r4, r3
 800267c:	0fc5      	lsrs	r5, r0, #31
 800267e:	0020      	movs	r0, r4
 8002680:	f000 f8aa 	bl	80027d8 <__clzsi2>
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <__aeabi_i2d+0x74>)
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <__aeabi_i2d+0x78>)
 8002688:	1a1b      	subs	r3, r3, r0
 800268a:	1ad2      	subs	r2, r2, r3
 800268c:	2a1f      	cmp	r2, #31
 800268e:	dd18      	ble.n	80026c2 <__aeabi_i2d+0x52>
 8002690:	4a16      	ldr	r2, [pc, #88]	; (80026ec <__aeabi_i2d+0x7c>)
 8002692:	1ad2      	subs	r2, r2, r3
 8002694:	4094      	lsls	r4, r2
 8002696:	2200      	movs	r2, #0
 8002698:	0324      	lsls	r4, r4, #12
 800269a:	055b      	lsls	r3, r3, #21
 800269c:	0b24      	lsrs	r4, r4, #12
 800269e:	0d5b      	lsrs	r3, r3, #21
 80026a0:	2100      	movs	r1, #0
 80026a2:	0010      	movs	r0, r2
 80026a4:	0324      	lsls	r4, r4, #12
 80026a6:	0d0a      	lsrs	r2, r1, #20
 80026a8:	0b24      	lsrs	r4, r4, #12
 80026aa:	0512      	lsls	r2, r2, #20
 80026ac:	4322      	orrs	r2, r4
 80026ae:	4c10      	ldr	r4, [pc, #64]	; (80026f0 <__aeabi_i2d+0x80>)
 80026b0:	051b      	lsls	r3, r3, #20
 80026b2:	4022      	ands	r2, r4
 80026b4:	4313      	orrs	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	07ed      	lsls	r5, r5, #31
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	432b      	orrs	r3, r5
 80026be:	0019      	movs	r1, r3
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
 80026c2:	0021      	movs	r1, r4
 80026c4:	4091      	lsls	r1, r2
 80026c6:	000a      	movs	r2, r1
 80026c8:	210b      	movs	r1, #11
 80026ca:	1a08      	subs	r0, r1, r0
 80026cc:	40c4      	lsrs	r4, r0
 80026ce:	055b      	lsls	r3, r3, #21
 80026d0:	0324      	lsls	r4, r4, #12
 80026d2:	0b24      	lsrs	r4, r4, #12
 80026d4:	0d5b      	lsrs	r3, r3, #21
 80026d6:	e7e3      	b.n	80026a0 <__aeabi_i2d+0x30>
 80026d8:	2500      	movs	r5, #0
 80026da:	2300      	movs	r3, #0
 80026dc:	2400      	movs	r4, #0
 80026de:	2200      	movs	r2, #0
 80026e0:	e7de      	b.n	80026a0 <__aeabi_i2d+0x30>
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	0000041e 	.word	0x0000041e
 80026e8:	00000433 	.word	0x00000433
 80026ec:	00000413 	.word	0x00000413
 80026f0:	800fffff 	.word	0x800fffff

080026f4 <__aeabi_ui2d>:
 80026f4:	b510      	push	{r4, lr}
 80026f6:	1e04      	subs	r4, r0, #0
 80026f8:	d028      	beq.n	800274c <__aeabi_ui2d+0x58>
 80026fa:	f000 f86d 	bl	80027d8 <__clzsi2>
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <__aeabi_ui2d+0x60>)
 8002700:	4a15      	ldr	r2, [pc, #84]	; (8002758 <__aeabi_ui2d+0x64>)
 8002702:	1a1b      	subs	r3, r3, r0
 8002704:	1ad2      	subs	r2, r2, r3
 8002706:	2a1f      	cmp	r2, #31
 8002708:	dd15      	ble.n	8002736 <__aeabi_ui2d+0x42>
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <__aeabi_ui2d+0x68>)
 800270c:	1ad2      	subs	r2, r2, r3
 800270e:	4094      	lsls	r4, r2
 8002710:	2200      	movs	r2, #0
 8002712:	0324      	lsls	r4, r4, #12
 8002714:	055b      	lsls	r3, r3, #21
 8002716:	0b24      	lsrs	r4, r4, #12
 8002718:	0d5b      	lsrs	r3, r3, #21
 800271a:	2100      	movs	r1, #0
 800271c:	0010      	movs	r0, r2
 800271e:	0324      	lsls	r4, r4, #12
 8002720:	0d0a      	lsrs	r2, r1, #20
 8002722:	0b24      	lsrs	r4, r4, #12
 8002724:	0512      	lsls	r2, r2, #20
 8002726:	4322      	orrs	r2, r4
 8002728:	4c0d      	ldr	r4, [pc, #52]	; (8002760 <__aeabi_ui2d+0x6c>)
 800272a:	051b      	lsls	r3, r3, #20
 800272c:	4022      	ands	r2, r4
 800272e:	4313      	orrs	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	0859      	lsrs	r1, r3, #1
 8002734:	bd10      	pop	{r4, pc}
 8002736:	0021      	movs	r1, r4
 8002738:	4091      	lsls	r1, r2
 800273a:	000a      	movs	r2, r1
 800273c:	210b      	movs	r1, #11
 800273e:	1a08      	subs	r0, r1, r0
 8002740:	40c4      	lsrs	r4, r0
 8002742:	055b      	lsls	r3, r3, #21
 8002744:	0324      	lsls	r4, r4, #12
 8002746:	0b24      	lsrs	r4, r4, #12
 8002748:	0d5b      	lsrs	r3, r3, #21
 800274a:	e7e6      	b.n	800271a <__aeabi_ui2d+0x26>
 800274c:	2300      	movs	r3, #0
 800274e:	2400      	movs	r4, #0
 8002750:	2200      	movs	r2, #0
 8002752:	e7e2      	b.n	800271a <__aeabi_ui2d+0x26>
 8002754:	0000041e 	.word	0x0000041e
 8002758:	00000433 	.word	0x00000433
 800275c:	00000413 	.word	0x00000413
 8002760:	800fffff 	.word	0x800fffff

08002764 <__aeabi_cfrcmple>:
 8002764:	4684      	mov	ip, r0
 8002766:	1c08      	adds	r0, r1, #0
 8002768:	4661      	mov	r1, ip
 800276a:	e7ff      	b.n	800276c <__aeabi_cfcmpeq>

0800276c <__aeabi_cfcmpeq>:
 800276c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800276e:	f000 f8c3 	bl	80028f8 <__lesf2>
 8002772:	2800      	cmp	r0, #0
 8002774:	d401      	bmi.n	800277a <__aeabi_cfcmpeq+0xe>
 8002776:	2100      	movs	r1, #0
 8002778:	42c8      	cmn	r0, r1
 800277a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800277c <__aeabi_fcmpeq>:
 800277c:	b510      	push	{r4, lr}
 800277e:	f000 f855 	bl	800282c <__eqsf2>
 8002782:	4240      	negs	r0, r0
 8002784:	3001      	adds	r0, #1
 8002786:	bd10      	pop	{r4, pc}

08002788 <__aeabi_fcmplt>:
 8002788:	b510      	push	{r4, lr}
 800278a:	f000 f8b5 	bl	80028f8 <__lesf2>
 800278e:	2800      	cmp	r0, #0
 8002790:	db01      	blt.n	8002796 <__aeabi_fcmplt+0xe>
 8002792:	2000      	movs	r0, #0
 8002794:	bd10      	pop	{r4, pc}
 8002796:	2001      	movs	r0, #1
 8002798:	bd10      	pop	{r4, pc}
 800279a:	46c0      	nop			; (mov r8, r8)

0800279c <__aeabi_fcmple>:
 800279c:	b510      	push	{r4, lr}
 800279e:	f000 f8ab 	bl	80028f8 <__lesf2>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	dd01      	ble.n	80027aa <__aeabi_fcmple+0xe>
 80027a6:	2000      	movs	r0, #0
 80027a8:	bd10      	pop	{r4, pc}
 80027aa:	2001      	movs	r0, #1
 80027ac:	bd10      	pop	{r4, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)

080027b0 <__aeabi_fcmpgt>:
 80027b0:	b510      	push	{r4, lr}
 80027b2:	f000 f861 	bl	8002878 <__gesf2>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	dc01      	bgt.n	80027be <__aeabi_fcmpgt+0xe>
 80027ba:	2000      	movs	r0, #0
 80027bc:	bd10      	pop	{r4, pc}
 80027be:	2001      	movs	r0, #1
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)

080027c4 <__aeabi_fcmpge>:
 80027c4:	b510      	push	{r4, lr}
 80027c6:	f000 f857 	bl	8002878 <__gesf2>
 80027ca:	2800      	cmp	r0, #0
 80027cc:	da01      	bge.n	80027d2 <__aeabi_fcmpge+0xe>
 80027ce:	2000      	movs	r0, #0
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	2001      	movs	r0, #1
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)

080027d8 <__clzsi2>:
 80027d8:	211c      	movs	r1, #28
 80027da:	2301      	movs	r3, #1
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	4298      	cmp	r0, r3
 80027e0:	d301      	bcc.n	80027e6 <__clzsi2+0xe>
 80027e2:	0c00      	lsrs	r0, r0, #16
 80027e4:	3910      	subs	r1, #16
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	4298      	cmp	r0, r3
 80027ea:	d301      	bcc.n	80027f0 <__clzsi2+0x18>
 80027ec:	0a00      	lsrs	r0, r0, #8
 80027ee:	3908      	subs	r1, #8
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	4298      	cmp	r0, r3
 80027f4:	d301      	bcc.n	80027fa <__clzsi2+0x22>
 80027f6:	0900      	lsrs	r0, r0, #4
 80027f8:	3904      	subs	r1, #4
 80027fa:	a202      	add	r2, pc, #8	; (adr r2, 8002804 <__clzsi2+0x2c>)
 80027fc:	5c10      	ldrb	r0, [r2, r0]
 80027fe:	1840      	adds	r0, r0, r1
 8002800:	4770      	bx	lr
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	02020304 	.word	0x02020304
 8002808:	01010101 	.word	0x01010101
	...

08002814 <__clzdi2>:
 8002814:	b510      	push	{r4, lr}
 8002816:	2900      	cmp	r1, #0
 8002818:	d103      	bne.n	8002822 <__clzdi2+0xe>
 800281a:	f7ff ffdd 	bl	80027d8 <__clzsi2>
 800281e:	3020      	adds	r0, #32
 8002820:	e002      	b.n	8002828 <__clzdi2+0x14>
 8002822:	1c08      	adds	r0, r1, #0
 8002824:	f7ff ffd8 	bl	80027d8 <__clzsi2>
 8002828:	bd10      	pop	{r4, pc}
 800282a:	46c0      	nop			; (mov r8, r8)

0800282c <__eqsf2>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	0042      	lsls	r2, r0, #1
 8002830:	0245      	lsls	r5, r0, #9
 8002832:	024e      	lsls	r6, r1, #9
 8002834:	004c      	lsls	r4, r1, #1
 8002836:	0fc3      	lsrs	r3, r0, #31
 8002838:	0a6d      	lsrs	r5, r5, #9
 800283a:	0e12      	lsrs	r2, r2, #24
 800283c:	0a76      	lsrs	r6, r6, #9
 800283e:	0e24      	lsrs	r4, r4, #24
 8002840:	0fc9      	lsrs	r1, r1, #31
 8002842:	2001      	movs	r0, #1
 8002844:	2aff      	cmp	r2, #255	; 0xff
 8002846:	d006      	beq.n	8002856 <__eqsf2+0x2a>
 8002848:	2cff      	cmp	r4, #255	; 0xff
 800284a:	d003      	beq.n	8002854 <__eqsf2+0x28>
 800284c:	42a2      	cmp	r2, r4
 800284e:	d101      	bne.n	8002854 <__eqsf2+0x28>
 8002850:	42b5      	cmp	r5, r6
 8002852:	d006      	beq.n	8002862 <__eqsf2+0x36>
 8002854:	bd70      	pop	{r4, r5, r6, pc}
 8002856:	2d00      	cmp	r5, #0
 8002858:	d1fc      	bne.n	8002854 <__eqsf2+0x28>
 800285a:	2cff      	cmp	r4, #255	; 0xff
 800285c:	d1fa      	bne.n	8002854 <__eqsf2+0x28>
 800285e:	2e00      	cmp	r6, #0
 8002860:	d1f8      	bne.n	8002854 <__eqsf2+0x28>
 8002862:	428b      	cmp	r3, r1
 8002864:	d006      	beq.n	8002874 <__eqsf2+0x48>
 8002866:	2001      	movs	r0, #1
 8002868:	2a00      	cmp	r2, #0
 800286a:	d1f3      	bne.n	8002854 <__eqsf2+0x28>
 800286c:	0028      	movs	r0, r5
 800286e:	1e45      	subs	r5, r0, #1
 8002870:	41a8      	sbcs	r0, r5
 8002872:	e7ef      	b.n	8002854 <__eqsf2+0x28>
 8002874:	2000      	movs	r0, #0
 8002876:	e7ed      	b.n	8002854 <__eqsf2+0x28>

08002878 <__gesf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	0042      	lsls	r2, r0, #1
 800287c:	0245      	lsls	r5, r0, #9
 800287e:	024c      	lsls	r4, r1, #9
 8002880:	0fc3      	lsrs	r3, r0, #31
 8002882:	0048      	lsls	r0, r1, #1
 8002884:	0a6d      	lsrs	r5, r5, #9
 8002886:	0e12      	lsrs	r2, r2, #24
 8002888:	0a64      	lsrs	r4, r4, #9
 800288a:	0e00      	lsrs	r0, r0, #24
 800288c:	0fc9      	lsrs	r1, r1, #31
 800288e:	2aff      	cmp	r2, #255	; 0xff
 8002890:	d01e      	beq.n	80028d0 <__gesf2+0x58>
 8002892:	28ff      	cmp	r0, #255	; 0xff
 8002894:	d021      	beq.n	80028da <__gesf2+0x62>
 8002896:	2a00      	cmp	r2, #0
 8002898:	d10a      	bne.n	80028b0 <__gesf2+0x38>
 800289a:	426e      	negs	r6, r5
 800289c:	416e      	adcs	r6, r5
 800289e:	b2f6      	uxtb	r6, r6
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d10f      	bne.n	80028c4 <__gesf2+0x4c>
 80028a4:	2c00      	cmp	r4, #0
 80028a6:	d10d      	bne.n	80028c4 <__gesf2+0x4c>
 80028a8:	2000      	movs	r0, #0
 80028aa:	2d00      	cmp	r5, #0
 80028ac:	d009      	beq.n	80028c2 <__gesf2+0x4a>
 80028ae:	e005      	b.n	80028bc <__gesf2+0x44>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d101      	bne.n	80028b8 <__gesf2+0x40>
 80028b4:	2c00      	cmp	r4, #0
 80028b6:	d001      	beq.n	80028bc <__gesf2+0x44>
 80028b8:	428b      	cmp	r3, r1
 80028ba:	d011      	beq.n	80028e0 <__gesf2+0x68>
 80028bc:	2101      	movs	r1, #1
 80028be:	4258      	negs	r0, r3
 80028c0:	4308      	orrs	r0, r1
 80028c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c4:	2e00      	cmp	r6, #0
 80028c6:	d0f7      	beq.n	80028b8 <__gesf2+0x40>
 80028c8:	2001      	movs	r0, #1
 80028ca:	3901      	subs	r1, #1
 80028cc:	4308      	orrs	r0, r1
 80028ce:	e7f8      	b.n	80028c2 <__gesf2+0x4a>
 80028d0:	2d00      	cmp	r5, #0
 80028d2:	d0de      	beq.n	8002892 <__gesf2+0x1a>
 80028d4:	2002      	movs	r0, #2
 80028d6:	4240      	negs	r0, r0
 80028d8:	e7f3      	b.n	80028c2 <__gesf2+0x4a>
 80028da:	2c00      	cmp	r4, #0
 80028dc:	d0db      	beq.n	8002896 <__gesf2+0x1e>
 80028de:	e7f9      	b.n	80028d4 <__gesf2+0x5c>
 80028e0:	4282      	cmp	r2, r0
 80028e2:	dceb      	bgt.n	80028bc <__gesf2+0x44>
 80028e4:	db04      	blt.n	80028f0 <__gesf2+0x78>
 80028e6:	42a5      	cmp	r5, r4
 80028e8:	d8e8      	bhi.n	80028bc <__gesf2+0x44>
 80028ea:	2000      	movs	r0, #0
 80028ec:	42a5      	cmp	r5, r4
 80028ee:	d2e8      	bcs.n	80028c2 <__gesf2+0x4a>
 80028f0:	2101      	movs	r1, #1
 80028f2:	1e58      	subs	r0, r3, #1
 80028f4:	4308      	orrs	r0, r1
 80028f6:	e7e4      	b.n	80028c2 <__gesf2+0x4a>

080028f8 <__lesf2>:
 80028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fa:	0042      	lsls	r2, r0, #1
 80028fc:	024d      	lsls	r5, r1, #9
 80028fe:	004c      	lsls	r4, r1, #1
 8002900:	0246      	lsls	r6, r0, #9
 8002902:	0a76      	lsrs	r6, r6, #9
 8002904:	0e12      	lsrs	r2, r2, #24
 8002906:	0fc3      	lsrs	r3, r0, #31
 8002908:	0a6d      	lsrs	r5, r5, #9
 800290a:	0e24      	lsrs	r4, r4, #24
 800290c:	0fc9      	lsrs	r1, r1, #31
 800290e:	2aff      	cmp	r2, #255	; 0xff
 8002910:	d016      	beq.n	8002940 <__lesf2+0x48>
 8002912:	2cff      	cmp	r4, #255	; 0xff
 8002914:	d018      	beq.n	8002948 <__lesf2+0x50>
 8002916:	2a00      	cmp	r2, #0
 8002918:	d10a      	bne.n	8002930 <__lesf2+0x38>
 800291a:	4270      	negs	r0, r6
 800291c:	4170      	adcs	r0, r6
 800291e:	b2c0      	uxtb	r0, r0
 8002920:	2c00      	cmp	r4, #0
 8002922:	d015      	beq.n	8002950 <__lesf2+0x58>
 8002924:	2800      	cmp	r0, #0
 8002926:	d005      	beq.n	8002934 <__lesf2+0x3c>
 8002928:	2001      	movs	r0, #1
 800292a:	3901      	subs	r1, #1
 800292c:	4308      	orrs	r0, r1
 800292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002930:	2c00      	cmp	r4, #0
 8002932:	d013      	beq.n	800295c <__lesf2+0x64>
 8002934:	4299      	cmp	r1, r3
 8002936:	d014      	beq.n	8002962 <__lesf2+0x6a>
 8002938:	2001      	movs	r0, #1
 800293a:	425b      	negs	r3, r3
 800293c:	4318      	orrs	r0, r3
 800293e:	e7f6      	b.n	800292e <__lesf2+0x36>
 8002940:	2002      	movs	r0, #2
 8002942:	2e00      	cmp	r6, #0
 8002944:	d1f3      	bne.n	800292e <__lesf2+0x36>
 8002946:	e7e4      	b.n	8002912 <__lesf2+0x1a>
 8002948:	2002      	movs	r0, #2
 800294a:	2d00      	cmp	r5, #0
 800294c:	d1ef      	bne.n	800292e <__lesf2+0x36>
 800294e:	e7e2      	b.n	8002916 <__lesf2+0x1e>
 8002950:	2d00      	cmp	r5, #0
 8002952:	d1e7      	bne.n	8002924 <__lesf2+0x2c>
 8002954:	2000      	movs	r0, #0
 8002956:	2e00      	cmp	r6, #0
 8002958:	d0e9      	beq.n	800292e <__lesf2+0x36>
 800295a:	e7ed      	b.n	8002938 <__lesf2+0x40>
 800295c:	2d00      	cmp	r5, #0
 800295e:	d1e9      	bne.n	8002934 <__lesf2+0x3c>
 8002960:	e7ea      	b.n	8002938 <__lesf2+0x40>
 8002962:	42a2      	cmp	r2, r4
 8002964:	dc06      	bgt.n	8002974 <__lesf2+0x7c>
 8002966:	dbdf      	blt.n	8002928 <__lesf2+0x30>
 8002968:	42ae      	cmp	r6, r5
 800296a:	d803      	bhi.n	8002974 <__lesf2+0x7c>
 800296c:	2000      	movs	r0, #0
 800296e:	42ae      	cmp	r6, r5
 8002970:	d3da      	bcc.n	8002928 <__lesf2+0x30>
 8002972:	e7dc      	b.n	800292e <__lesf2+0x36>
 8002974:	2001      	movs	r0, #1
 8002976:	4249      	negs	r1, r1
 8002978:	4308      	orrs	r0, r1
 800297a:	e7d8      	b.n	800292e <__lesf2+0x36>

0800297c <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8002984:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <SX1276Init+0xd4>)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800298a:	4a32      	ldr	r2, [pc, #200]	; (8002a54 <SX1276Init+0xd8>)
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <SX1276Init+0xdc>)
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f006 fc67 	bl	8009264 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8002996:	4a2f      	ldr	r2, [pc, #188]	; (8002a54 <SX1276Init+0xd8>)
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <SX1276Init+0xe0>)
 800299a:	0011      	movs	r1, r2
 800299c:	0018      	movs	r0, r3
 800299e:	f006 fc61 	bl	8009264 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80029a2:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <SX1276Init+0xd8>)
 80029a4:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <SX1276Init+0xe4>)
 80029a6:	0011      	movs	r1, r2
 80029a8:	0018      	movs	r0, r3
 80029aa:	f006 fc5b 	bl	8009264 <TimerInit>
  
    MLM_TCXO_ON(); //TCXO ON
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	0159      	lsls	r1, r3, #5
 80029b2:	23a0      	movs	r3, #160	; 0xa0
 80029b4:	05db      	lsls	r3, r3, #23
 80029b6:	2201      	movs	r2, #1
 80029b8:	0018      	movs	r0, r3
 80029ba:	f006 fff5 	bl	80099a8 <HW_GPIO_Write>
  
    SX1276Reset( );
 80029be:	f001 fb75 	bl	80040ac <SX1276Reset>

    RxChainCalibration( );
 80029c2:	f000 f90d 	bl	8002be0 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80029c6:	2000      	movs	r0, #0
 80029c8:	f001 fba4 	bl	8004114 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <SX1276Init+0xe8>)
 80029ce:	0018      	movs	r0, r3
 80029d0:	f002 fa0e 	bl	8004df0 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80029d4:	230f      	movs	r3, #15
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e028      	b.n	8002a30 <SX1276Init+0xb4>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80029de:	230f      	movs	r3, #15
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	4920      	ldr	r1, [pc, #128]	; (8002a68 <SX1276Init+0xec>)
 80029e6:	0013      	movs	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	189b      	adds	r3, r3, r2
 80029ec:	5c5b      	ldrb	r3, [r3, r1]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f001 fbbc 	bl	800416c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80029f4:	230f      	movs	r3, #15
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	491b      	ldr	r1, [pc, #108]	; (8002a68 <SX1276Init+0xec>)
 80029fc:	0013      	movs	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	189b      	adds	r3, r3, r2
 8002a02:	18cb      	adds	r3, r1, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	7818      	ldrb	r0, [r3, #0]
 8002a08:	230f      	movs	r3, #15
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	4916      	ldr	r1, [pc, #88]	; (8002a68 <SX1276Init+0xec>)
 8002a10:	0013      	movs	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	189b      	adds	r3, r3, r2
 8002a16:	18cb      	adds	r3, r1, r3
 8002a18:	3302      	adds	r3, #2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	f001 fc04 	bl	800422a <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002a22:	230f      	movs	r3, #15
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	230f      	movs	r3, #15
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	3201      	adds	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	230f      	movs	r3, #15
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	d9d1      	bls.n	80029de <SX1276Init+0x62>
    }

    SX1276SetModem( MODEM_FSK );
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f001 fb96 	bl	800416c <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8002a40:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <SX1276Init+0xf0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	711a      	strb	r2, [r3, #4]
    
    return RADIO_WAKEUP_TIME + BOARD_WAKEUP_TIME;
 8002a46:	2305      	movs	r3, #5
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b004      	add	sp, #16
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200000ac 	.word	0x200000ac
 8002a54:	08004441 	.word	0x08004441
 8002a58:	200004ec 	.word	0x200004ec
 8002a5c:	20000574 	.word	0x20000574
 8002a60:	20000500 	.word	0x20000500
 8002a64:	20000000 	.word	0x20000000
 8002a68:	0800c32c 	.word	0x0800c32c
 8002a6c:	20000514 	.word	0x20000514

08002a70 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <SX1276GetStatus+0x10>)
 8002a76:	791b      	ldrb	r3, [r3, #4]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	20000514 	.word	0x20000514

08002a84 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
    uint32_t channel;
    
    SX1276.Settings.Channel = freq;
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <SX1276SetChannel+0x74>)
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]
    
    SX_FREQ_TO_CHANNEL(channel, freq);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4919      	ldr	r1, [pc, #100]	; (8002afc <SX1276SetChannel+0x78>)
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7fd fb36 	bl	8000108 <__udivsi3>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <SX1276SetChannel+0x78>)
 8002aa4:	4353      	muls	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	021c      	lsls	r4, r3, #8
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <SX1276SetChannel+0x7c>)
 8002ab6:	4694      	mov	ip, r2
 8002ab8:	4463      	add	r3, ip
 8002aba:	4910      	ldr	r1, [pc, #64]	; (8002afc <SX1276SetChannel+0x78>)
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7fd fb23 	bl	8000108 <__udivsi3>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	18e3      	adds	r3, r4, r3
 8002ac6:	60fb      	str	r3, [r7, #12]
    
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	0c1b      	lsrs	r3, r3, #16
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	0019      	movs	r1, r3
 8002ad0:	2006      	movs	r0, #6
 8002ad2:	f001 fbaa 	bl	800422a <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	0019      	movs	r1, r3
 8002ade:	2007      	movs	r0, #7
 8002ae0:	f001 fba3 	bl	800422a <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	0019      	movs	r1, r3
 8002aea:	2008      	movs	r0, #8
 8002aec:	f001 fb9d 	bl	800422a <SX1276Write>
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b007      	add	sp, #28
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	20000514 	.word	0x20000514
 8002afc:	00003d09 	.word	0x00003d09
 8002b00:	00001e84 	.word	0x00001e84

08002b04 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6039      	str	r1, [r7, #0]
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	1c02      	adds	r2, r0, #0
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	1c0a      	adds	r2, r1, #0
 8002b18:	801a      	strh	r2, [r3, #0]
    int16_t rssi = 0;
 8002b1a:	230e      	movs	r3, #14
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	2200      	movs	r2, #0
 8002b20:	801a      	strh	r2, [r3, #0]

    SX1276SetModem( modem );
 8002b22:	1dfb      	adds	r3, r7, #7
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f001 fb20 	bl	800416c <SX1276SetModem>

    SX1276SetChannel( freq );
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7ff ffa8 	bl	8002a84 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002b34:	2005      	movs	r0, #5
 8002b36:	f001 faed 	bl	8004114 <SX1276SetOpMode>

    DelayMs( 1 );
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f006 fb14 	bl	8009168 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 8002b40:	230e      	movs	r3, #14
 8002b42:	18fc      	adds	r4, r7, r3
 8002b44:	1dfb      	adds	r3, r7, #7
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f001 fa63 	bl	8004014 <SX1276ReadRssi>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	8023      	strh	r3, [r4, #0]

    SX1276SetSleep( );
 8002b52:	f000 ff35 	bl	80039c0 <SX1276SetSleep>

    if( rssi > rssiThresh )
 8002b56:	230e      	movs	r3, #14
 8002b58:	18fa      	adds	r2, r7, r3
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	5e52      	ldrsh	r2, [r2, r1]
 8002b60:	2100      	movs	r1, #0
 8002b62:	5e5b      	ldrsh	r3, [r3, r1]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	dd01      	ble.n	8002b6c <SX1276IsChannelFree+0x68>
    {
        return false;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <SX1276IsChannelFree+0x6a>
    }
    return true;
 8002b6c:	2301      	movs	r3, #1
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b005      	add	sp, #20
 8002b74:	bd90      	pop	{r4, r7, pc}

08002b76 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8002b80:	2001      	movs	r0, #1
 8002b82:	f001 faf3 	bl	800416c <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002b86:	21ff      	movs	r1, #255	; 0xff
 8002b88:	2011      	movs	r0, #17
 8002b8a:	f001 fb4e 	bl	800422a <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002b8e:	2005      	movs	r0, #5
 8002b90:	f001 fac0 	bl	8004114 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e015      	b.n	8002bc8 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f006 fae3 	bl	8009168 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8002ba2:	202c      	movs	r0, #44	; 0x2c
 8002ba4:	f001 fb55 	bl	8004252 <SX1276Read>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	001a      	movs	r2, r3
 8002bac:	2301      	movs	r3, #1
 8002bae:	401a      	ands	r2, r3
 8002bb0:	1dfb      	adds	r3, r7, #7
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	3201      	adds	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b1f      	cmp	r3, #31
 8002bce:	d9e5      	bls.n	8002b9c <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8002bd0:	f000 fef6 	bl	80039c0 <SX1276SetSleep>

    return rnd;
 8002bd4:	683b      	ldr	r3, [r7, #0]
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8002be6:	2317      	movs	r3, #23
 8002be8:	18fc      	adds	r4, r7, r3
 8002bea:	2009      	movs	r0, #9
 8002bec:	f001 fb31 	bl	8004252 <SX1276Read>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	7023      	strb	r3, [r4, #0]
    
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002bf4:	2006      	movs	r0, #6
 8002bf6:	f001 fb2c 	bl	8004252 <SX1276Read>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8002bfe:	2007      	movs	r0, #7
 8002c00:	f001 fb27 	bl	8004252 <SX1276Read>
 8002c04:	0003      	movs	r3, r0
 8002c06:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c08:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8002c0a:	2008      	movs	r0, #8
 8002c0c:	f001 fb21 	bl	8004252 <SX1276Read>
 8002c10:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c12:	4323      	orrs	r3, r4
 8002c14:	613b      	str	r3, [r7, #16]
    
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <RxChainCalibration+0xe0>)
 8002c2a:	435a      	muls	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4924      	ldr	r1, [pc, #144]	; (8002cc0 <RxChainCalibration+0xe0>)
 8002c30:	434b      	muls	r3, r1
 8002c32:	3380      	adds	r3, #128	; 0x80
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	18d3      	adds	r3, r2, r3
 8002c38:	607b      	str	r3, [r7, #4]
    
    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	2009      	movs	r0, #9
 8002c3e:	f001 faf4 	bl	800422a <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002c42:	203b      	movs	r0, #59	; 0x3b
 8002c44:	f001 fb05 	bl	8004252 <SX1276Read>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	2340      	movs	r3, #64	; 0x40
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	0019      	movs	r1, r3
 8002c54:	203b      	movs	r0, #59	; 0x3b
 8002c56:	f001 fae8 	bl	800422a <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	203b      	movs	r0, #59	; 0x3b
 8002c5e:	f001 faf8 	bl	8004252 <SX1276Read>
 8002c62:	0003      	movs	r3, r0
 8002c64:	001a      	movs	r2, r3
 8002c66:	2320      	movs	r3, #32
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d0f6      	beq.n	8002c5c <RxChainCalibration+0x7c>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <RxChainCalibration+0xe4>)
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff ff07 	bl	8002a84 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002c76:	203b      	movs	r0, #59	; 0x3b
 8002c78:	f001 faeb 	bl	8004252 <SX1276Read>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	001a      	movs	r2, r3
 8002c80:	2340      	movs	r3, #64	; 0x40
 8002c82:	4313      	orrs	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	0019      	movs	r1, r3
 8002c88:	203b      	movs	r0, #59	; 0x3b
 8002c8a:	f001 face 	bl	800422a <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	203b      	movs	r0, #59	; 0x3b
 8002c92:	f001 fade 	bl	8004252 <SX1276Read>
 8002c96:	0003      	movs	r3, r0
 8002c98:	001a      	movs	r2, r3
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d0f6      	beq.n	8002c90 <RxChainCalibration+0xb0>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8002ca2:	2317      	movs	r3, #23
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	0019      	movs	r1, r3
 8002caa:	2009      	movs	r0, #9
 8002cac:	f001 fabd 	bl	800422a <SX1276Write>
    SX1276SetChannel( initialFreq );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7ff fee6 	bl	8002a84 <SX1276SetChannel>
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b007      	add	sp, #28
 8002cbe:	bd90      	pop	{r4, r7, pc}
 8002cc0:	00003d09 	.word	0x00003d09
 8002cc4:	33bca100 	.word	0x33bca100

08002cc8 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002cd0:	230f      	movs	r3, #15
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e022      	b.n	8002d20 <GetFskBandwidthRegValue+0x58>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8002cda:	230f      	movs	r3, #15
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <GetFskBandwidthRegValue+0x6c>)
 8002ce2:	00d2      	lsls	r2, r2, #3
 8002ce4:	58d2      	ldr	r2, [r2, r3]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d812      	bhi.n	8002d12 <GetFskBandwidthRegValue+0x4a>
 8002cec:	230f      	movs	r3, #15
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <GetFskBandwidthRegValue+0x6c>)
 8002cf6:	00d2      	lsls	r2, r2, #3
 8002cf8:	58d2      	ldr	r2, [r2, r3]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d908      	bls.n	8002d12 <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8002d00:	230f      	movs	r3, #15
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <GetFskBandwidthRegValue+0x6c>)
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	18d3      	adds	r3, r2, r3
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	e00c      	b.n	8002d2c <GetFskBandwidthRegValue+0x64>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002d12:	230f      	movs	r3, #15
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	230f      	movs	r3, #15
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	3201      	adds	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	230f      	movs	r3, #15
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b14      	cmp	r3, #20
 8002d28:	d9d7      	bls.n	8002cda <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8002d2a:	e7fe      	b.n	8002d2a <GetFskBandwidthRegValue+0x62>
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b004      	add	sp, #16
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	0800c35c 	.word	0x0800c35c

08002d38 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	0019      	movs	r1, r3
 8002d44:	230f      	movs	r3, #15
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	1c02      	adds	r2, r0, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	230e      	movs	r3, #14
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	1c0a      	adds	r2, r1, #0
 8002d52:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8002d54:	230f      	movs	r3, #15
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f001 fa06 	bl	800416c <SX1276SetModem>

    switch( modem )
 8002d60:	230f      	movs	r3, #15
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <SX1276SetRxConfig+0x3a>
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d100      	bne.n	8002d70 <SX1276SetRxConfig+0x38>
 8002d6e:	e0b4      	b.n	8002eda <SX1276SetRxConfig+0x1a2>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002d70:	e201      	b.n	8003176 <SX1276SetRxConfig+0x43e>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002d72:	4be5      	ldr	r3, [pc, #916]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8002d78:	4be3      	ldr	r3, [pc, #908]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8002d7e:	4be2      	ldr	r3, [pc, #904]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002d84:	4be0      	ldr	r3, [pc, #896]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002d86:	222c      	movs	r2, #44	; 0x2c
 8002d88:	18ba      	adds	r2, r7, r2
 8002d8a:	2122      	movs	r1, #34	; 0x22
 8002d8c:	7812      	ldrb	r2, [r2, #0]
 8002d8e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8002d90:	4bdd      	ldr	r3, [pc, #884]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002d92:	2230      	movs	r2, #48	; 0x30
 8002d94:	18ba      	adds	r2, r7, r2
 8002d96:	2123      	movs	r1, #35	; 0x23
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8002d9c:	4bda      	ldr	r3, [pc, #872]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002d9e:	2234      	movs	r2, #52	; 0x34
 8002da0:	18ba      	adds	r2, r7, r2
 8002da2:	2124      	movs	r1, #36	; 0x24
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8002da8:	4bd7      	ldr	r3, [pc, #860]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002daa:	2220      	movs	r2, #32
 8002dac:	2120      	movs	r1, #32
 8002dae:	468c      	mov	ip, r1
 8002db0:	44bc      	add	ip, r7
 8002db2:	4462      	add	r2, ip
 8002db4:	2125      	movs	r1, #37	; 0x25
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8002dba:	4bd3      	ldr	r3, [pc, #844]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002dbc:	2224      	movs	r2, #36	; 0x24
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	468c      	mov	ip, r1
 8002dc2:	44bc      	add	ip, r7
 8002dc4:	4462      	add	r2, ip
 8002dc6:	2126      	movs	r1, #38	; 0x26
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002dcc:	4bce      	ldr	r3, [pc, #824]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	18ba      	adds	r2, r7, r2
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	841a      	strh	r2, [r3, #32]
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fc8c 	bl	80026f4 <__aeabi_ui2d>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	000c      	movs	r4, r1
 8002de0:	001a      	movs	r2, r3
 8002de2:	0023      	movs	r3, r4
 8002de4:	2000      	movs	r0, #0
 8002de6:	49c9      	ldr	r1, [pc, #804]	; (800310c <SX1276SetRxConfig+0x3d4>)
 8002de8:	f7fe fa44 	bl	8001274 <__aeabi_ddiv>
 8002dec:	0003      	movs	r3, r0
 8002dee:	000c      	movs	r4, r1
 8002df0:	0018      	movs	r0, r3
 8002df2:	0021      	movs	r1, r4
 8002df4:	f7fd fb74 	bl	80004e0 <__aeabi_d2uiz>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	0019      	movs	r1, r3
 8002e06:	2002      	movs	r0, #2
 8002e08:	f001 fa0f 	bl	800422a <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	0019      	movs	r1, r3
 8002e12:	2003      	movs	r0, #3
 8002e14:	f001 fa09 	bl	800422a <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7ff ff54 	bl	8002cc8 <GetFskBandwidthRegValue>
 8002e20:	0003      	movs	r3, r0
 8002e22:	0019      	movs	r1, r3
 8002e24:	2012      	movs	r0, #18
 8002e26:	f001 fa00 	bl	800422a <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff ff4b 	bl	8002cc8 <GetFskBandwidthRegValue>
 8002e32:	0003      	movs	r3, r0
 8002e34:	0019      	movs	r1, r3
 8002e36:	2013      	movs	r0, #19
 8002e38:	f001 f9f7 	bl	800422a <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002e3c:	2324      	movs	r3, #36	; 0x24
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	0019      	movs	r1, r3
 8002e4a:	2025      	movs	r0, #37	; 0x25
 8002e4c:	f001 f9ed 	bl	800422a <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002e50:	2324      	movs	r3, #36	; 0x24
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	0019      	movs	r1, r3
 8002e5a:	2026      	movs	r0, #38	; 0x26
 8002e5c:	f001 f9e5 	bl	800422a <SX1276Write>
            if( fixLen == 1 )
 8002e60:	232c      	movs	r3, #44	; 0x2c
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <SX1276SetRxConfig+0x142>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8002e6a:	2330      	movs	r3, #48	; 0x30
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	0019      	movs	r1, r3
 8002e72:	2032      	movs	r0, #50	; 0x32
 8002e74:	f001 f9d9 	bl	800422a <SX1276Write>
 8002e78:	e003      	b.n	8002e82 <SX1276SetRxConfig+0x14a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8002e7a:	21ff      	movs	r1, #255	; 0xff
 8002e7c:	2032      	movs	r0, #50	; 0x32
 8002e7e:	f001 f9d4 	bl	800422a <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8002e82:	2030      	movs	r0, #48	; 0x30
 8002e84:	f001 f9e5 	bl	8004252 <SX1276Read>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8002e8c:	226f      	movs	r2, #111	; 0x6f
 8002e8e:	4013      	ands	r3, r2
 8002e90:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002e92:	232c      	movs	r3, #44	; 0x2c
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <SX1276SetRxConfig+0x168>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e001      	b.n	8002ea4 <SX1276SetRxConfig+0x16c>
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	425b      	negs	r3, r3
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8002ea8:	2334      	movs	r3, #52	; 0x34
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	0019      	movs	r1, r3
 8002eba:	2030      	movs	r0, #48	; 0x30
 8002ebc:	f001 f9b5 	bl	800422a <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002ec0:	2031      	movs	r0, #49	; 0x31
 8002ec2:	f001 f9c6 	bl	8004252 <SX1276Read>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	001a      	movs	r2, r3
 8002eca:	2340      	movs	r3, #64	; 0x40
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	2031      	movs	r0, #49	; 0x31
 8002ed4:	f001 f9a9 	bl	800422a <SX1276Write>
        break;
 8002ed8:	e14d      	b.n	8003176 <SX1276SetRxConfig+0x43e>
            if( bandwidth > 2 )
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d900      	bls.n	8002ee2 <SX1276SetRxConfig+0x1aa>
                while( 1 );
 8002ee0:	e7fe      	b.n	8002ee0 <SX1276SetRxConfig+0x1a8>
            bandwidth += 7;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3307      	adds	r3, #7
 8002ee6:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002ee8:	4b87      	ldr	r3, [pc, #540]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
            SX1276.Settings.LoRa.Datarate = datarate;
 8002eee:	4b86      	ldr	r3, [pc, #536]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8002ef4:	4b84      	ldr	r3, [pc, #528]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002ef6:	220e      	movs	r2, #14
 8002ef8:	18ba      	adds	r2, r7, r2
 8002efa:	2149      	movs	r1, #73	; 0x49
 8002efc:	7812      	ldrb	r2, [r2, #0]
 8002efe:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002f00:	4b81      	ldr	r3, [pc, #516]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002f02:	2224      	movs	r2, #36	; 0x24
 8002f04:	18ba      	adds	r2, r7, r2
 8002f06:	214a      	movs	r1, #74	; 0x4a
 8002f08:	8812      	ldrh	r2, [r2, #0]
 8002f0a:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002f0c:	4b7e      	ldr	r3, [pc, #504]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002f0e:	222c      	movs	r2, #44	; 0x2c
 8002f10:	18ba      	adds	r2, r7, r2
 8002f12:	214c      	movs	r1, #76	; 0x4c
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8002f18:	4b7b      	ldr	r3, [pc, #492]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002f1a:	2230      	movs	r2, #48	; 0x30
 8002f1c:	18ba      	adds	r2, r7, r2
 8002f1e:	214d      	movs	r1, #77	; 0x4d
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8002f24:	4b78      	ldr	r3, [pc, #480]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002f26:	2234      	movs	r2, #52	; 0x34
 8002f28:	18ba      	adds	r2, r7, r2
 8002f2a:	214e      	movs	r1, #78	; 0x4e
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002f30:	4b75      	ldr	r3, [pc, #468]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002f32:	2238      	movs	r2, #56	; 0x38
 8002f34:	18ba      	adds	r2, r7, r2
 8002f36:	214f      	movs	r1, #79	; 0x4f
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8002f3c:	4b72      	ldr	r3, [pc, #456]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002f3e:	223c      	movs	r2, #60	; 0x3c
 8002f40:	18ba      	adds	r2, r7, r2
 8002f42:	2150      	movs	r1, #80	; 0x50
 8002f44:	7812      	ldrb	r2, [r2, #0]
 8002f46:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002f48:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	468c      	mov	ip, r1
 8002f50:	44bc      	add	ip, r7
 8002f52:	4462      	add	r2, ip
 8002f54:	2151      	movs	r1, #81	; 0x51
 8002f56:	7812      	ldrb	r2, [r2, #0]
 8002f58:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002f5a:	4b6b      	ldr	r3, [pc, #428]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002f5c:	2224      	movs	r2, #36	; 0x24
 8002f5e:	2120      	movs	r1, #32
 8002f60:	468c      	mov	ip, r1
 8002f62:	44bc      	add	ip, r7
 8002f64:	4462      	add	r2, ip
 8002f66:	2152      	movs	r1, #82	; 0x52
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d902      	bls.n	8002f78 <SX1276SetRxConfig+0x240>
                datarate = 12;
 8002f72:	230c      	movs	r3, #12
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	e004      	b.n	8002f82 <SX1276SetRxConfig+0x24a>
            else if( datarate < 6 )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d801      	bhi.n	8002f82 <SX1276SetRxConfig+0x24a>
                datarate = 6;
 8002f7e:	2306      	movs	r3, #6
 8002f80:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b07      	cmp	r3, #7
 8002f86:	d105      	bne.n	8002f94 <SX1276SetRxConfig+0x25c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b0b      	cmp	r3, #11
 8002f8c:	d008      	beq.n	8002fa0 <SX1276SetRxConfig+0x268>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	d005      	beq.n	8002fa0 <SX1276SetRxConfig+0x268>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d107      	bne.n	8002faa <SX1276SetRxConfig+0x272>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b0c      	cmp	r3, #12
 8002f9e:	d104      	bne.n	8002faa <SX1276SetRxConfig+0x272>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002fa0:	4b59      	ldr	r3, [pc, #356]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002fa2:	2248      	movs	r2, #72	; 0x48
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	5499      	strb	r1, [r3, r2]
 8002fa8:	e003      	b.n	8002fb2 <SX1276SetRxConfig+0x27a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002faa:	4b57      	ldr	r3, [pc, #348]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 8002fac:	2248      	movs	r2, #72	; 0x48
 8002fae:	2100      	movs	r1, #0
 8002fb0:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002fb2:	201d      	movs	r0, #29
 8002fb4:	f001 f94d 	bl	8004252 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	230e      	movs	r3, #14
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	18db      	adds	r3, r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002fce:	232c      	movs	r3, #44	; 0x2c
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002fd8:	0019      	movs	r1, r3
 8002fda:	201d      	movs	r0, #29
 8002fdc:	f001 f925 	bl	800422a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002fe0:	201e      	movs	r0, #30
 8002fe2:	f001 f936 	bl	8004252 <SX1276Read>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8002fea:	2308      	movs	r3, #8
 8002fec:	4013      	ands	r3, r2
 8002fee:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002ffc:	2334      	movs	r3, #52	; 0x34
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4313      	orrs	r3, r2
 8003008:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800300a:	2328      	movs	r3, #40	; 0x28
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	b29b      	uxth	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2103      	movs	r1, #3
 8003018:	400b      	ands	r3, r1
 800301a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800301c:	4313      	orrs	r3, r2
 800301e:	b2db      	uxtb	r3, r3
 8003020:	0019      	movs	r1, r3
 8003022:	201e      	movs	r0, #30
 8003024:	f001 f901 	bl	800422a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003028:	2026      	movs	r0, #38	; 0x26
 800302a:	f001 f912 	bl	8004252 <SX1276Read>
 800302e:	0003      	movs	r3, r0
 8003030:	b25b      	sxtb	r3, r3
 8003032:	2208      	movs	r2, #8
 8003034:	4393      	bics	r3, r2
 8003036:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003038:	4b33      	ldr	r3, [pc, #204]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 800303a:	2148      	movs	r1, #72	; 0x48
 800303c:	5c5b      	ldrb	r3, [r3, r1]
 800303e:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8003040:	b25b      	sxtb	r3, r3
 8003042:	4313      	orrs	r3, r2
 8003044:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003046:	b2db      	uxtb	r3, r3
 8003048:	0019      	movs	r1, r3
 800304a:	2026      	movs	r0, #38	; 0x26
 800304c:	f001 f8ed 	bl	800422a <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003050:	2328      	movs	r3, #40	; 0x28
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	0019      	movs	r1, r3
 800305a:	201f      	movs	r0, #31
 800305c:	f001 f8e5 	bl	800422a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003060:	2324      	movs	r3, #36	; 0x24
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	b29b      	uxth	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	0019      	movs	r1, r3
 800306e:	2020      	movs	r0, #32
 8003070:	f001 f8db 	bl	800422a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003074:	2324      	movs	r3, #36	; 0x24
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	0019      	movs	r1, r3
 800307e:	2021      	movs	r0, #33	; 0x21
 8003080:	f001 f8d3 	bl	800422a <SX1276Write>
            if( fixLen == 1 )
 8003084:	232c      	movs	r3, #44	; 0x2c
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d006      	beq.n	800309c <SX1276SetRxConfig+0x364>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800308e:	2330      	movs	r3, #48	; 0x30
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	0019      	movs	r1, r3
 8003096:	2022      	movs	r0, #34	; 0x22
 8003098:	f001 f8c7 	bl	800422a <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800309c:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 800309e:	224f      	movs	r2, #79	; 0x4f
 80030a0:	5c9b      	ldrb	r3, [r3, r2]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d013      	beq.n	80030ce <SX1276SetRxConfig+0x396>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80030a6:	2044      	movs	r0, #68	; 0x44
 80030a8:	f001 f8d3 	bl	8004252 <SX1276Read>
 80030ac:	0003      	movs	r3, r0
 80030ae:	001a      	movs	r2, r3
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	425b      	negs	r3, r3
 80030b4:	4313      	orrs	r3, r2
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	0019      	movs	r1, r3
 80030ba:	2044      	movs	r0, #68	; 0x44
 80030bc:	f001 f8b5 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 80030c2:	2250      	movs	r2, #80	; 0x50
 80030c4:	5c9b      	ldrb	r3, [r3, r2]
 80030c6:	0019      	movs	r1, r3
 80030c8:	2024      	movs	r0, #36	; 0x24
 80030ca:	f001 f8ae 	bl	800422a <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b09      	cmp	r3, #9
 80030d2:	d10d      	bne.n	80030f0 <SX1276SetRxConfig+0x3b8>
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <SX1276SetRxConfig+0x3d0>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a0d      	ldr	r2, [pc, #52]	; (8003110 <SX1276SetRxConfig+0x3d8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d908      	bls.n	80030f0 <SX1276SetRxConfig+0x3b8>
                SX1276Write( REG_LR_TEST36, 0x02 );
 80030de:	2102      	movs	r1, #2
 80030e0:	2036      	movs	r0, #54	; 0x36
 80030e2:	f001 f8a2 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 80030e6:	2164      	movs	r1, #100	; 0x64
 80030e8:	203a      	movs	r0, #58	; 0x3a
 80030ea:	f001 f89e 	bl	800422a <SX1276Write>
 80030ee:	e015      	b.n	800311c <SX1276SetRxConfig+0x3e4>
            else if( bandwidth == 9 )
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b09      	cmp	r3, #9
 80030f4:	d10e      	bne.n	8003114 <SX1276SetRxConfig+0x3dc>
                SX1276Write( REG_LR_TEST36, 0x02 );
 80030f6:	2102      	movs	r1, #2
 80030f8:	2036      	movs	r0, #54	; 0x36
 80030fa:	f001 f896 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 80030fe:	217f      	movs	r1, #127	; 0x7f
 8003100:	203a      	movs	r0, #58	; 0x3a
 8003102:	f001 f892 	bl	800422a <SX1276Write>
 8003106:	e009      	b.n	800311c <SX1276SetRxConfig+0x3e4>
 8003108:	20000514 	.word	0x20000514
 800310c:	417e8480 	.word	0x417e8480
 8003110:	1f4add40 	.word	0x1f4add40
                SX1276Write( REG_LR_TEST36, 0x03 );
 8003114:	2103      	movs	r1, #3
 8003116:	2036      	movs	r0, #54	; 0x36
 8003118:	f001 f887 	bl	800422a <SX1276Write>
            if( datarate == 6 )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d114      	bne.n	800314c <SX1276SetRxConfig+0x414>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003122:	2031      	movs	r0, #49	; 0x31
 8003124:	f001 f895 	bl	8004252 <SX1276Read>
 8003128:	0003      	movs	r3, r0
 800312a:	b25b      	sxtb	r3, r3
 800312c:	2207      	movs	r2, #7
 800312e:	4393      	bics	r3, r2
 8003130:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003132:	2205      	movs	r2, #5
 8003134:	4313      	orrs	r3, r2
 8003136:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003138:	b2db      	uxtb	r3, r3
 800313a:	0019      	movs	r1, r3
 800313c:	2031      	movs	r0, #49	; 0x31
 800313e:	f001 f874 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003142:	210c      	movs	r1, #12
 8003144:	2037      	movs	r0, #55	; 0x37
 8003146:	f001 f870 	bl	800422a <SX1276Write>
        break;
 800314a:	e013      	b.n	8003174 <SX1276SetRxConfig+0x43c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800314c:	2031      	movs	r0, #49	; 0x31
 800314e:	f001 f880 	bl	8004252 <SX1276Read>
 8003152:	0003      	movs	r3, r0
 8003154:	b25b      	sxtb	r3, r3
 8003156:	2207      	movs	r2, #7
 8003158:	4393      	bics	r3, r2
 800315a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800315c:	2203      	movs	r2, #3
 800315e:	4313      	orrs	r3, r2
 8003160:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003162:	b2db      	uxtb	r3, r3
 8003164:	0019      	movs	r1, r3
 8003166:	2031      	movs	r0, #49	; 0x31
 8003168:	f001 f85f 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800316c:	210a      	movs	r1, #10
 800316e:	2037      	movs	r0, #55	; 0x37
 8003170:	f001 f85b 	bl	800422a <SX1276Write>
        break;
 8003174:	46c0      	nop			; (mov r8, r8)
}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	b005      	add	sp, #20
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)

08003180 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60ba      	str	r2, [r7, #8]
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	230f      	movs	r3, #15
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	1c02      	adds	r2, r0, #0
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	230e      	movs	r3, #14
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	1c0a      	adds	r2, r1, #0
 8003198:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 800319a:	230f      	movs	r3, #15
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 ffe3 	bl	800416c <SX1276SetModem>

    SX1276SetRfTxPower( power );
 80031a6:	230e      	movs	r3, #14
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	0018      	movs	r0, r3
 80031b0:	f001 fe80 	bl	8004eb4 <SX1276SetRfTxPower>

    switch( modem )
 80031b4:	230f      	movs	r3, #15
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <SX1276SetTxConfig+0x46>
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d100      	bne.n	80031c4 <SX1276SetTxConfig+0x44>
 80031c2:	e0a4      	b.n	800330e <SX1276SetTxConfig+0x18e>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80031c4:	e1a2      	b.n	800350c <SX1276SetTxConfig+0x38c>
            SX1276.Settings.Fsk.Power = power;
 80031c6:	4bd3      	ldr	r3, [pc, #844]	; (8003514 <SX1276SetTxConfig+0x394>)
 80031c8:	220e      	movs	r2, #14
 80031ca:	18ba      	adds	r2, r7, r2
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80031d0:	4bd0      	ldr	r3, [pc, #832]	; (8003514 <SX1276SetTxConfig+0x394>)
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80031d6:	4bcf      	ldr	r3, [pc, #828]	; (8003514 <SX1276SetTxConfig+0x394>)
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80031dc:	4bcd      	ldr	r3, [pc, #820]	; (8003514 <SX1276SetTxConfig+0x394>)
 80031de:	6a3a      	ldr	r2, [r7, #32]
 80031e0:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80031e2:	4bcc      	ldr	r3, [pc, #816]	; (8003514 <SX1276SetTxConfig+0x394>)
 80031e4:	2228      	movs	r2, #40	; 0x28
 80031e6:	18ba      	adds	r2, r7, r2
 80031e8:	8812      	ldrh	r2, [r2, #0]
 80031ea:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80031ec:	4bc9      	ldr	r3, [pc, #804]	; (8003514 <SX1276SetTxConfig+0x394>)
 80031ee:	222c      	movs	r2, #44	; 0x2c
 80031f0:	18ba      	adds	r2, r7, r2
 80031f2:	2122      	movs	r1, #34	; 0x22
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80031f8:	4bc6      	ldr	r3, [pc, #792]	; (8003514 <SX1276SetTxConfig+0x394>)
 80031fa:	2230      	movs	r2, #48	; 0x30
 80031fc:	18ba      	adds	r2, r7, r2
 80031fe:	2124      	movs	r1, #36	; 0x24
 8003200:	7812      	ldrb	r2, [r2, #0]
 8003202:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003204:	4bc3      	ldr	r3, [pc, #780]	; (8003514 <SX1276SetTxConfig+0x394>)
 8003206:	223c      	movs	r2, #60	; 0x3c
 8003208:	18ba      	adds	r2, r7, r2
 800320a:	2125      	movs	r1, #37	; 0x25
 800320c:	7812      	ldrb	r2, [r2, #0]
 800320e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8003210:	4bc0      	ldr	r3, [pc, #768]	; (8003514 <SX1276SetTxConfig+0x394>)
 8003212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003214:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8003216:	68b8      	ldr	r0, [r7, #8]
 8003218:	f7ff fa6c 	bl	80026f4 <__aeabi_ui2d>
 800321c:	2200      	movs	r2, #0
 800321e:	4bbe      	ldr	r3, [pc, #760]	; (8003518 <SX1276SetTxConfig+0x398>)
 8003220:	f7fe f828 	bl	8001274 <__aeabi_ddiv>
 8003224:	0003      	movs	r3, r0
 8003226:	000c      	movs	r4, r1
 8003228:	0018      	movs	r0, r3
 800322a:	0021      	movs	r1, r4
 800322c:	f7fd f958 	bl	80004e0 <__aeabi_d2uiz>
 8003230:	0003      	movs	r3, r0
 8003232:	b29b      	uxth	r3, r3
 8003234:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	b2db      	uxtb	r3, r3
 800323c:	0019      	movs	r1, r3
 800323e:	2004      	movs	r0, #4
 8003240:	f000 fff3 	bl	800422a <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	0019      	movs	r1, r3
 800324a:	2005      	movs	r0, #5
 800324c:	f000 ffed 	bl	800422a <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003250:	6a38      	ldr	r0, [r7, #32]
 8003252:	f7ff fa4f 	bl	80026f4 <__aeabi_ui2d>
 8003256:	0003      	movs	r3, r0
 8003258:	000c      	movs	r4, r1
 800325a:	001a      	movs	r2, r3
 800325c:	0023      	movs	r3, r4
 800325e:	2000      	movs	r0, #0
 8003260:	49ae      	ldr	r1, [pc, #696]	; (800351c <SX1276SetTxConfig+0x39c>)
 8003262:	f7fe f807 	bl	8001274 <__aeabi_ddiv>
 8003266:	0003      	movs	r3, r0
 8003268:	000c      	movs	r4, r1
 800326a:	0018      	movs	r0, r3
 800326c:	0021      	movs	r1, r4
 800326e:	f7fd f937 	bl	80004e0 <__aeabi_d2uiz>
 8003272:	0003      	movs	r3, r0
 8003274:	b29b      	uxth	r3, r3
 8003276:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	b2db      	uxtb	r3, r3
 800327e:	0019      	movs	r1, r3
 8003280:	2002      	movs	r0, #2
 8003282:	f000 ffd2 	bl	800422a <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	0019      	movs	r1, r3
 800328c:	2003      	movs	r0, #3
 800328e:	f000 ffcc 	bl	800422a <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003292:	2328      	movs	r3, #40	; 0x28
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	b29b      	uxth	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	0019      	movs	r1, r3
 80032a0:	2025      	movs	r0, #37	; 0x25
 80032a2:	f000 ffc2 	bl	800422a <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80032a6:	2328      	movs	r3, #40	; 0x28
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	0019      	movs	r1, r3
 80032b0:	2026      	movs	r0, #38	; 0x26
 80032b2:	f000 ffba 	bl	800422a <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80032b6:	2030      	movs	r0, #48	; 0x30
 80032b8:	f000 ffcb 	bl	8004252 <SX1276Read>
 80032bc:	0003      	movs	r3, r0
 80032be:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80032c0:	226f      	movs	r2, #111	; 0x6f
 80032c2:	4013      	ands	r3, r2
 80032c4:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80032c6:	232c      	movs	r3, #44	; 0x2c
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <SX1276SetTxConfig+0x154>
 80032d0:	2300      	movs	r3, #0
 80032d2:	e001      	b.n	80032d8 <SX1276SetTxConfig+0x158>
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	425b      	negs	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80032dc:	2330      	movs	r3, #48	; 0x30
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	4313      	orrs	r3, r2
 80032e8:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	0019      	movs	r1, r3
 80032ee:	2030      	movs	r0, #48	; 0x30
 80032f0:	f000 ff9b 	bl	800422a <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80032f4:	2031      	movs	r0, #49	; 0x31
 80032f6:	f000 ffac 	bl	8004252 <SX1276Read>
 80032fa:	0003      	movs	r3, r0
 80032fc:	001a      	movs	r2, r3
 80032fe:	2340      	movs	r3, #64	; 0x40
 8003300:	4313      	orrs	r3, r2
 8003302:	b2db      	uxtb	r3, r3
 8003304:	0019      	movs	r1, r3
 8003306:	2031      	movs	r0, #49	; 0x31
 8003308:	f000 ff8f 	bl	800422a <SX1276Write>
        break;
 800330c:	e0fe      	b.n	800350c <SX1276SetTxConfig+0x38c>
            SX1276.Settings.LoRa.Power = power;
 800330e:	4b81      	ldr	r3, [pc, #516]	; (8003514 <SX1276SetTxConfig+0x394>)
 8003310:	220e      	movs	r2, #14
 8003312:	18ba      	adds	r2, r7, r2
 8003314:	213c      	movs	r1, #60	; 0x3c
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d900      	bls.n	8003322 <SX1276SetTxConfig+0x1a2>
                while( 1 );
 8003320:	e7fe      	b.n	8003320 <SX1276SetTxConfig+0x1a0>
            bandwidth += 7;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3307      	adds	r3, #7
 8003326:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003328:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <SX1276SetTxConfig+0x394>)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
            SX1276.Settings.LoRa.Datarate = datarate;
 800332e:	4b79      	ldr	r3, [pc, #484]	; (8003514 <SX1276SetTxConfig+0x394>)
 8003330:	6a3a      	ldr	r2, [r7, #32]
 8003332:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8003334:	4b77      	ldr	r3, [pc, #476]	; (8003514 <SX1276SetTxConfig+0x394>)
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	18ba      	adds	r2, r7, r2
 800333a:	2149      	movs	r1, #73	; 0x49
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003340:	4b74      	ldr	r3, [pc, #464]	; (8003514 <SX1276SetTxConfig+0x394>)
 8003342:	2228      	movs	r2, #40	; 0x28
 8003344:	18ba      	adds	r2, r7, r2
 8003346:	214a      	movs	r1, #74	; 0x4a
 8003348:	8812      	ldrh	r2, [r2, #0]
 800334a:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800334c:	4b71      	ldr	r3, [pc, #452]	; (8003514 <SX1276SetTxConfig+0x394>)
 800334e:	222c      	movs	r2, #44	; 0x2c
 8003350:	18ba      	adds	r2, r7, r2
 8003352:	214c      	movs	r1, #76	; 0x4c
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8003358:	4b6e      	ldr	r3, [pc, #440]	; (8003514 <SX1276SetTxConfig+0x394>)
 800335a:	2234      	movs	r2, #52	; 0x34
 800335c:	18ba      	adds	r2, r7, r2
 800335e:	214f      	movs	r1, #79	; 0x4f
 8003360:	7812      	ldrb	r2, [r2, #0]
 8003362:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003364:	4b6b      	ldr	r3, [pc, #428]	; (8003514 <SX1276SetTxConfig+0x394>)
 8003366:	2238      	movs	r2, #56	; 0x38
 8003368:	18ba      	adds	r2, r7, r2
 800336a:	2150      	movs	r1, #80	; 0x50
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <SX1276SetTxConfig+0x394>)
 8003372:	2230      	movs	r2, #48	; 0x30
 8003374:	18ba      	adds	r2, r7, r2
 8003376:	214e      	movs	r1, #78	; 0x4e
 8003378:	7812      	ldrb	r2, [r2, #0]
 800337a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800337c:	4b65      	ldr	r3, [pc, #404]	; (8003514 <SX1276SetTxConfig+0x394>)
 800337e:	223c      	movs	r2, #60	; 0x3c
 8003380:	18ba      	adds	r2, r7, r2
 8003382:	2151      	movs	r1, #81	; 0x51
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8003388:	4b62      	ldr	r3, [pc, #392]	; (8003514 <SX1276SetTxConfig+0x394>)
 800338a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
            if( datarate > 12 )
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d902      	bls.n	800339a <SX1276SetTxConfig+0x21a>
                datarate = 12;
 8003394:	230c      	movs	r3, #12
 8003396:	623b      	str	r3, [r7, #32]
 8003398:	e004      	b.n	80033a4 <SX1276SetTxConfig+0x224>
            else if( datarate < 6 )
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2b05      	cmp	r3, #5
 800339e:	d801      	bhi.n	80033a4 <SX1276SetTxConfig+0x224>
                datarate = 6;
 80033a0:	2306      	movs	r3, #6
 80033a2:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b07      	cmp	r3, #7
 80033a8:	d105      	bne.n	80033b6 <SX1276SetTxConfig+0x236>
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	2b0b      	cmp	r3, #11
 80033ae:	d008      	beq.n	80033c2 <SX1276SetTxConfig+0x242>
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d005      	beq.n	80033c2 <SX1276SetTxConfig+0x242>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d107      	bne.n	80033cc <SX1276SetTxConfig+0x24c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d104      	bne.n	80033cc <SX1276SetTxConfig+0x24c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80033c2:	4b54      	ldr	r3, [pc, #336]	; (8003514 <SX1276SetTxConfig+0x394>)
 80033c4:	2248      	movs	r2, #72	; 0x48
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
 80033ca:	e003      	b.n	80033d4 <SX1276SetTxConfig+0x254>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80033cc:	4b51      	ldr	r3, [pc, #324]	; (8003514 <SX1276SetTxConfig+0x394>)
 80033ce:	2248      	movs	r2, #72	; 0x48
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <SX1276SetTxConfig+0x394>)
 80033d6:	224f      	movs	r2, #79	; 0x4f
 80033d8:	5c9b      	ldrb	r3, [r3, r2]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d013      	beq.n	8003406 <SX1276SetTxConfig+0x286>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80033de:	2044      	movs	r0, #68	; 0x44
 80033e0:	f000 ff37 	bl	8004252 <SX1276Read>
 80033e4:	0003      	movs	r3, r0
 80033e6:	001a      	movs	r2, r3
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	425b      	negs	r3, r3
 80033ec:	4313      	orrs	r3, r2
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	0019      	movs	r1, r3
 80033f2:	2044      	movs	r0, #68	; 0x44
 80033f4:	f000 ff19 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80033f8:	4b46      	ldr	r3, [pc, #280]	; (8003514 <SX1276SetTxConfig+0x394>)
 80033fa:	2250      	movs	r2, #80	; 0x50
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	0019      	movs	r1, r3
 8003400:	2024      	movs	r0, #36	; 0x24
 8003402:	f000 ff12 	bl	800422a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8003406:	201d      	movs	r0, #29
 8003408:	f000 ff23 	bl	8004252 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	b2da      	uxtb	r2, r3
 8003414:	2324      	movs	r3, #36	; 0x24
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	18db      	adds	r3, r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4313      	orrs	r3, r2
 8003420:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003422:	232c      	movs	r3, #44	; 0x2c
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003428:	4313      	orrs	r3, r2
 800342a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800342c:	0019      	movs	r1, r3
 800342e:	201d      	movs	r0, #29
 8003430:	f000 fefb 	bl	800422a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8003434:	201e      	movs	r0, #30
 8003436:	f000 ff0c 	bl	8004252 <SX1276Read>
 800343a:	0003      	movs	r3, r0
 800343c:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800343e:	230b      	movs	r3, #11
 8003440:	4013      	ands	r3, r2
 8003442:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800344c:	4313      	orrs	r3, r2
 800344e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8003450:	2330      	movs	r3, #48	; 0x30
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800345a:	4313      	orrs	r3, r2
 800345c:	b2db      	uxtb	r3, r3
 800345e:	0019      	movs	r1, r3
 8003460:	201e      	movs	r0, #30
 8003462:	f000 fee2 	bl	800422a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003466:	2026      	movs	r0, #38	; 0x26
 8003468:	f000 fef3 	bl	8004252 <SX1276Read>
 800346c:	0003      	movs	r3, r0
 800346e:	b25b      	sxtb	r3, r3
 8003470:	2208      	movs	r2, #8
 8003472:	4393      	bics	r3, r2
 8003474:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <SX1276SetTxConfig+0x394>)
 8003478:	2148      	movs	r1, #72	; 0x48
 800347a:	5c5b      	ldrb	r3, [r3, r1]
 800347c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800347e:	b25b      	sxtb	r3, r3
 8003480:	4313      	orrs	r3, r2
 8003482:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003484:	b2db      	uxtb	r3, r3
 8003486:	0019      	movs	r1, r3
 8003488:	2026      	movs	r0, #38	; 0x26
 800348a:	f000 fece 	bl	800422a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800348e:	2328      	movs	r3, #40	; 0x28
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	b29b      	uxth	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	0019      	movs	r1, r3
 800349c:	2020      	movs	r0, #32
 800349e:	f000 fec4 	bl	800422a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80034a2:	2328      	movs	r3, #40	; 0x28
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	0019      	movs	r1, r3
 80034ac:	2021      	movs	r0, #33	; 0x21
 80034ae:	f000 febc 	bl	800422a <SX1276Write>
            if( datarate == 6 )
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d114      	bne.n	80034e2 <SX1276SetTxConfig+0x362>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80034b8:	2031      	movs	r0, #49	; 0x31
 80034ba:	f000 feca 	bl	8004252 <SX1276Read>
 80034be:	0003      	movs	r3, r0
 80034c0:	b25b      	sxtb	r3, r3
 80034c2:	2207      	movs	r2, #7
 80034c4:	4393      	bics	r3, r2
 80034c6:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80034c8:	2205      	movs	r2, #5
 80034ca:	4313      	orrs	r3, r2
 80034cc:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	0019      	movs	r1, r3
 80034d2:	2031      	movs	r0, #49	; 0x31
 80034d4:	f000 fea9 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80034d8:	210c      	movs	r1, #12
 80034da:	2037      	movs	r0, #55	; 0x37
 80034dc:	f000 fea5 	bl	800422a <SX1276Write>
        break;
 80034e0:	e013      	b.n	800350a <SX1276SetTxConfig+0x38a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80034e2:	2031      	movs	r0, #49	; 0x31
 80034e4:	f000 feb5 	bl	8004252 <SX1276Read>
 80034e8:	0003      	movs	r3, r0
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	2207      	movs	r2, #7
 80034ee:	4393      	bics	r3, r2
 80034f0:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80034f2:	2203      	movs	r2, #3
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	0019      	movs	r1, r3
 80034fc:	2031      	movs	r0, #49	; 0x31
 80034fe:	f000 fe94 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003502:	210a      	movs	r1, #10
 8003504:	2037      	movs	r0, #55	; 0x37
 8003506:	f000 fe90 	bl	800422a <SX1276Write>
        break;
 800350a:	46c0      	nop			; (mov r8, r8)
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	b005      	add	sp, #20
 8003512:	bd90      	pop	{r4, r7, pc}
 8003514:	20000514 	.word	0x20000514
 8003518:	404e8480 	.word	0x404e8480
 800351c:	417e8480 	.word	0x417e8480

08003520 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003522:	b095      	sub	sp, #84	; 0x54
 8003524:	af00      	add	r7, sp, #0
 8003526:	0002      	movs	r2, r0
 8003528:	1dfb      	adds	r3, r7, #7
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	1dbb      	adds	r3, r7, #6
 800352e:	1c0a      	adds	r2, r1, #0
 8003530:	701a      	strb	r2, [r3, #0]
    double airTime = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	2400      	movs	r4, #0
 8003536:	64bb      	str	r3, [r7, #72]	; 0x48
 8003538:	64fc      	str	r4, [r7, #76]	; 0x4c

    switch( modem )
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <SX1276GetTimeOnAir+0x2a>
 8003542:	2b01      	cmp	r3, #1
 8003544:	d100      	bne.n	8003548 <SX1276GetTimeOnAir+0x28>
 8003546:	e082      	b.n	800364e <SX1276GetTimeOnAir+0x12e>
 8003548:	e15c      	b.n	8003804 <SX1276GetTimeOnAir+0x2e4>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800354a:	4bb3      	ldr	r3, [pc, #716]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 800354c:	8c1b      	ldrh	r3, [r3, #32]
 800354e:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003550:	2027      	movs	r0, #39	; 0x27
 8003552:	f000 fe7e 	bl	8004252 <SX1276Read>
 8003556:	0003      	movs	r3, r0
 8003558:	001a      	movs	r2, r3
 800355a:	23f8      	movs	r3, #248	; 0xf8
 800355c:	439a      	bics	r2, r3
 800355e:	0013      	movs	r3, r2
 8003560:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8003562:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff f883 	bl	8002670 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800356a:	4bab      	ldr	r3, [pc, #684]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 800356c:	2222      	movs	r2, #34	; 0x22
 800356e:	5c9b      	ldrb	r3, [r3, r2]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <SX1276GetTimeOnAir+0x5a>
 8003574:	2300      	movs	r3, #0
 8003576:	2400      	movs	r4, #0
 8003578:	e001      	b.n	800357e <SX1276GetTimeOnAir+0x5e>
 800357a:	2300      	movs	r3, #0
 800357c:	4ca7      	ldr	r4, [pc, #668]	; (800381c <SX1276GetTimeOnAir+0x2fc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800357e:	001a      	movs	r2, r3
 8003580:	0023      	movs	r3, r4
 8003582:	f7fd fb67 	bl	8000c54 <__aeabi_dadd>
 8003586:	0003      	movs	r3, r0
 8003588:	000c      	movs	r4, r1
 800358a:	001d      	movs	r5, r3
 800358c:	0026      	movs	r6, r4
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800358e:	2030      	movs	r0, #48	; 0x30
 8003590:	f000 fe5f 	bl	8004252 <SX1276Read>
 8003594:	0003      	movs	r3, r0
 8003596:	001a      	movs	r2, r3
 8003598:	23f9      	movs	r3, #249	; 0xf9
 800359a:	439a      	bics	r2, r3
 800359c:	1e13      	subs	r3, r2, #0
 800359e:	d002      	beq.n	80035a6 <SX1276GetTimeOnAir+0x86>
 80035a0:	2300      	movs	r3, #0
 80035a2:	4c9e      	ldr	r4, [pc, #632]	; (800381c <SX1276GetTimeOnAir+0x2fc>)
 80035a4:	e001      	b.n	80035aa <SX1276GetTimeOnAir+0x8a>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2400      	movs	r4, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80035aa:	001a      	movs	r2, r3
 80035ac:	0023      	movs	r3, r4
 80035ae:	0028      	movs	r0, r5
 80035b0:	0031      	movs	r1, r6
 80035b2:	f7fd fb4f 	bl	8000c54 <__aeabi_dadd>
 80035b6:	0003      	movs	r3, r0
 80035b8:	000c      	movs	r4, r1
 80035ba:	0025      	movs	r5, r4
 80035bc:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80035be:	1dbb      	adds	r3, r7, #6
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7ff f854 	bl	8002670 <__aeabi_i2d>
 80035c8:	0002      	movs	r2, r0
 80035ca:	000b      	movs	r3, r1
 80035cc:	0020      	movs	r0, r4
 80035ce:	0029      	movs	r1, r5
 80035d0:	f7fd fb40 	bl	8000c54 <__aeabi_dadd>
 80035d4:	0003      	movs	r3, r0
 80035d6:	000c      	movs	r4, r1
 80035d8:	0018      	movs	r0, r3
 80035da:	0021      	movs	r1, r4
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80035dc:	4b8e      	ldr	r3, [pc, #568]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 80035de:	2224      	movs	r2, #36	; 0x24
 80035e0:	5c9b      	ldrb	r3, [r3, r2]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <SX1276GetTimeOnAir+0xce>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2480      	movs	r4, #128	; 0x80
 80035ea:	05e4      	lsls	r4, r4, #23
 80035ec:	e001      	b.n	80035f2 <SX1276GetTimeOnAir+0xd2>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2400      	movs	r4, #0
                                     pktLen +
 80035f2:	001a      	movs	r2, r3
 80035f4:	0023      	movs	r3, r4
 80035f6:	f7fd fb2d 	bl	8000c54 <__aeabi_dadd>
 80035fa:	0003      	movs	r3, r0
 80035fc:	000c      	movs	r4, r1
 80035fe:	0018      	movs	r0, r3
 8003600:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8003602:	2200      	movs	r2, #0
 8003604:	4b86      	ldr	r3, [pc, #536]	; (8003820 <SX1276GetTimeOnAir+0x300>)
 8003606:	f7fe fa69 	bl	8001adc <__aeabi_dmul>
 800360a:	0003      	movs	r3, r0
 800360c:	000c      	movs	r4, r1
 800360e:	0025      	movs	r5, r4
 8003610:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1e3 );
 8003612:	4b81      	ldr	r3, [pc, #516]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 8003614:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff f86c 	bl	80026f4 <__aeabi_ui2d>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0020      	movs	r0, r4
 8003622:	0029      	movs	r1, r5
 8003624:	f7fd fe26 	bl	8001274 <__aeabi_ddiv>
 8003628:	0003      	movs	r3, r0
 800362a:	000c      	movs	r4, r1
 800362c:	0018      	movs	r0, r3
 800362e:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8003630:	2200      	movs	r2, #0
 8003632:	4b7c      	ldr	r3, [pc, #496]	; (8003824 <SX1276GetTimeOnAir+0x304>)
 8003634:	f7fe fa52 	bl	8001adc <__aeabi_dmul>
 8003638:	0003      	movs	r3, r0
 800363a:	000c      	movs	r4, r1
 800363c:	0018      	movs	r0, r3
 800363e:	0021      	movs	r1, r4
 8003640:	f008 fd80 	bl	800c144 <round>
 8003644:	0003      	movs	r3, r0
 8003646:	000c      	movs	r4, r1
 8003648:	64bb      	str	r3, [r7, #72]	; 0x48
 800364a:	64fc      	str	r4, [r7, #76]	; 0x4c
        }
        break;
 800364c:	e0da      	b.n	8003804 <SX1276GetTimeOnAir+0x2e4>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800364e:	2300      	movs	r3, #0
 8003650:	2400      	movs	r4, #0
 8003652:	643b      	str	r3, [r7, #64]	; 0x40
 8003654:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8003656:	4b70      	ldr	r3, [pc, #448]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2b08      	cmp	r3, #8
 800365c:	d008      	beq.n	8003670 <SX1276GetTimeOnAir+0x150>
 800365e:	2b09      	cmp	r3, #9
 8003660:	d00b      	beq.n	800367a <SX1276GetTimeOnAir+0x15a>
 8003662:	2b07      	cmp	r3, #7
 8003664:	d10e      	bne.n	8003684 <SX1276GetTimeOnAir+0x164>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 8003666:	2300      	movs	r3, #0
 8003668:	4c6f      	ldr	r4, [pc, #444]	; (8003828 <SX1276GetTimeOnAir+0x308>)
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
 800366c:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 800366e:	e009      	b.n	8003684 <SX1276GetTimeOnAir+0x164>
            case 8: // 250 kHz
                bw = 250e3;
 8003670:	2300      	movs	r3, #0
 8003672:	4c6e      	ldr	r4, [pc, #440]	; (800382c <SX1276GetTimeOnAir+0x30c>)
 8003674:	643b      	str	r3, [r7, #64]	; 0x40
 8003676:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8003678:	e004      	b.n	8003684 <SX1276GetTimeOnAir+0x164>
            case 9: // 500 kHz
                bw = 500e3;
 800367a:	2300      	movs	r3, #0
 800367c:	4c6c      	ldr	r4, [pc, #432]	; (8003830 <SX1276GetTimeOnAir+0x310>)
 800367e:	643b      	str	r3, [r7, #64]	; 0x40
 8003680:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8003682:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	2201      	movs	r2, #1
 800368a:	409a      	lsls	r2, r3
 800368c:	0013      	movs	r3, r2
 800368e:	0018      	movs	r0, r3
 8003690:	f7fe ffee 	bl	8002670 <__aeabi_i2d>
 8003694:	0003      	movs	r3, r0
 8003696:	000c      	movs	r4, r1
 8003698:	001a      	movs	r2, r3
 800369a:	0023      	movs	r3, r4
 800369c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800369e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036a0:	f7fd fde8 	bl	8001274 <__aeabi_ddiv>
 80036a4:	0003      	movs	r3, r0
 80036a6:	000c      	movs	r4, r1
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036aa:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 80036ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b0:	2000      	movs	r0, #0
 80036b2:	495a      	ldr	r1, [pc, #360]	; (800381c <SX1276GetTimeOnAir+0x2fc>)
 80036b4:	f7fd fdde 	bl	8001274 <__aeabi_ddiv>
 80036b8:	0003      	movs	r3, r0
 80036ba:	000c      	movs	r4, r1
 80036bc:	633b      	str	r3, [r7, #48]	; 0x30
 80036be:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80036c0:	4b55      	ldr	r3, [pc, #340]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 80036c2:	224a      	movs	r2, #74	; 0x4a
 80036c4:	5a9b      	ldrh	r3, [r3, r2]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7fe ffd2 	bl	8002670 <__aeabi_i2d>
 80036cc:	2200      	movs	r2, #0
 80036ce:	4b59      	ldr	r3, [pc, #356]	; (8003834 <SX1276GetTimeOnAir+0x314>)
 80036d0:	f7fd fac0 	bl	8000c54 <__aeabi_dadd>
 80036d4:	0003      	movs	r3, r0
 80036d6:	000c      	movs	r4, r1
 80036d8:	0018      	movs	r0, r3
 80036da:	0021      	movs	r1, r4
 80036dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e0:	f7fe f9fc 	bl	8001adc <__aeabi_dmul>
 80036e4:	0003      	movs	r3, r0
 80036e6:	000c      	movs	r4, r1
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ea:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80036ec:	1dbb      	adds	r3, r7, #6
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b48      	ldr	r3, [pc, #288]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80036fc:	4a46      	ldr	r2, [pc, #280]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 80036fe:	214e      	movs	r1, #78	; 0x4e
 8003700:	5c52      	ldrb	r2, [r2, r1]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8003706:	4b44      	ldr	r3, [pc, #272]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 8003708:	214c      	movs	r1, #76	; 0x4c
 800370a:	5c5b      	ldrb	r3, [r3, r1]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <SX1276GetTimeOnAir+0x1f4>
 8003710:	2314      	movs	r3, #20
 8003712:	e000      	b.n	8003716 <SX1276GetTimeOnAir+0x1f6>
 8003714:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800371a:	0018      	movs	r0, r3
 800371c:	f7fe ffea 	bl	80026f4 <__aeabi_ui2d>
 8003720:	0004      	movs	r4, r0
 8003722:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8003724:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 8003726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003728:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 800372a:	2148      	movs	r1, #72	; 0x48
 800372c:	5c5b      	ldrb	r3, [r3, r1]
 800372e:	2b00      	cmp	r3, #0
 8003730:	dd01      	ble.n	8003736 <SX1276GetTimeOnAir+0x216>
 8003732:	2302      	movs	r3, #2
 8003734:	e000      	b.n	8003738 <SX1276GetTimeOnAir+0x218>
 8003736:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	0018      	movs	r0, r3
 800373e:	f7fe ffd9 	bl	80026f4 <__aeabi_ui2d>
 8003742:	0002      	movs	r2, r0
 8003744:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003746:	0020      	movs	r0, r4
 8003748:	0029      	movs	r1, r5
 800374a:	f7fd fd93 	bl	8001274 <__aeabi_ddiv>
 800374e:	0003      	movs	r3, r0
 8003750:	000c      	movs	r4, r1
 8003752:	0018      	movs	r0, r3
 8003754:	0021      	movs	r1, r4
 8003756:	f008 fbf1 	bl	800bf3c <ceil>
 800375a:	0004      	movs	r4, r0
 800375c:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800375e:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <SX1276GetTimeOnAir+0x2f8>)
 8003760:	2249      	movs	r2, #73	; 0x49
 8003762:	5c9b      	ldrb	r3, [r3, r2]
 8003764:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003766:	0018      	movs	r0, r3
 8003768:	f7fe ff82 	bl	8002670 <__aeabi_i2d>
 800376c:	0002      	movs	r2, r0
 800376e:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003770:	0020      	movs	r0, r4
 8003772:	0029      	movs	r1, r5
 8003774:	f7fe f9b2 	bl	8001adc <__aeabi_dmul>
 8003778:	0003      	movs	r3, r0
 800377a:	000c      	movs	r4, r1
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8003780:	2200      	movs	r2, #0
 8003782:	2300      	movs	r3, #0
 8003784:	6a38      	ldr	r0, [r7, #32]
 8003786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003788:	f7fc fe5e 	bl	8000448 <__aeabi_dcmpgt>
 800378c:	1e03      	subs	r3, r0, #0
 800378e:	d008      	beq.n	80037a2 <SX1276GetTimeOnAir+0x282>
 8003790:	2200      	movs	r2, #0
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <SX1276GetTimeOnAir+0x300>)
 8003794:	6a38      	ldr	r0, [r7, #32]
 8003796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003798:	f7fd fa5c 	bl	8000c54 <__aeabi_dadd>
 800379c:	0003      	movs	r3, r0
 800379e:	000c      	movs	r4, r1
 80037a0:	e001      	b.n	80037a6 <SX1276GetTimeOnAir+0x286>
 80037a2:	2300      	movs	r3, #0
 80037a4:	4c1e      	ldr	r4, [pc, #120]	; (8003820 <SX1276GetTimeOnAir+0x300>)
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 80037aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ae:	69b8      	ldr	r0, [r7, #24]
 80037b0:	69f9      	ldr	r1, [r7, #28]
 80037b2:	f7fe f993 	bl	8001adc <__aeabi_dmul>
 80037b6:	0003      	movs	r3, r0
 80037b8:	000c      	movs	r4, r1
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037c6:	f7fd fa45 	bl	8000c54 <__aeabi_dadd>
 80037ca:	0003      	movs	r3, r0
 80037cc:	000c      	movs	r4, r1
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 80037d2:	2200      	movs	r2, #0
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <SX1276GetTimeOnAir+0x304>)
 80037d6:	68b8      	ldr	r0, [r7, #8]
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	f7fe f97f 	bl	8001adc <__aeabi_dmul>
 80037de:	0003      	movs	r3, r0
 80037e0:	000c      	movs	r4, r1
 80037e2:	0018      	movs	r0, r3
 80037e4:	0021      	movs	r1, r4
 80037e6:	4a14      	ldr	r2, [pc, #80]	; (8003838 <SX1276GetTimeOnAir+0x318>)
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <SX1276GetTimeOnAir+0x31c>)
 80037ea:	f7fd fa33 	bl	8000c54 <__aeabi_dadd>
 80037ee:	0003      	movs	r3, r0
 80037f0:	000c      	movs	r4, r1
 80037f2:	0018      	movs	r0, r3
 80037f4:	0021      	movs	r1, r4
 80037f6:	f008 fc23 	bl	800c040 <floor>
 80037fa:	0003      	movs	r3, r0
 80037fc:	000c      	movs	r4, r1
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003800:	64fc      	str	r4, [r7, #76]	; 0x4c
        }
        break;
 8003802:	46c0      	nop			; (mov r8, r8)
    }
    return (uint32_t) airTime;
 8003804:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003806:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003808:	f7fc fe6a 	bl	80004e0 <__aeabi_d2uiz>
 800380c:	0003      	movs	r3, r0
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b015      	add	sp, #84	; 0x54
 8003814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	20000514 	.word	0x20000514
 800381c:	3ff00000 	.word	0x3ff00000
 8003820:	40200000 	.word	0x40200000
 8003824:	408f4000 	.word	0x408f4000
 8003828:	40fe8480 	.word	0x40fe8480
 800382c:	410e8480 	.word	0x410e8480
 8003830:	411e8480 	.word	0x411e8480
 8003834:	40110000 	.word	0x40110000
 8003838:	d916872b 	.word	0xd916872b
 800383c:	3feff7ce 	.word	0x3feff7ce

08003840 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	000a      	movs	r2, r1
 800384a:	1cfb      	adds	r3, r7, #3
 800384c:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8003852:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <SX1276Send+0x178>)
 8003854:	795b      	ldrb	r3, [r3, #5]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <SX1276Send+0x20>
 800385a:	2b01      	cmp	r3, #1
 800385c:	d04c      	beq.n	80038f8 <SX1276Send+0xb8>
 800385e:	e0a2      	b.n	80039a6 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003860:	4b55      	ldr	r3, [pc, #340]	; (80039b8 <SX1276Send+0x178>)
 8003862:	2200      	movs	r2, #0
 8003864:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = size;
 8003866:	1cfb      	adds	r3, r7, #3
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b29a      	uxth	r2, r3
 800386c:	4b52      	ldr	r3, [pc, #328]	; (80039b8 <SX1276Send+0x178>)
 800386e:	86da      	strh	r2, [r3, #54]	; 0x36

            if( SX1276.Settings.Fsk.FixLen == false )
 8003870:	4b51      	ldr	r3, [pc, #324]	; (80039b8 <SX1276Send+0x178>)
 8003872:	2222      	movs	r2, #34	; 0x22
 8003874:	5c9b      	ldrb	r3, [r3, r2]
 8003876:	2201      	movs	r2, #1
 8003878:	4053      	eors	r3, r2
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8003880:	1cfb      	adds	r3, r7, #3
 8003882:	2101      	movs	r1, #1
 8003884:	0018      	movs	r0, r3
 8003886:	f000 fd85 	bl	8004394 <SX1276WriteFifo>
 800388a:	e005      	b.n	8003898 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800388c:	1cfb      	adds	r3, r7, #3
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	0019      	movs	r1, r3
 8003892:	2032      	movs	r0, #50	; 0x32
 8003894:	f000 fcc9 	bl	800422a <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8003898:	1cfb      	adds	r3, r7, #3
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <SX1276Send+0x74>
 80038a0:	1cfb      	adds	r3, r7, #3
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d805      	bhi.n	80038b4 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80038a8:	1cfb      	adds	r3, r7, #3
 80038aa:	7819      	ldrb	r1, [r3, #0]
 80038ac:	4b42      	ldr	r3, [pc, #264]	; (80039b8 <SX1276Send+0x178>)
 80038ae:	223b      	movs	r2, #59	; 0x3b
 80038b0:	5499      	strb	r1, [r3, r2]
 80038b2:	e00b      	b.n	80038cc <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 80038b4:	1cfb      	adds	r3, r7, #3
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <SX1276Send+0x17c>)
 80038be:	0018      	movs	r0, r3
 80038c0:	f005 fedb 	bl	800967a <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80038c4:	4b3c      	ldr	r3, [pc, #240]	; (80039b8 <SX1276Send+0x178>)
 80038c6:	223b      	movs	r2, #59	; 0x3b
 80038c8:	2120      	movs	r1, #32
 80038ca:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80038cc:	4b3a      	ldr	r3, [pc, #232]	; (80039b8 <SX1276Send+0x178>)
 80038ce:	223b      	movs	r2, #59	; 0x3b
 80038d0:	5c9a      	ldrb	r2, [r3, r2]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0011      	movs	r1, r2
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 fd5c 	bl	8004394 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <SX1276Send+0x178>)
 80038de:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80038e0:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <SX1276Send+0x178>)
 80038e2:	213b      	movs	r1, #59	; 0x3b
 80038e4:	5c5b      	ldrb	r3, [r3, r1]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	18d3      	adds	r3, r2, r3
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	4b32      	ldr	r3, [pc, #200]	; (80039b8 <SX1276Send+0x178>)
 80038ee:	871a      	strh	r2, [r3, #56]	; 0x38
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80038f0:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <SX1276Send+0x178>)
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80038f6:	e056      	b.n	80039a6 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80038f8:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <SX1276Send+0x178>)
 80038fa:	2251      	movs	r2, #81	; 0x51
 80038fc:	5c9b      	ldrb	r3, [r3, r2]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d011      	beq.n	8003926 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003902:	2033      	movs	r0, #51	; 0x33
 8003904:	f000 fca5 	bl	8004252 <SX1276Read>
 8003908:	0003      	movs	r3, r0
 800390a:	001a      	movs	r2, r3
 800390c:	2341      	movs	r3, #65	; 0x41
 800390e:	439a      	bics	r2, r3
 8003910:	0013      	movs	r3, r2
 8003912:	b2db      	uxtb	r3, r3
 8003914:	0019      	movs	r1, r3
 8003916:	2033      	movs	r0, #51	; 0x33
 8003918:	f000 fc87 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800391c:	2119      	movs	r1, #25
 800391e:	203b      	movs	r0, #59	; 0x3b
 8003920:	f000 fc83 	bl	800422a <SX1276Write>
 8003924:	e013      	b.n	800394e <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003926:	2033      	movs	r0, #51	; 0x33
 8003928:	f000 fc93 	bl	8004252 <SX1276Read>
 800392c:	0003      	movs	r3, r0
 800392e:	b25b      	sxtb	r3, r3
 8003930:	2241      	movs	r2, #65	; 0x41
 8003932:	4393      	bics	r3, r2
 8003934:	b25b      	sxtb	r3, r3
 8003936:	2201      	movs	r2, #1
 8003938:	4313      	orrs	r3, r2
 800393a:	b25b      	sxtb	r3, r3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	0019      	movs	r1, r3
 8003940:	2033      	movs	r0, #51	; 0x33
 8003942:	f000 fc72 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003946:	211d      	movs	r1, #29
 8003948:	203b      	movs	r0, #59	; 0x3b
 800394a:	f000 fc6e 	bl	800422a <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800394e:	1cfb      	adds	r3, r7, #3
 8003950:	7819      	ldrb	r1, [r3, #0]
 8003952:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <SX1276Send+0x178>)
 8003954:	225c      	movs	r2, #92	; 0x5c
 8003956:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003958:	1cfb      	adds	r3, r7, #3
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	0019      	movs	r1, r3
 800395e:	2022      	movs	r0, #34	; 0x22
 8003960:	f000 fc63 	bl	800422a <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003964:	2100      	movs	r1, #0
 8003966:	200e      	movs	r0, #14
 8003968:	f000 fc5f 	bl	800422a <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800396c:	2100      	movs	r1, #0
 800396e:	200d      	movs	r0, #13
 8003970:	f000 fc5b 	bl	800422a <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8003974:	2001      	movs	r0, #1
 8003976:	f000 fc6c 	bl	8004252 <SX1276Read>
 800397a:	0003      	movs	r3, r0
 800397c:	001a      	movs	r2, r3
 800397e:	23f8      	movs	r3, #248	; 0xf8
 8003980:	439a      	bics	r2, r3
 8003982:	1e13      	subs	r3, r2, #0
 8003984:	d104      	bne.n	8003990 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8003986:	f000 f835 	bl	80039f4 <SX1276SetStby>
                DelayMs( 1 );
 800398a:	2001      	movs	r0, #1
 800398c:	f005 fbec 	bl	8009168 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8003990:	1cfb      	adds	r3, r7, #3
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	0011      	movs	r1, r2
 8003998:	0018      	movs	r0, r3
 800399a:	f000 fcfb 	bl	8004394 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <SX1276Send+0x178>)
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80039a4:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 fa25 	bl	8003df8 <SX1276SetTx>
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b004      	add	sp, #16
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	20000514 	.word	0x20000514
 80039bc:	200000b0 	.word	0x200000b0

080039c0 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <SX1276SetSleep+0x28>)
 80039c6:	0018      	movs	r0, r3
 80039c8:	f005 fd7a 	bl	80094c0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <SX1276SetSleep+0x2c>)
 80039ce:	0018      	movs	r0, r3
 80039d0:	f005 fd76 	bl	80094c0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80039d4:	2000      	movs	r0, #0
 80039d6:	f000 fb9d 	bl	8004114 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SX1276SetSleep+0x30>)
 80039dc:	2200      	movs	r2, #0
 80039de:	711a      	strb	r2, [r3, #4]
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	20000574 	.word	0x20000574
 80039ec:	200004ec 	.word	0x200004ec
 80039f0:	20000514 	.word	0x20000514

080039f4 <SX1276SetStby>:

void SX1276SetStby( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <SX1276SetStby+0x28>)
 80039fa:	0018      	movs	r0, r3
 80039fc:	f005 fd60 	bl	80094c0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <SX1276SetStby+0x2c>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f005 fd5c 	bl	80094c0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8003a08:	2001      	movs	r0, #1
 8003a0a:	f000 fb83 	bl	8004114 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <SX1276SetStby+0x30>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	711a      	strb	r2, [r3, #4]
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	20000574 	.word	0x20000574
 8003a20:	200004ec 	.word	0x200004ec
 8003a24:	20000514 	.word	0x20000514

08003a28 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8003a30:	230f      	movs	r3, #15
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 8003a38:	4be0      	ldr	r3, [pc, #896]	; (8003dbc <SX1276SetRx+0x394>)
 8003a3a:	795b      	ldrb	r3, [r3, #5]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <SX1276SetRx+0x1e>
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d041      	beq.n	8003ac8 <SX1276SetRx+0xa0>
 8003a44:	e128      	b.n	8003c98 <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8003a46:	230f      	movs	r3, #15
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	4adc      	ldr	r2, [pc, #880]	; (8003dbc <SX1276SetRx+0x394>)
 8003a4c:	2126      	movs	r1, #38	; 0x26
 8003a4e:	5c52      	ldrb	r2, [r2, r1]
 8003a50:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003a52:	2040      	movs	r0, #64	; 0x40
 8003a54:	f000 fbfd 	bl	8004252 <SX1276Read>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	4013      	ands	r3, r2
 8003a60:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8003a62:	220c      	movs	r2, #12
 8003a64:	4313      	orrs	r3, r2
 8003a66:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	2040      	movs	r0, #64	; 0x40
 8003a6e:	f000 fbdc 	bl	800422a <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003a72:	2041      	movs	r0, #65	; 0x41
 8003a74:	f000 fbed 	bl	8004252 <SX1276Read>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	233f      	movs	r3, #63	; 0x3f
 8003a7e:	425b      	negs	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	0019      	movs	r1, r3
 8003a86:	2041      	movs	r0, #65	; 0x41
 8003a88:	f000 fbcf 	bl	800422a <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003a8c:	2035      	movs	r0, #53	; 0x35
 8003a8e:	f000 fbe0 	bl	8004252 <SX1276Read>
 8003a92:	0003      	movs	r3, r0
 8003a94:	001a      	movs	r2, r3
 8003a96:	233f      	movs	r3, #63	; 0x3f
 8003a98:	4013      	ands	r3, r2
 8003a9a:	b2d9      	uxtb	r1, r3
 8003a9c:	4bc7      	ldr	r3, [pc, #796]	; (8003dbc <SX1276SetRx+0x394>)
 8003a9e:	223a      	movs	r2, #58	; 0x3a
 8003aa0:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8003aa2:	211e      	movs	r1, #30
 8003aa4:	200d      	movs	r0, #13
 8003aa6:	f000 fbc0 	bl	800422a <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003aaa:	4bc4      	ldr	r3, [pc, #784]	; (8003dbc <SX1276SetRx+0x394>)
 8003aac:	222c      	movs	r2, #44	; 0x2c
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003ab2:	4bc2      	ldr	r3, [pc, #776]	; (8003dbc <SX1276SetRx+0x394>)
 8003ab4:	222d      	movs	r2, #45	; 0x2d
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003aba:	4bc0      	ldr	r3, [pc, #768]	; (8003dbc <SX1276SetRx+0x394>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003ac0:	4bbe      	ldr	r3, [pc, #760]	; (8003dbc <SX1276SetRx+0x394>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        break;
 8003ac6:	e0e7      	b.n	8003c98 <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003ac8:	4bbc      	ldr	r3, [pc, #752]	; (8003dbc <SX1276SetRx+0x394>)
 8003aca:	2251      	movs	r2, #81	; 0x51
 8003acc:	5c9b      	ldrb	r3, [r3, r2]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003ad2:	2033      	movs	r0, #51	; 0x33
 8003ad4:	f000 fbbd 	bl	8004252 <SX1276Read>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	001a      	movs	r2, r3
 8003adc:	2341      	movs	r3, #65	; 0x41
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	2033      	movs	r0, #51	; 0x33
 8003ae6:	f000 fba0 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003aea:	2119      	movs	r1, #25
 8003aec:	203b      	movs	r0, #59	; 0x3b
 8003aee:	f000 fb9c 	bl	800422a <SX1276Write>
 8003af2:	e013      	b.n	8003b1c <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003af4:	2033      	movs	r0, #51	; 0x33
 8003af6:	f000 fbac 	bl	8004252 <SX1276Read>
 8003afa:	0003      	movs	r3, r0
 8003afc:	b25b      	sxtb	r3, r3
 8003afe:	2241      	movs	r2, #65	; 0x41
 8003b00:	4393      	bics	r3, r2
 8003b02:	b25b      	sxtb	r3, r3
 8003b04:	2201      	movs	r2, #1
 8003b06:	4313      	orrs	r3, r2
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	2033      	movs	r0, #51	; 0x33
 8003b10:	f000 fb8b 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003b14:	211d      	movs	r1, #29
 8003b16:	203b      	movs	r0, #59	; 0x3b
 8003b18:	f000 fb87 	bl	800422a <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003b1c:	4ba7      	ldr	r3, [pc, #668]	; (8003dbc <SX1276SetRx+0x394>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d900      	bls.n	8003b26 <SX1276SetRx+0xfe>
 8003b24:	e076      	b.n	8003c14 <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003b26:	2031      	movs	r0, #49	; 0x31
 8003b28:	f000 fb93 	bl	8004252 <SX1276Read>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	001a      	movs	r2, r3
 8003b30:	237f      	movs	r3, #127	; 0x7f
 8003b32:	4013      	ands	r3, r2
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	0019      	movs	r1, r3
 8003b38:	2031      	movs	r0, #49	; 0x31
 8003b3a:	f000 fb76 	bl	800422a <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 8003b3e:	2100      	movs	r1, #0
 8003b40:	2030      	movs	r0, #48	; 0x30
 8003b42:	f000 fb72 	bl	800422a <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8003b46:	4b9d      	ldr	r3, [pc, #628]	; (8003dbc <SX1276SetRx+0x394>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d86f      	bhi.n	8003c2e <SX1276SetRx+0x206>
 8003b4e:	009a      	lsls	r2, r3, #2
 8003b50:	4b9b      	ldr	r3, [pc, #620]	; (8003dc0 <SX1276SetRx+0x398>)
 8003b52:	18d3      	adds	r3, r2, r3
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 8003b58:	2148      	movs	r1, #72	; 0x48
 8003b5a:	202f      	movs	r0, #47	; 0x2f
 8003b5c:	f000 fb65 	bl	800422a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8003b60:	4b96      	ldr	r3, [pc, #600]	; (8003dbc <SX1276SetRx+0x394>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a97      	ldr	r2, [pc, #604]	; (8003dc4 <SX1276SetRx+0x39c>)
 8003b66:	4694      	mov	ip, r2
 8003b68:	4463      	add	r3, ip
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7fe ff8a 	bl	8002a84 <SX1276SetChannel>
                    break;
 8003b70:	e05d      	b.n	8003c2e <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003b72:	2144      	movs	r1, #68	; 0x44
 8003b74:	202f      	movs	r0, #47	; 0x2f
 8003b76:	f000 fb58 	bl	800422a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8003b7a:	4b90      	ldr	r3, [pc, #576]	; (8003dbc <SX1276SetRx+0x394>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	4a92      	ldr	r2, [pc, #584]	; (8003dc8 <SX1276SetRx+0x3a0>)
 8003b80:	4694      	mov	ip, r2
 8003b82:	4463      	add	r3, ip
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7fe ff7d 	bl	8002a84 <SX1276SetChannel>
                    break;
 8003b8a:	e050      	b.n	8003c2e <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003b8c:	2144      	movs	r1, #68	; 0x44
 8003b8e:	202f      	movs	r0, #47	; 0x2f
 8003b90:	f000 fb4b 	bl	800422a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8003b94:	4b89      	ldr	r3, [pc, #548]	; (8003dbc <SX1276SetRx+0x394>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a8c      	ldr	r2, [pc, #560]	; (8003dcc <SX1276SetRx+0x3a4>)
 8003b9a:	4694      	mov	ip, r2
 8003b9c:	4463      	add	r3, ip
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7fe ff70 	bl	8002a84 <SX1276SetChannel>
                    break;
 8003ba4:	e043      	b.n	8003c2e <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003ba6:	2144      	movs	r1, #68	; 0x44
 8003ba8:	202f      	movs	r0, #47	; 0x2f
 8003baa:	f000 fb3e 	bl	800422a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8003bae:	4b83      	ldr	r3, [pc, #524]	; (8003dbc <SX1276SetRx+0x394>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	4a87      	ldr	r2, [pc, #540]	; (8003dd0 <SX1276SetRx+0x3a8>)
 8003bb4:	4694      	mov	ip, r2
 8003bb6:	4463      	add	r3, ip
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7fe ff63 	bl	8002a84 <SX1276SetChannel>
                    break;
 8003bbe:	e036      	b.n	8003c2e <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003bc0:	2144      	movs	r1, #68	; 0x44
 8003bc2:	202f      	movs	r0, #47	; 0x2f
 8003bc4:	f000 fb31 	bl	800422a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8003bc8:	4b7c      	ldr	r3, [pc, #496]	; (8003dbc <SX1276SetRx+0x394>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a81      	ldr	r2, [pc, #516]	; (8003dd4 <SX1276SetRx+0x3ac>)
 8003bce:	4694      	mov	ip, r2
 8003bd0:	4463      	add	r3, ip
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7fe ff56 	bl	8002a84 <SX1276SetChannel>
                    break;
 8003bd8:	e029      	b.n	8003c2e <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003bda:	2144      	movs	r1, #68	; 0x44
 8003bdc:	202f      	movs	r0, #47	; 0x2f
 8003bde:	f000 fb24 	bl	800422a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <SX1276SetRx+0x394>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	4a7c      	ldr	r2, [pc, #496]	; (8003dd8 <SX1276SetRx+0x3b0>)
 8003be8:	4694      	mov	ip, r2
 8003bea:	4463      	add	r3, ip
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7fe ff49 	bl	8002a84 <SX1276SetChannel>
                    break;
 8003bf2:	e01c      	b.n	8003c2e <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	202f      	movs	r0, #47	; 0x2f
 8003bf8:	f000 fb17 	bl	800422a <SX1276Write>
                    break;
 8003bfc:	e017      	b.n	8003c2e <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8003bfe:	2140      	movs	r1, #64	; 0x40
 8003c00:	202f      	movs	r0, #47	; 0x2f
 8003c02:	f000 fb12 	bl	800422a <SX1276Write>
                    break;
 8003c06:	e012      	b.n	8003c2e <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8003c08:	2140      	movs	r1, #64	; 0x40
 8003c0a:	202f      	movs	r0, #47	; 0x2f
 8003c0c:	f000 fb0d 	bl	800422a <SX1276Write>
                    break;
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	e00c      	b.n	8003c2e <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8003c14:	2031      	movs	r0, #49	; 0x31
 8003c16:	f000 fb1c 	bl	8004252 <SX1276Read>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	001a      	movs	r2, r3
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	425b      	negs	r3, r3
 8003c22:	4313      	orrs	r3, r2
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	0019      	movs	r1, r3
 8003c28:	2031      	movs	r0, #49	; 0x31
 8003c2a:	f000 fafe 	bl	800422a <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8003c2e:	230f      	movs	r3, #15
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	4a62      	ldr	r2, [pc, #392]	; (8003dbc <SX1276SetRx+0x394>)
 8003c34:	2152      	movs	r1, #82	; 0x52
 8003c36:	5c52      	ldrb	r2, [r2, r1]
 8003c38:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003c3a:	4b60      	ldr	r3, [pc, #384]	; (8003dbc <SX1276SetRx+0x394>)
 8003c3c:	224f      	movs	r2, #79	; 0x4f
 8003c3e:	5c9b      	ldrb	r3, [r3, r2]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d010      	beq.n	8003c66 <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003c44:	211d      	movs	r1, #29
 8003c46:	2011      	movs	r0, #17
 8003c48:	f000 faef 	bl	800422a <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003c4c:	2040      	movs	r0, #64	; 0x40
 8003c4e:	f000 fb00 	bl	8004252 <SX1276Read>
 8003c52:	0003      	movs	r3, r0
 8003c54:	001a      	movs	r2, r3
 8003c56:	2333      	movs	r3, #51	; 0x33
 8003c58:	4013      	ands	r3, r2
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	2040      	movs	r0, #64	; 0x40
 8003c60:	f000 fae3 	bl	800422a <SX1276Write>
 8003c64:	e00f      	b.n	8003c86 <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003c66:	211f      	movs	r1, #31
 8003c68:	2011      	movs	r0, #17
 8003c6a:	f000 fade 	bl	800422a <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8003c6e:	2040      	movs	r0, #64	; 0x40
 8003c70:	f000 faef 	bl	8004252 <SX1276Read>
 8003c74:	0003      	movs	r3, r0
 8003c76:	001a      	movs	r2, r3
 8003c78:	233f      	movs	r3, #63	; 0x3f
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	0019      	movs	r1, r3
 8003c80:	2040      	movs	r0, #64	; 0x40
 8003c82:	f000 fad2 	bl	800422a <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8003c86:	2100      	movs	r1, #0
 8003c88:	200f      	movs	r0, #15
 8003c8a:	f000 face 	bl	800422a <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8003c8e:	2100      	movs	r1, #0
 8003c90:	200d      	movs	r0, #13
 8003c92:	f000 faca 	bl	800422a <SX1276Write>
        }
        break;
 8003c96:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	005a      	lsls	r2, r3, #1
 8003c9c:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <SX1276SetRx+0x3b4>)
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f007 fcfa 	bl	800b69a <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8003ca6:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <SX1276SetRx+0x394>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <SX1276SetRx+0x3b8>)
 8003cb6:	0011      	movs	r1, r2
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f005 fc95 	bl	80095e8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8003cbe:	4b48      	ldr	r3, [pc, #288]	; (8003de0 <SX1276SetRx+0x3b8>)
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f005 fae7 	bl	8009294 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8003cc6:	4b3d      	ldr	r3, [pc, #244]	; (8003dbc <SX1276SetRx+0x394>)
 8003cc8:	795b      	ldrb	r3, [r3, #5]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d165      	bne.n	8003d9a <SX1276SetRx+0x372>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003cce:	2005      	movs	r0, #5
 8003cd0:	f000 fa20 	bl	8004114 <SX1276SetOpMode>

        if( rxContinuous == false )
 8003cd4:	230f      	movs	r3, #15
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4053      	eors	r3, r2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d066      	beq.n	8003db2 <SX1276SetRx+0x38a>
        {
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <SX1276SetRx+0x394>)
 8003ce6:	8c1b      	ldrh	r3, [r3, #32]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7fe fcc1 	bl	8002670 <__aeabi_i2d>
 8003cee:	0004      	movs	r4, r0
 8003cf0:	000d      	movs	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 8003cf2:	2027      	movs	r0, #39	; 0x27
 8003cf4:	f000 faad 	bl	8004252 <SX1276Read>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	23f8      	movs	r3, #248	; 0xf8
 8003cfe:	439a      	bics	r2, r3
 8003d00:	0013      	movs	r3, r2
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7fe fcb4 	bl	8002670 <__aeabi_i2d>
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <SX1276SetRx+0x3bc>)
 8003d0c:	f7fc ffa2 	bl	8000c54 <__aeabi_dadd>
 8003d10:	0002      	movs	r2, r0
 8003d12:	000b      	movs	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8003d14:	0020      	movs	r0, r4
 8003d16:	0029      	movs	r1, r5
 8003d18:	f7fc ff9c 	bl	8000c54 <__aeabi_dadd>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	000c      	movs	r4, r1
 8003d20:	0018      	movs	r0, r3
 8003d22:	0021      	movs	r1, r4
                                                                1.0 ) + 10.0 ) /
 8003d24:	2200      	movs	r2, #0
 8003d26:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <SX1276SetRx+0x3c0>)
 8003d28:	f7fc ff94 	bl	8000c54 <__aeabi_dadd>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	000c      	movs	r4, r1
 8003d30:	0018      	movs	r0, r3
 8003d32:	0021      	movs	r1, r4
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8003d34:	2200      	movs	r2, #0
 8003d36:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <SX1276SetRx+0x3c4>)
 8003d38:	f7fd fed0 	bl	8001adc <__aeabi_dmul>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	000c      	movs	r4, r1
 8003d40:	0025      	movs	r5, r4
 8003d42:	001c      	movs	r4, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <SX1276SetRx+0x394>)
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7fe fcd3 	bl	80026f4 <__aeabi_ui2d>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	000b      	movs	r3, r1
                                                                1.0 ) + 10.0 ) /
 8003d52:	0020      	movs	r0, r4
 8003d54:	0029      	movs	r1, r5
 8003d56:	f7fd fa8d 	bl	8001274 <__aeabi_ddiv>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	000c      	movs	r4, r1
 8003d5e:	0018      	movs	r0, r3
 8003d60:	0021      	movs	r1, r4
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8003d62:	2200      	movs	r2, #0
 8003d64:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <SX1276SetRx+0x3c8>)
 8003d66:	f7fd feb9 	bl	8001adc <__aeabi_dmul>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	000c      	movs	r4, r1
 8003d6e:	0018      	movs	r0, r3
 8003d70:	0021      	movs	r1, r4
 8003d72:	f008 f8e3 	bl	800bf3c <ceil>
 8003d76:	0003      	movs	r3, r0
 8003d78:	000c      	movs	r4, r1
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	0021      	movs	r1, r4
 8003d7e:	f7fc fbaf 	bl	80004e0 <__aeabi_d2uiz>
 8003d82:	0003      	movs	r3, r0
 8003d84:	1d1a      	adds	r2, r3, #4
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <SX1276SetRx+0x3cc>)
 8003d88:	0011      	movs	r1, r2
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f005 fc2c 	bl	80095e8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <SX1276SetRx+0x3cc>)
 8003d92:	0018      	movs	r0, r3
 8003d94:	f005 fa7e 	bl	8009294 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8003d98:	e00b      	b.n	8003db2 <SX1276SetRx+0x38a>
        if( rxContinuous == true )
 8003d9a:	230f      	movs	r3, #15
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <SX1276SetRx+0x384>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8003da4:	2005      	movs	r0, #5
 8003da6:	f000 f9b5 	bl	8004114 <SX1276SetOpMode>
}
 8003daa:	e002      	b.n	8003db2 <SX1276SetRx+0x38a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8003dac:	2006      	movs	r0, #6
 8003dae:	f000 f9b1 	bl	8004114 <SX1276SetOpMode>
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	20000514 	.word	0x20000514
 8003dc0:	0800c40c 	.word	0x0800c40c
 8003dc4:	00001e82 	.word	0x00001e82
 8003dc8:	000028b4 	.word	0x000028b4
 8003dcc:	00003d04 	.word	0x00003d04
 8003dd0:	0000515e 	.word	0x0000515e
 8003dd4:	00007a12 	.word	0x00007a12
 8003dd8:	0000a2c6 	.word	0x0000a2c6
 8003ddc:	200000b0 	.word	0x200000b0
 8003de0:	20000574 	.word	0x20000574
 8003de4:	3ff00000 	.word	0x3ff00000
 8003de8:	40240000 	.word	0x40240000
 8003dec:	40200000 	.word	0x40200000
 8003df0:	408f4000 	.word	0x408f4000
 8003df4:	20000500 	.word	0x20000500

08003df8 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4b38      	ldr	r3, [pc, #224]	; (8003ee4 <SX1276SetTx+0xec>)
 8003e04:	0011      	movs	r1, r2
 8003e06:	0018      	movs	r0, r3
 8003e08:	f005 fbee 	bl	80095e8 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <SX1276SetTx+0xf0>)
 8003e0e:	795b      	ldrb	r3, [r3, #5]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <SX1276SetTx+0x22>
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d028      	beq.n	8003e6a <SX1276SetTx+0x72>
 8003e18:	e056      	b.n	8003ec8 <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003e1a:	2040      	movs	r0, #64	; 0x40
 8003e1c:	f000 fa19 	bl	8004252 <SX1276Read>
 8003e20:	0003      	movs	r3, r0
 8003e22:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8003e24:	2203      	movs	r2, #3
 8003e26:	4013      	ands	r3, r2
 8003e28:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	0019      	movs	r1, r3
 8003e34:	2040      	movs	r0, #64	; 0x40
 8003e36:	f000 f9f8 	bl	800422a <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003e3a:	2041      	movs	r0, #65	; 0x41
 8003e3c:	f000 fa09 	bl	8004252 <SX1276Read>
 8003e40:	0003      	movs	r3, r0
 8003e42:	001a      	movs	r2, r3
 8003e44:	233e      	movs	r3, #62	; 0x3e
 8003e46:	4013      	ands	r3, r2
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	0019      	movs	r1, r3
 8003e4c:	2041      	movs	r0, #65	; 0x41
 8003e4e:	f000 f9ec 	bl	800422a <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003e52:	2035      	movs	r0, #53	; 0x35
 8003e54:	f000 f9fd 	bl	8004252 <SX1276Read>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	233f      	movs	r3, #63	; 0x3f
 8003e5e:	4013      	ands	r3, r2
 8003e60:	b2d9      	uxtb	r1, r3
 8003e62:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <SX1276SetTx+0xf0>)
 8003e64:	223a      	movs	r2, #58	; 0x3a
 8003e66:	5499      	strb	r1, [r3, r2]
        }
        break;
 8003e68:	e02e      	b.n	8003ec8 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <SX1276SetTx+0xf0>)
 8003e6c:	224f      	movs	r2, #79	; 0x4f
 8003e6e:	5c9b      	ldrb	r3, [r3, r2]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d014      	beq.n	8003e9e <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003e74:	21f5      	movs	r1, #245	; 0xf5
 8003e76:	2011      	movs	r0, #17
 8003e78:	f000 f9d7 	bl	800422a <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8003e7c:	2040      	movs	r0, #64	; 0x40
 8003e7e:	f000 f9e8 	bl	8004252 <SX1276Read>
 8003e82:	0003      	movs	r3, r0
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	2233      	movs	r2, #51	; 0x33
 8003e88:	4013      	ands	r3, r2
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	2240      	movs	r2, #64	; 0x40
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	0019      	movs	r1, r3
 8003e96:	2040      	movs	r0, #64	; 0x40
 8003e98:	f000 f9c7 	bl	800422a <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8003e9c:	e013      	b.n	8003ec6 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003e9e:	21f7      	movs	r1, #247	; 0xf7
 8003ea0:	2011      	movs	r0, #17
 8003ea2:	f000 f9c2 	bl	800422a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003ea6:	2040      	movs	r0, #64	; 0x40
 8003ea8:	f000 f9d3 	bl	8004252 <SX1276Read>
 8003eac:	0003      	movs	r3, r0
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	223f      	movs	r2, #63	; 0x3f
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	2240      	movs	r2, #64	; 0x40
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	b25b      	sxtb	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	2040      	movs	r0, #64	; 0x40
 8003ec2:	f000 f9b2 	bl	800422a <SX1276Write>
        break;
 8003ec6:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8003ec8:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <SX1276SetTx+0xf0>)
 8003eca:	2202      	movs	r2, #2
 8003ecc:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <SX1276SetTx+0xec>)
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f005 f9df 	bl	8009294 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003ed6:	2003      	movs	r0, #3
 8003ed8:	f000 f91c 	bl	8004114 <SX1276SetOpMode>
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	200004ec 	.word	0x200004ec
 8003ee8:	20000514 	.word	0x20000514

08003eec <SX1276StartCad>:

void SX1276StartCad( void )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <SX1276StartCad+0x4c>)
 8003ef2:	795b      	ldrb	r3, [r3, #5]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01a      	beq.n	8003f2e <SX1276StartCad+0x42>
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d000      	beq.n	8003efe <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8003efc:	e018      	b.n	8003f30 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003efe:	21fa      	movs	r1, #250	; 0xfa
 8003f00:	2011      	movs	r0, #17
 8003f02:	f000 f992 	bl	800422a <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8003f06:	2040      	movs	r0, #64	; 0x40
 8003f08:	f000 f9a3 	bl	8004252 <SX1276Read>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	001a      	movs	r2, r3
 8003f10:	2303      	movs	r3, #3
 8003f12:	439a      	bics	r2, r3
 8003f14:	0013      	movs	r3, r2
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	0019      	movs	r1, r3
 8003f1a:	2040      	movs	r0, #64	; 0x40
 8003f1c:	f000 f985 	bl	800422a <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <SX1276StartCad+0x4c>)
 8003f22:	2203      	movs	r2, #3
 8003f24:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8003f26:	2007      	movs	r0, #7
 8003f28:	f000 f8f4 	bl	8004114 <SX1276SetOpMode>
        break;
 8003f2c:	e000      	b.n	8003f30 <SX1276StartCad+0x44>
        break;
 8003f2e:	46c0      	nop			; (mov r8, r8)
    }
}
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	20000514 	.word	0x20000514

08003f3c <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b08f      	sub	sp, #60	; 0x3c
 8003f40:	af0a      	add	r7, sp, #40	; 0x28
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	0008      	movs	r0, r1
 8003f46:	0011      	movs	r1, r2
 8003f48:	1cfb      	adds	r3, r7, #3
 8003f4a:	1c02      	adds	r2, r0, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	003b      	movs	r3, r7
 8003f50:	1c0a      	adds	r2, r1, #0
 8003f52:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 8003f54:	003b      	movs	r3, r7
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7fe fb89 	bl	8002670 <__aeabi_i2d>
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4b29      	ldr	r3, [pc, #164]	; (8004008 <SX1276SetTxContinuousWave+0xcc>)
 8003f62:	f7fd fdbb 	bl	8001adc <__aeabi_dmul>
 8003f66:	0003      	movs	r3, r0
 8003f68:	000c      	movs	r4, r1
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	0021      	movs	r1, r4
 8003f6e:	f7fc fab7 	bl	80004e0 <__aeabi_d2uiz>
 8003f72:	0003      	movs	r3, r0
 8003f74:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7fe fd83 	bl	8002a84 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8003f7e:	1cfb      	adds	r3, r7, #3
 8003f80:	2100      	movs	r1, #0
 8003f82:	5659      	ldrsb	r1, [r3, r1]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	9308      	str	r3, [sp, #32]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9307      	str	r3, [sp, #28]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9306      	str	r3, [sp, #24]
 8003f90:	2300      	movs	r3, #0
 8003f92:	9305      	str	r3, [sp, #20]
 8003f94:	2300      	movs	r3, #0
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9303      	str	r3, [sp, #12]
 8003f9c:	2305      	movs	r3, #5
 8003f9e:	9302      	str	r3, [sp, #8]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	2396      	movs	r3, #150	; 0x96
 8003fa6:	015b      	lsls	r3, r3, #5
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2300      	movs	r3, #0
 8003fac:	2200      	movs	r2, #0
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f7ff f8e6 	bl	8003180 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8003fb4:	2031      	movs	r0, #49	; 0x31
 8003fb6:	f000 f94c 	bl	8004252 <SX1276Read>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	001a      	movs	r2, r3
 8003fbe:	2340      	movs	r3, #64	; 0x40
 8003fc0:	439a      	bics	r2, r3
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	2031      	movs	r0, #49	; 0x31
 8003fca:	f000 f92e 	bl	800422a <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8003fce:	21f0      	movs	r1, #240	; 0xf0
 8003fd0:	2040      	movs	r0, #64	; 0x40
 8003fd2:	f000 f92a 	bl	800422a <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8003fd6:	21a0      	movs	r1, #160	; 0xa0
 8003fd8:	2041      	movs	r0, #65	; 0x41
 8003fda:	f000 f926 	bl	800422a <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <SX1276SetTxContinuousWave+0xd0>)
 8003fe2:	0011      	movs	r1, r2
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f005 faff 	bl	80095e8 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <SX1276SetTxContinuousWave+0xd4>)
 8003fec:	2202      	movs	r2, #2
 8003fee:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <SX1276SetTxContinuousWave+0xd0>)
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f005 f94e 	bl	8009294 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003ff8:	2003      	movs	r0, #3
 8003ffa:	f000 f88b 	bl	8004114 <SX1276SetOpMode>
}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b005      	add	sp, #20
 8004004:	bd90      	pop	{r4, r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	408f4000 	.word	0x408f4000
 800400c:	200004ec 	.word	0x200004ec
 8004010:	20000514 	.word	0x20000514

08004014 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	0002      	movs	r2, r0
 800401c:	1dfb      	adds	r3, r7, #7
 800401e:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8004020:	230e      	movs	r3, #14
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	2200      	movs	r2, #0
 8004026:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8004028:	1dfb      	adds	r3, r7, #7
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <SX1276ReadRssi+0x22>
 8004030:	2b01      	cmp	r3, #1
 8004032:	d00d      	beq.n	8004050 <SX1276ReadRssi+0x3c>
 8004034:	e027      	b.n	8004086 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004036:	2011      	movs	r0, #17
 8004038:	f000 f90b 	bl	8004252 <SX1276Read>
 800403c:	0003      	movs	r3, r0
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	b29b      	uxth	r3, r3
 8004044:	425b      	negs	r3, r3
 8004046:	b29a      	uxth	r2, r3
 8004048:	230e      	movs	r3, #14
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	801a      	strh	r2, [r3, #0]
        break;
 800404e:	e020      	b.n	8004092 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <SX1276ReadRssi+0x90>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <SX1276ReadRssi+0x94>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d90a      	bls.n	8004070 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800405a:	201b      	movs	r0, #27
 800405c:	f000 f8f9 	bl	8004252 <SX1276Read>
 8004060:	0003      	movs	r3, r0
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b9d      	subs	r3, #157	; 0x9d
 8004066:	b29a      	uxth	r2, r3
 8004068:	230e      	movs	r3, #14
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 800406e:	e010      	b.n	8004092 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004070:	201b      	movs	r0, #27
 8004072:	f000 f8ee 	bl	8004252 <SX1276Read>
 8004076:	0003      	movs	r3, r0
 8004078:	b29b      	uxth	r3, r3
 800407a:	3ba4      	subs	r3, #164	; 0xa4
 800407c:	b29a      	uxth	r2, r3
 800407e:	230e      	movs	r3, #14
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	801a      	strh	r2, [r3, #0]
        break;
 8004084:	e005      	b.n	8004092 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8004086:	230e      	movs	r3, #14
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	2201      	movs	r2, #1
 800408c:	4252      	negs	r2, r2
 800408e:	801a      	strh	r2, [r3, #0]
        break;
 8004090:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 8004092:	230e      	movs	r3, #14
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	2200      	movs	r2, #0
 8004098:	5e9b      	ldrsh	r3, [r3, r2]
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	b004      	add	sp, #16
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	20000514 	.word	0x20000514
 80040a8:	1f4add40 	.word	0x1f4add40

080040ac <SX1276Reset>:

void SX1276Reset( void )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 80040b2:	1d3b      	adds	r3, r7, #4
 80040b4:	0018      	movs	r0, r3
 80040b6:	2314      	movs	r3, #20
 80040b8:	001a      	movs	r2, r3
 80040ba:	2100      	movs	r1, #0
 80040bc:	f007 faed 	bl	800b69a <memset>

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	2201      	movs	r2, #1
 80040c4:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 80040cc:	1d3b      	adds	r3, r7, #4
 80040ce:	2203      	movs	r2, #3
 80040d0:	60da      	str	r2, [r3, #12]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	480e      	ldr	r0, [pc, #56]	; (8004110 <SX1276Reset+0x64>)
 80040d6:	001a      	movs	r2, r3
 80040d8:	2101      	movs	r1, #1
 80040da:	f005 fb99 	bl	8009810 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <SX1276Reset+0x64>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	2101      	movs	r1, #1
 80040e4:	0018      	movs	r0, r3
 80040e6:	f005 fc5f 	bl	80099a8 <HW_GPIO_Write>


    // Wait 1 ms
    DelayMs( 1 );
 80040ea:	2001      	movs	r0, #1
 80040ec:	f005 f83c 	bl	8009168 <DelayMs>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	2200      	movs	r2, #0
 80040f4:	605a      	str	r2, [r3, #4]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 80040f6:	1d3b      	adds	r3, r7, #4
 80040f8:	4805      	ldr	r0, [pc, #20]	; (8004110 <SX1276Reset+0x64>)
 80040fa:	001a      	movs	r2, r3
 80040fc:	2101      	movs	r1, #1
 80040fe:	f005 fb87 	bl	8009810 <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8004102:	2006      	movs	r0, #6
 8004104:	f005 f830 	bl	8009168 <DelayMs>
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b006      	add	sp, #24
 800410e:	bd80      	pop	{r7, pc}
 8004110:	50000800 	.word	0x50000800

08004114 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	0002      	movs	r2, r0
 800411c:	1dfb      	adds	r3, r7, #7
 800411e:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8004120:	1dfb      	adds	r3, r7, #7
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <SX1276SetOpMode+0x1c>
    {
        SX1276SetAntSwLowPower( true );
 8004128:	2001      	movs	r0, #1
 800412a:	f000 ffaf 	bl	800508c <SX1276SetAntSwLowPower>
 800412e:	e007      	b.n	8004140 <SX1276SetOpMode+0x2c>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 8004130:	2000      	movs	r0, #0
 8004132:	f000 ffab 	bl	800508c <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8004136:	1dfb      	adds	r3, r7, #7
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	0018      	movs	r0, r3
 800413c:	f001 f86a 	bl	8005214 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004140:	2001      	movs	r0, #1
 8004142:	f000 f886 	bl	8004252 <SX1276Read>
 8004146:	0003      	movs	r3, r0
 8004148:	b25b      	sxtb	r3, r3
 800414a:	2207      	movs	r2, #7
 800414c:	4393      	bics	r3, r2
 800414e:	b25a      	sxtb	r2, r3
 8004150:	1dfb      	adds	r3, r7, #7
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b25b      	sxtb	r3, r3
 8004156:	4313      	orrs	r3, r2
 8004158:	b25b      	sxtb	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	0019      	movs	r1, r3
 800415e:	2001      	movs	r0, #1
 8004160:	f000 f863 	bl	800422a <SX1276Write>
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	b002      	add	sp, #8
 800416a:	bd80      	pop	{r7, pc}

0800416c <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	0002      	movs	r2, r0
 8004174:	1dfb      	adds	r3, r7, #7
 8004176:	701a      	strb	r2, [r3, #0]

    if( SX1276.Settings.Modem == modem )
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <SX1276SetModem+0x94>)
 800417a:	795b      	ldrb	r3, [r3, #5]
 800417c:	1dfa      	adds	r2, r7, #7
 800417e:	7812      	ldrb	r2, [r2, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d039      	beq.n	80041f8 <SX1276SetModem+0x8c>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8004184:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <SX1276SetModem+0x94>)
 8004186:	1dfa      	adds	r2, r7, #7
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 800418c:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <SX1276SetModem+0x94>)
 800418e:	795b      	ldrb	r3, [r3, #5]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d017      	beq.n	80041c4 <SX1276SetModem+0x58>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004194:	2000      	movs	r0, #0
 8004196:	f7ff ffbd 	bl	8004114 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800419a:	2001      	movs	r0, #1
 800419c:	f000 f859 	bl	8004252 <SX1276Read>
 80041a0:	0003      	movs	r3, r0
 80041a2:	001a      	movs	r2, r3
 80041a4:	237f      	movs	r3, #127	; 0x7f
 80041a6:	4013      	ands	r3, r2
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	0019      	movs	r1, r3
 80041ac:	2001      	movs	r0, #1
 80041ae:	f000 f83c 	bl	800422a <SX1276Write>
    
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80041b2:	2100      	movs	r1, #0
 80041b4:	2040      	movs	r0, #64	; 0x40
 80041b6:	f000 f838 	bl	800422a <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80041ba:	2130      	movs	r1, #48	; 0x30
 80041bc:	2041      	movs	r0, #65	; 0x41
 80041be:	f000 f834 	bl	800422a <SX1276Write>
        break;
 80041c2:	e01a      	b.n	80041fa <SX1276SetModem+0x8e>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80041c4:	2000      	movs	r0, #0
 80041c6:	f7ff ffa5 	bl	8004114 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80041ca:	2001      	movs	r0, #1
 80041cc:	f000 f841 	bl	8004252 <SX1276Read>
 80041d0:	0003      	movs	r3, r0
 80041d2:	001a      	movs	r2, r3
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	425b      	negs	r3, r3
 80041d8:	4313      	orrs	r3, r2
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	0019      	movs	r1, r3
 80041de:	2001      	movs	r0, #1
 80041e0:	f000 f823 	bl	800422a <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80041e4:	2100      	movs	r1, #0
 80041e6:	2040      	movs	r0, #64	; 0x40
 80041e8:	f000 f81f 	bl	800422a <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80041ec:	2100      	movs	r1, #0
 80041ee:	2041      	movs	r0, #65	; 0x41
 80041f0:	f000 f81b 	bl	800422a <SX1276Write>
        break;
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	e000      	b.n	80041fa <SX1276SetModem+0x8e>
        return;
 80041f8:	46c0      	nop			; (mov r8, r8)
    }
}
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b002      	add	sp, #8
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000514 	.word	0x20000514

08004204 <SX1276SetSyncWord>:

void SX1276SetSyncWord( uint8_t data )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	0002      	movs	r2, r0
 800420c:	1dfb      	adds	r3, r7, #7
 800420e:	701a      	strb	r2, [r3, #0]
  SX1276SetModem( MODEM_LORA );
 8004210:	2001      	movs	r0, #1
 8004212:	f7ff ffab 	bl	800416c <SX1276SetModem>

  SX1276Write( REG_LR_SYNCWORD, data);
 8004216:	1dfb      	adds	r3, r7, #7
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	0019      	movs	r1, r3
 800421c:	2039      	movs	r0, #57	; 0x39
 800421e:	f000 f804 	bl	800422a <SX1276Write>
}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	46bd      	mov	sp, r7
 8004226:	b002      	add	sp, #8
 8004228:	bd80      	pop	{r7, pc}

0800422a <SX1276Write>:


void SX1276Write( uint8_t addr, uint8_t data )
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	0002      	movs	r2, r0
 8004232:	1dfb      	adds	r3, r7, #7
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	1dbb      	adds	r3, r7, #6
 8004238:	1c0a      	adds	r2, r1, #0
 800423a:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 800423c:	1db9      	adds	r1, r7, #6
 800423e:	1dfb      	adds	r3, r7, #7
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2201      	movs	r2, #1
 8004244:	0018      	movs	r0, r3
 8004246:	f000 f819 	bl	800427c <SX1276WriteBuffer>
}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b002      	add	sp, #8
 8004250:	bd80      	pop	{r7, pc}

08004252 <SX1276Read>:


uint8_t SX1276Read( uint8_t addr )
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	0002      	movs	r2, r0
 800425a:	1dfb      	adds	r3, r7, #7
 800425c:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800425e:	230f      	movs	r3, #15
 8004260:	18f9      	adds	r1, r7, r3
 8004262:	1dfb      	adds	r3, r7, #7
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	0018      	movs	r0, r3
 800426a:	f000 f84d 	bl	8004308 <SX1276ReadBuffer>
    return data;
 800426e:	230f      	movs	r3, #15
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	781b      	ldrb	r3, [r3, #0]
}
 8004274:	0018      	movs	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	b004      	add	sp, #16
 800427a:	bd80      	pop	{r7, pc}

0800427c <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6039      	str	r1, [r7, #0]
 8004284:	0011      	movs	r1, r2
 8004286:	1dfb      	adds	r3, r7, #7
 8004288:	1c02      	adds	r2, r0, #0
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	1dbb      	adds	r3, r7, #6
 800428e:	1c0a      	adds	r2, r1, #0
 8004290:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	0219      	lsls	r1, r3, #8
 8004296:	23a0      	movs	r3, #160	; 0xa0
 8004298:	05db      	lsls	r3, r3, #23
 800429a:	2200      	movs	r2, #0
 800429c:	0018      	movs	r0, r3
 800429e:	f005 fb83 	bl	80099a8 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 80042a2:	1dfb      	adds	r3, r7, #7
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	4252      	negs	r2, r2
 80042aa:	4313      	orrs	r3, r2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	0018      	movs	r0, r3
 80042b2:	f006 f8bf 	bl	800a434 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 80042b6:	230f      	movs	r3, #15
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e010      	b.n	80042e2 <SX1276WriteBuffer+0x66>
    {
          HW_SPI_InOut( buffer[i] );
 80042c0:	230f      	movs	r3, #15
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	18d3      	adds	r3, r2, r3
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	0018      	movs	r0, r3
 80042d0:	f006 f8b0 	bl	800a434 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 80042d4:	230f      	movs	r3, #15
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	230f      	movs	r3, #15
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	3201      	adds	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	230f      	movs	r3, #15
 80042e4:	18fa      	adds	r2, r7, r3
 80042e6:	1dbb      	adds	r3, r7, #6
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d3e7      	bcc.n	80042c0 <SX1276WriteBuffer+0x44>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	0219      	lsls	r1, r3, #8
 80042f4:	23a0      	movs	r3, #160	; 0xa0
 80042f6:	05db      	lsls	r3, r3, #23
 80042f8:	2201      	movs	r2, #1
 80042fa:	0018      	movs	r0, r3
 80042fc:	f005 fb54 	bl	80099a8 <HW_GPIO_Write>
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b004      	add	sp, #16
 8004306:	bd80      	pop	{r7, pc}

08004308 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6039      	str	r1, [r7, #0]
 8004310:	0011      	movs	r1, r2
 8004312:	1dfb      	adds	r3, r7, #7
 8004314:	1c02      	adds	r2, r0, #0
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	1dbb      	adds	r3, r7, #6
 800431a:	1c0a      	adds	r2, r1, #0
 800431c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	0219      	lsls	r1, r3, #8
 8004322:	23a0      	movs	r3, #160	; 0xa0
 8004324:	05db      	lsls	r3, r3, #23
 8004326:	2200      	movs	r2, #0
 8004328:	0018      	movs	r0, r3
 800432a:	f005 fb3d 	bl	80099a8 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 800432e:	1dfb      	adds	r3, r7, #7
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	227f      	movs	r2, #127	; 0x7f
 8004336:	4013      	ands	r3, r2
 8004338:	b29b      	uxth	r3, r3
 800433a:	0018      	movs	r0, r3
 800433c:	f006 f87a 	bl	800a434 <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 8004340:	230f      	movs	r3, #15
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	e011      	b.n	800436e <SX1276ReadBuffer+0x66>
    {
          buffer[i] = HW_SPI_InOut( 0 );
 800434a:	230f      	movs	r3, #15
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	18d4      	adds	r4, r2, r3
 8004354:	2000      	movs	r0, #0
 8004356:	f006 f86d 	bl	800a434 <HW_SPI_InOut>
 800435a:	0003      	movs	r3, r0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 8004360:	230f      	movs	r3, #15
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	230f      	movs	r3, #15
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	3201      	adds	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	230f      	movs	r3, #15
 8004370:	18fa      	adds	r2, r7, r3
 8004372:	1dbb      	adds	r3, r7, #6
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d3e6      	bcc.n	800434a <SX1276ReadBuffer+0x42>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	0219      	lsls	r1, r3, #8
 8004380:	23a0      	movs	r3, #160	; 0xa0
 8004382:	05db      	lsls	r3, r3, #23
 8004384:	2201      	movs	r2, #1
 8004386:	0018      	movs	r0, r3
 8004388:	f005 fb0e 	bl	80099a8 <HW_GPIO_Write>
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b005      	add	sp, #20
 8004392:	bd90      	pop	{r4, r7, pc}

08004394 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	000a      	movs	r2, r1
 800439e:	1cfb      	adds	r3, r7, #3
 80043a0:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 80043a2:	1cfb      	adds	r3, r7, #3
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0019      	movs	r1, r3
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7ff ff66 	bl	800427c <SX1276WriteBuffer>
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b002      	add	sp, #8
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	000a      	movs	r2, r1
 80043c2:	1cfb      	adds	r3, r7, #3
 80043c4:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 80043c6:	1cfb      	adds	r3, r7, #3
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0019      	movs	r1, r3
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7ff ff9a 	bl	8004308 <SX1276ReadBuffer>
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b002      	add	sp, #8
 80043da:	bd80      	pop	{r7, pc}

080043dc <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	0002      	movs	r2, r0
 80043e4:	1dfb      	adds	r3, r7, #7
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	1dbb      	adds	r3, r7, #6
 80043ea:	1c0a      	adds	r2, r1, #0
 80043ec:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 80043ee:	1dfb      	adds	r3, r7, #7
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	0018      	movs	r0, r3
 80043f4:	f7ff feba 	bl	800416c <SX1276SetModem>

    switch( modem )
 80043f8:	1dfb      	adds	r3, r7, #7
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <SX1276SetMaxPayloadLength+0x2a>
 8004400:	2b01      	cmp	r3, #1
 8004402:	d00f      	beq.n	8004424 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8004404:	e016      	b.n	8004434 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <SX1276SetMaxPayloadLength+0x60>)
 8004408:	2222      	movs	r2, #34	; 0x22
 800440a:	5c9b      	ldrb	r3, [r3, r2]
 800440c:	2201      	movs	r2, #1
 800440e:	4053      	eors	r3, r2
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004416:	1dbb      	adds	r3, r7, #6
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	0019      	movs	r1, r3
 800441c:	2032      	movs	r0, #50	; 0x32
 800441e:	f7ff ff04 	bl	800422a <SX1276Write>
        break;
 8004422:	e006      	b.n	8004432 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004424:	1dbb      	adds	r3, r7, #6
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	0019      	movs	r1, r3
 800442a:	2023      	movs	r0, #35	; 0x23
 800442c:	f7ff fefd 	bl	800422a <SX1276Write>
        break;
 8004430:	e000      	b.n	8004434 <SX1276SetMaxPayloadLength+0x58>
        break;
 8004432:	46c0      	nop			; (mov r8, r8)
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b002      	add	sp, #8
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000514 	.word	0x20000514

08004440 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8004444:	4b31      	ldr	r3, [pc, #196]	; (800450c <SX1276OnTimeoutIrq+0xcc>)
 8004446:	791b      	ldrb	r3, [r3, #4]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d002      	beq.n	8004452 <SX1276OnTimeoutIrq+0x12>
 800444c:	2b02      	cmp	r3, #2
 800444e:	d045      	beq.n	80044dc <SX1276OnTimeoutIrq+0x9c>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8004450:	e058      	b.n	8004504 <SX1276OnTimeoutIrq+0xc4>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004452:	4b2e      	ldr	r3, [pc, #184]	; (800450c <SX1276OnTimeoutIrq+0xcc>)
 8004454:	795b      	ldrb	r3, [r3, #5]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d132      	bne.n	80044c0 <SX1276OnTimeoutIrq+0x80>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800445a:	4b2c      	ldr	r3, [pc, #176]	; (800450c <SX1276OnTimeoutIrq+0xcc>)
 800445c:	222c      	movs	r2, #44	; 0x2c
 800445e:	2100      	movs	r1, #0
 8004460:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <SX1276OnTimeoutIrq+0xcc>)
 8004464:	222d      	movs	r2, #45	; 0x2d
 8004466:	2100      	movs	r1, #0
 8004468:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800446a:	4b28      	ldr	r3, [pc, #160]	; (800450c <SX1276OnTimeoutIrq+0xcc>)
 800446c:	2200      	movs	r2, #0
 800446e:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004470:	4b26      	ldr	r3, [pc, #152]	; (800450c <SX1276OnTimeoutIrq+0xcc>)
 8004472:	2200      	movs	r2, #0
 8004474:	86da      	strh	r2, [r3, #54]	; 0x36
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004476:	210b      	movs	r1, #11
 8004478:	203e      	movs	r0, #62	; 0x3e
 800447a:	f7ff fed6 	bl	800422a <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800447e:	2110      	movs	r1, #16
 8004480:	203f      	movs	r0, #63	; 0x3f
 8004482:	f7ff fed2 	bl	800422a <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8004486:	4b21      	ldr	r3, [pc, #132]	; (800450c <SX1276OnTimeoutIrq+0xcc>)
 8004488:	2226      	movs	r2, #38	; 0x26
 800448a:	5c9b      	ldrb	r3, [r3, r2]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d010      	beq.n	80044b2 <SX1276OnTimeoutIrq+0x72>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004490:	200d      	movs	r0, #13
 8004492:	f7ff fede 	bl	8004252 <SX1276Read>
 8004496:	0003      	movs	r3, r0
 8004498:	001a      	movs	r2, r3
 800449a:	2340      	movs	r3, #64	; 0x40
 800449c:	4313      	orrs	r3, r2
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	0019      	movs	r1, r3
 80044a2:	200d      	movs	r0, #13
 80044a4:	f7ff fec1 	bl	800422a <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <SX1276OnTimeoutIrq+0xd0>)
 80044aa:	0018      	movs	r0, r3
 80044ac:	f004 fef2 	bl	8009294 <TimerStart>
 80044b0:	e006      	b.n	80044c0 <SX1276OnTimeoutIrq+0x80>
                SX1276.Settings.State = RF_IDLE;
 80044b2:	4b16      	ldr	r3, [pc, #88]	; (800450c <SX1276OnTimeoutIrq+0xcc>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <SX1276OnTimeoutIrq+0xd0>)
 80044ba:	0018      	movs	r0, r3
 80044bc:	f005 f800 	bl	80094c0 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80044c0:	4b14      	ldr	r3, [pc, #80]	; (8004514 <SX1276OnTimeoutIrq+0xd4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01a      	beq.n	80044fe <SX1276OnTimeoutIrq+0xbe>
 80044c8:	4b12      	ldr	r3, [pc, #72]	; (8004514 <SX1276OnTimeoutIrq+0xd4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d015      	beq.n	80044fe <SX1276OnTimeoutIrq+0xbe>
            RadioEvents->RxTimeout( );
 80044d2:	4b10      	ldr	r3, [pc, #64]	; (8004514 <SX1276OnTimeoutIrq+0xd4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4798      	blx	r3
        break;
 80044da:	e010      	b.n	80044fe <SX1276OnTimeoutIrq+0xbe>
        SX1276.Settings.State = RF_IDLE;
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <SX1276OnTimeoutIrq+0xcc>)
 80044de:	2200      	movs	r2, #0
 80044e0:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <SX1276OnTimeoutIrq+0xd4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <SX1276OnTimeoutIrq+0xc2>
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <SX1276OnTimeoutIrq+0xd4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <SX1276OnTimeoutIrq+0xc2>
            RadioEvents->TxTimeout( );
 80044f4:	4b07      	ldr	r3, [pc, #28]	; (8004514 <SX1276OnTimeoutIrq+0xd4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4798      	blx	r3
        break;
 80044fc:	e001      	b.n	8004502 <SX1276OnTimeoutIrq+0xc2>
        break;
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	e000      	b.n	8004504 <SX1276OnTimeoutIrq+0xc4>
        break;
 8004502:	46c0      	nop			; (mov r8, r8)
    }
}
 8004504:	46c0      	nop			; (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	20000514 	.word	0x20000514
 8004510:	20000500 	.word	0x20000500
 8004514:	200000ac 	.word	0x200000ac

08004518 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 8004518:	b5b0      	push	{r4, r5, r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 800451e:	1cfb      	adds	r3, r7, #3
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8004524:	4bd6      	ldr	r3, [pc, #856]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004526:	791b      	ldrb	r3, [r3, #4]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d003      	beq.n	8004534 <SX1276OnDio0Irq+0x1c>
 800452c:	2b02      	cmp	r3, #2
 800452e:	d100      	bne.n	8004532 <SX1276OnDio0Irq+0x1a>
 8004530:	e201      	b.n	8004936 <SX1276OnDio0Irq+0x41e>
                }
                break;
            }
            break;
        default:
            break;
 8004532:	e21e      	b.n	8004972 <SX1276OnDio0Irq+0x45a>
            switch( SX1276.Settings.Modem )
 8004534:	4bd2      	ldr	r3, [pc, #840]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004536:	795b      	ldrb	r3, [r3, #5]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <SX1276OnDio0Irq+0x2c>
 800453c:	2b01      	cmp	r3, #1
 800453e:	d100      	bne.n	8004542 <SX1276OnDio0Irq+0x2a>
 8004540:	e0ea      	b.n	8004718 <SX1276OnDio0Irq+0x200>
                break;
 8004542:	e1f7      	b.n	8004934 <SX1276OnDio0Irq+0x41c>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8004544:	4bce      	ldr	r3, [pc, #824]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	5c9b      	ldrb	r3, [r3, r2]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d056      	beq.n	80045fc <SX1276OnDio0Irq+0xe4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800454e:	203f      	movs	r0, #63	; 0x3f
 8004550:	f7ff fe7f 	bl	8004252 <SX1276Read>
 8004554:	0003      	movs	r3, r0
 8004556:	001a      	movs	r2, r3
 8004558:	1cfb      	adds	r3, r7, #3
 800455a:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800455c:	1cfb      	adds	r3, r7, #3
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	001a      	movs	r2, r3
 8004564:	2302      	movs	r3, #2
 8004566:	4013      	ands	r3, r2
 8004568:	2b02      	cmp	r3, #2
 800456a:	d047      	beq.n	80045fc <SX1276OnDio0Irq+0xe4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI | 
 800456c:	210b      	movs	r1, #11
 800456e:	203e      	movs	r0, #62	; 0x3e
 8004570:	f7ff fe5b 	bl	800422a <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004574:	2110      	movs	r1, #16
 8004576:	203f      	movs	r0, #63	; 0x3f
 8004578:	f7ff fe57 	bl	800422a <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800457c:	4bc1      	ldr	r3, [pc, #772]	; (8004884 <SX1276OnDio0Irq+0x36c>)
 800457e:	0018      	movs	r0, r3
 8004580:	f004 ff9e 	bl	80094c0 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8004584:	4bbe      	ldr	r3, [pc, #760]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004586:	2226      	movs	r2, #38	; 0x26
 8004588:	5c9b      	ldrb	r3, [r3, r2]
 800458a:	2201      	movs	r2, #1
 800458c:	4053      	eors	r3, r2
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 8004594:	4bbc      	ldr	r3, [pc, #752]	; (8004888 <SX1276OnDio0Irq+0x370>)
 8004596:	0018      	movs	r0, r3
 8004598:	f004 ff92 	bl	80094c0 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800459c:	4bb8      	ldr	r3, [pc, #736]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800459e:	2200      	movs	r2, #0
 80045a0:	711a      	strb	r2, [r3, #4]
 80045a2:	e00f      	b.n	80045c4 <SX1276OnDio0Irq+0xac>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80045a4:	200d      	movs	r0, #13
 80045a6:	f7ff fe54 	bl	8004252 <SX1276Read>
 80045aa:	0003      	movs	r3, r0
 80045ac:	001a      	movs	r2, r3
 80045ae:	2340      	movs	r3, #64	; 0x40
 80045b0:	4313      	orrs	r3, r2
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	0019      	movs	r1, r3
 80045b6:	200d      	movs	r0, #13
 80045b8:	f7ff fe37 	bl	800422a <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80045bc:	4bb2      	ldr	r3, [pc, #712]	; (8004888 <SX1276OnDio0Irq+0x370>)
 80045be:	0018      	movs	r0, r3
 80045c0:	f004 fe68 	bl	8009294 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80045c4:	4bb1      	ldr	r3, [pc, #708]	; (800488c <SX1276OnDio0Irq+0x374>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <SX1276OnDio0Irq+0xc6>
 80045cc:	4baf      	ldr	r3, [pc, #700]	; (800488c <SX1276OnDio0Irq+0x374>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <SX1276OnDio0Irq+0xc6>
                            RadioEvents->RxError( );
 80045d6:	4bad      	ldr	r3, [pc, #692]	; (800488c <SX1276OnDio0Irq+0x374>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80045de:	4ba8      	ldr	r3, [pc, #672]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80045e0:	222c      	movs	r2, #44	; 0x2c
 80045e2:	2100      	movs	r1, #0
 80045e4:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80045e6:	4ba6      	ldr	r3, [pc, #664]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80045e8:	222d      	movs	r2, #45	; 0x2d
 80045ea:	2100      	movs	r1, #0
 80045ec:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80045ee:	4ba4      	ldr	r3, [pc, #656]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	871a      	strh	r2, [r3, #56]	; 0x38
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80045f4:	4ba2      	ldr	r3, [pc, #648]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	86da      	strh	r2, [r3, #54]	; 0x36
                        break;
 80045fa:	e19b      	b.n	8004934 <SX1276OnDio0Irq+0x41c>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80045fc:	4ba0      	ldr	r3, [pc, #640]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80045fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004600:	2b00      	cmp	r3, #0
 8004602:	d12d      	bne.n	8004660 <SX1276OnDio0Irq+0x148>
 8004604:	4b9e      	ldr	r3, [pc, #632]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004606:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d129      	bne.n	8004660 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800460c:	4b9c      	ldr	r3, [pc, #624]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800460e:	2222      	movs	r2, #34	; 0x22
 8004610:	5c9b      	ldrb	r3, [r3, r2]
 8004612:	2201      	movs	r2, #1
 8004614:	4053      	eors	r3, r2
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <SX1276OnDio0Irq+0x110>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800461c:	4b9c      	ldr	r3, [pc, #624]	; (8004890 <SX1276OnDio0Irq+0x378>)
 800461e:	2101      	movs	r1, #1
 8004620:	0018      	movs	r0, r3
 8004622:	f7ff fec9 	bl	80043b8 <SX1276ReadFifo>
 8004626:	e006      	b.n	8004636 <SX1276OnDio0Irq+0x11e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004628:	2032      	movs	r0, #50	; 0x32
 800462a:	f7ff fe12 	bl	8004252 <SX1276Read>
 800462e:	0003      	movs	r3, r0
 8004630:	b29a      	uxth	r2, r3
 8004632:	4b93      	ldr	r3, [pc, #588]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004634:	86da      	strh	r2, [r3, #54]	; 0x36
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004636:	4b92      	ldr	r3, [pc, #584]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004638:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800463a:	001a      	movs	r2, r3
 800463c:	4b95      	ldr	r3, [pc, #596]	; (8004894 <SX1276OnDio0Irq+0x37c>)
 800463e:	18d0      	adds	r0, r2, r3
 8004640:	4b8f      	ldr	r3, [pc, #572]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004644:	b2da      	uxtb	r2, r3
 8004646:	4b8e      	ldr	r3, [pc, #568]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004648:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800464a:	b2db      	uxtb	r3, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	0019      	movs	r1, r3
 8004652:	f7ff feb1 	bl	80043b8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004656:	4b8a      	ldr	r3, [pc, #552]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004658:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800465a:	4b89      	ldr	r3, [pc, #548]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800465c:	871a      	strh	r2, [r3, #56]	; 0x38
 800465e:	e013      	b.n	8004688 <SX1276OnDio0Irq+0x170>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004660:	4b87      	ldr	r3, [pc, #540]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004662:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004664:	001a      	movs	r2, r3
 8004666:	4b8b      	ldr	r3, [pc, #556]	; (8004894 <SX1276OnDio0Irq+0x37c>)
 8004668:	18d0      	adds	r0, r2, r3
 800466a:	4b85      	ldr	r3, [pc, #532]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800466c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466e:	b2da      	uxtb	r2, r3
 8004670:	4b83      	ldr	r3, [pc, #524]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004672:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004674:	b2db      	uxtb	r3, r3
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	0019      	movs	r1, r3
 800467c:	f7ff fe9c 	bl	80043b8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004680:	4b7f      	ldr	r3, [pc, #508]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004682:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004684:	4b7e      	ldr	r3, [pc, #504]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004686:	871a      	strh	r2, [r3, #56]	; 0x38
                TimerStop( &RxTimeoutTimer );
 8004688:	4b7e      	ldr	r3, [pc, #504]	; (8004884 <SX1276OnDio0Irq+0x36c>)
 800468a:	0018      	movs	r0, r3
 800468c:	f004 ff18 	bl	80094c0 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8004690:	4b7b      	ldr	r3, [pc, #492]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004692:	2226      	movs	r2, #38	; 0x26
 8004694:	5c9b      	ldrb	r3, [r3, r2]
 8004696:	2201      	movs	r2, #1
 8004698:	4053      	eors	r3, r2
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <SX1276OnDio0Irq+0x198>
                    SX1276.Settings.State = RF_IDLE;
 80046a0:	4b77      	ldr	r3, [pc, #476]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80046a6:	4b78      	ldr	r3, [pc, #480]	; (8004888 <SX1276OnDio0Irq+0x370>)
 80046a8:	0018      	movs	r0, r3
 80046aa:	f004 ff09 	bl	80094c0 <TimerStop>
 80046ae:	e00f      	b.n	80046d0 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80046b0:	200d      	movs	r0, #13
 80046b2:	f7ff fdce 	bl	8004252 <SX1276Read>
 80046b6:	0003      	movs	r3, r0
 80046b8:	001a      	movs	r2, r3
 80046ba:	2340      	movs	r3, #64	; 0x40
 80046bc:	4313      	orrs	r3, r2
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	0019      	movs	r1, r3
 80046c2:	200d      	movs	r0, #13
 80046c4:	f7ff fdb1 	bl	800422a <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 80046c8:	4b6f      	ldr	r3, [pc, #444]	; (8004888 <SX1276OnDio0Irq+0x370>)
 80046ca:	0018      	movs	r0, r3
 80046cc:	f004 fde2 	bl	8009294 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80046d0:	4b6e      	ldr	r3, [pc, #440]	; (800488c <SX1276OnDio0Irq+0x374>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d010      	beq.n	80046fa <SX1276OnDio0Irq+0x1e2>
 80046d8:	4b6c      	ldr	r3, [pc, #432]	; (800488c <SX1276OnDio0Irq+0x374>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <SX1276OnDio0Irq+0x1e2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80046e2:	4b6a      	ldr	r3, [pc, #424]	; (800488c <SX1276OnDio0Irq+0x374>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689c      	ldr	r4, [r3, #8]
 80046e8:	4b65      	ldr	r3, [pc, #404]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80046ea:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
 80046ec:	4b64      	ldr	r3, [pc, #400]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80046ee:	222e      	movs	r2, #46	; 0x2e
 80046f0:	569b      	ldrsb	r3, [r3, r2]
 80046f2:	b21a      	sxth	r2, r3
 80046f4:	4867      	ldr	r0, [pc, #412]	; (8004894 <SX1276OnDio0Irq+0x37c>)
 80046f6:	2300      	movs	r3, #0
 80046f8:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80046fa:	4b61      	ldr	r3, [pc, #388]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80046fc:	222c      	movs	r2, #44	; 0x2c
 80046fe:	2100      	movs	r1, #0
 8004700:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004702:	4b5f      	ldr	r3, [pc, #380]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004704:	222d      	movs	r2, #45	; 0x2d
 8004706:	2100      	movs	r1, #0
 8004708:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800470a:	4b5d      	ldr	r3, [pc, #372]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800470c:	2200      	movs	r2, #0
 800470e:	871a      	strh	r2, [r3, #56]	; 0x38
                SX1276.Settings.FskPacketHandler.Size = 0;
 8004710:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004712:	2200      	movs	r2, #0
 8004714:	86da      	strh	r2, [r3, #54]	; 0x36
                break;
 8004716:	e10d      	b.n	8004934 <SX1276OnDio0Irq+0x41c>
                    int8_t snr = 0;
 8004718:	1dfb      	adds	r3, r7, #7
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800471e:	2140      	movs	r1, #64	; 0x40
 8004720:	2012      	movs	r0, #18
 8004722:	f7ff fd82 	bl	800422a <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8004726:	2012      	movs	r0, #18
 8004728:	f7ff fd93 	bl	8004252 <SX1276Read>
 800472c:	0003      	movs	r3, r0
 800472e:	001a      	movs	r2, r3
 8004730:	1cfb      	adds	r3, r7, #3
 8004732:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8004734:	1cfb      	adds	r3, r7, #3
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	001a      	movs	r2, r3
 800473c:	2320      	movs	r3, #32
 800473e:	4013      	ands	r3, r2
 8004740:	2b20      	cmp	r3, #32
 8004742:	d122      	bne.n	800478a <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8004744:	2120      	movs	r1, #32
 8004746:	2012      	movs	r0, #18
 8004748:	f7ff fd6f 	bl	800422a <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800474c:	4b4c      	ldr	r3, [pc, #304]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800474e:	2252      	movs	r2, #82	; 0x52
 8004750:	5c9b      	ldrb	r3, [r3, r2]
 8004752:	2201      	movs	r2, #1
 8004754:	4053      	eors	r3, r2
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <SX1276OnDio0Irq+0x24a>
                            SX1276.Settings.State = RF_IDLE;
 800475c:	4b48      	ldr	r3, [pc, #288]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800475e:	2200      	movs	r2, #0
 8004760:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 8004762:	4b48      	ldr	r3, [pc, #288]	; (8004884 <SX1276OnDio0Irq+0x36c>)
 8004764:	0018      	movs	r0, r3
 8004766:	f004 feab 	bl	80094c0 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800476a:	4b48      	ldr	r3, [pc, #288]	; (800488c <SX1276OnDio0Irq+0x374>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d100      	bne.n	8004774 <SX1276OnDio0Irq+0x25c>
 8004772:	e0dc      	b.n	800492e <SX1276OnDio0Irq+0x416>
 8004774:	4b45      	ldr	r3, [pc, #276]	; (800488c <SX1276OnDio0Irq+0x374>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d100      	bne.n	8004780 <SX1276OnDio0Irq+0x268>
 800477e:	e0d6      	b.n	800492e <SX1276OnDio0Irq+0x416>
                            RadioEvents->RxError( );
 8004780:	4b42      	ldr	r3, [pc, #264]	; (800488c <SX1276OnDio0Irq+0x374>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	4798      	blx	r3
                        break;
 8004788:	e0d1      	b.n	800492e <SX1276OnDio0Irq+0x416>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800478a:	2019      	movs	r0, #25
 800478c:	f7ff fd61 	bl	8004252 <SX1276Read>
 8004790:	0003      	movs	r3, r0
 8004792:	b259      	sxtb	r1, r3
 8004794:	4b3a      	ldr	r3, [pc, #232]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004796:	2258      	movs	r2, #88	; 0x58
 8004798:	5499      	strb	r1, [r3, r2]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 800479a:	4b39      	ldr	r3, [pc, #228]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800479c:	2258      	movs	r2, #88	; 0x58
 800479e:	569b      	ldrsb	r3, [r3, r2]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	da10      	bge.n	80047c6 <SX1276OnDio0Irq+0x2ae>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80047a6:	2258      	movs	r2, #88	; 0x58
 80047a8:	569b      	ldrsb	r3, [r3, r2]
 80047aa:	425b      	negs	r3, r3
 80047ac:	109b      	asrs	r3, r3, #2
 80047ae:	b25a      	sxtb	r2, r3
 80047b0:	1dfb      	adds	r3, r7, #7
 80047b2:	213f      	movs	r1, #63	; 0x3f
 80047b4:	400a      	ands	r2, r1
 80047b6:	701a      	strb	r2, [r3, #0]
                        snr = -snr;
 80047b8:	1dfb      	adds	r3, r7, #7
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	425b      	negs	r3, r3
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	1dfb      	adds	r3, r7, #7
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e008      	b.n	80047d8 <SX1276OnDio0Irq+0x2c0>
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 80047c6:	4b2e      	ldr	r3, [pc, #184]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80047c8:	2258      	movs	r2, #88	; 0x58
 80047ca:	569b      	ldrsb	r3, [r3, r2]
 80047cc:	109b      	asrs	r3, r3, #2
 80047ce:	b25a      	sxtb	r2, r3
 80047d0:	1dfb      	adds	r3, r7, #7
 80047d2:	213f      	movs	r1, #63	; 0x3f
 80047d4:	400a      	ands	r2, r1
 80047d6:	701a      	strb	r2, [r3, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80047d8:	201a      	movs	r0, #26
 80047da:	f7ff fd3a 	bl	8004252 <SX1276Read>
 80047de:	0003      	movs	r3, r0
 80047e0:	001a      	movs	r2, r3
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	801a      	strh	r2, [r3, #0]
                    if( snr < 0 )
 80047e6:	1dfb      	adds	r3, r7, #7
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b7f      	cmp	r3, #127	; 0x7f
 80047ec:	d932      	bls.n	8004854 <SX1276OnDio0Irq+0x33c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80047ee:	4b24      	ldr	r3, [pc, #144]	; (8004880 <SX1276OnDio0Irq+0x368>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	4a29      	ldr	r2, [pc, #164]	; (8004898 <SX1276OnDio0Irq+0x380>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d916      	bls.n	8004826 <SX1276OnDio0Irq+0x30e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80047f8:	1d3b      	adds	r3, r7, #4
 80047fa:	2200      	movs	r2, #0
 80047fc:	5e9b      	ldrsh	r3, [r3, r2]
 80047fe:	111b      	asrs	r3, r3, #4
 8004800:	b21b      	sxth	r3, r3
 8004802:	b29a      	uxth	r2, r3
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	18d3      	adds	r3, r2, r3
 800480a:	b29a      	uxth	r2, r3
 800480c:	1dfb      	adds	r3, r7, #7
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	b25b      	sxtb	r3, r3
 8004812:	b29b      	uxth	r3, r3
 8004814:	18d3      	adds	r3, r2, r3
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b9d      	subs	r3, #157	; 0x9d
 800481a:	b29b      	uxth	r3, r3
 800481c:	b219      	sxth	r1, r3
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004820:	225a      	movs	r2, #90	; 0x5a
 8004822:	5299      	strh	r1, [r3, r2]
 8004824:	e04a      	b.n	80048bc <SX1276OnDio0Irq+0x3a4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	2200      	movs	r2, #0
 800482a:	5e9b      	ldrsh	r3, [r3, r2]
 800482c:	111b      	asrs	r3, r3, #4
 800482e:	b21b      	sxth	r3, r3
 8004830:	b29a      	uxth	r2, r3
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	18d3      	adds	r3, r2, r3
 8004838:	b29a      	uxth	r2, r3
 800483a:	1dfb      	adds	r3, r7, #7
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b25b      	sxtb	r3, r3
 8004840:	b29b      	uxth	r3, r3
 8004842:	18d3      	adds	r3, r2, r3
 8004844:	b29b      	uxth	r3, r3
 8004846:	3ba4      	subs	r3, #164	; 0xa4
 8004848:	b29b      	uxth	r3, r3
 800484a:	b219      	sxth	r1, r3
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800484e:	225a      	movs	r2, #90	; 0x5a
 8004850:	5299      	strh	r1, [r3, r2]
 8004852:	e033      	b.n	80048bc <SX1276OnDio0Irq+0x3a4>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <SX1276OnDio0Irq+0x368>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <SX1276OnDio0Irq+0x380>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d91e      	bls.n	800489c <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	2200      	movs	r2, #0
 8004862:	5e9b      	ldrsh	r3, [r3, r2]
 8004864:	111b      	asrs	r3, r3, #4
 8004866:	b21b      	sxth	r3, r3
 8004868:	b29a      	uxth	r2, r3
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	18d3      	adds	r3, r2, r3
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b9d      	subs	r3, #157	; 0x9d
 8004874:	b29b      	uxth	r3, r3
 8004876:	b219      	sxth	r1, r3
 8004878:	4b01      	ldr	r3, [pc, #4]	; (8004880 <SX1276OnDio0Irq+0x368>)
 800487a:	225a      	movs	r2, #90	; 0x5a
 800487c:	5299      	strh	r1, [r3, r2]
 800487e:	e01d      	b.n	80048bc <SX1276OnDio0Irq+0x3a4>
 8004880:	20000514 	.word	0x20000514
 8004884:	20000574 	.word	0x20000574
 8004888:	20000500 	.word	0x20000500
 800488c:	200000ac 	.word	0x200000ac
 8004890:	2000054a 	.word	0x2000054a
 8004894:	200000b0 	.word	0x200000b0
 8004898:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800489c:	1d3b      	adds	r3, r7, #4
 800489e:	2200      	movs	r2, #0
 80048a0:	5e9b      	ldrsh	r3, [r3, r2]
 80048a2:	111b      	asrs	r3, r3, #4
 80048a4:	b21b      	sxth	r3, r3
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	1d3b      	adds	r3, r7, #4
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	18d3      	adds	r3, r2, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3ba4      	subs	r3, #164	; 0xa4
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	b219      	sxth	r1, r3
 80048b6:	4b31      	ldr	r3, [pc, #196]	; (800497c <SX1276OnDio0Irq+0x464>)
 80048b8:	225a      	movs	r2, #90	; 0x5a
 80048ba:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80048bc:	2013      	movs	r0, #19
 80048be:	f7ff fcc8 	bl	8004252 <SX1276Read>
 80048c2:	0003      	movs	r3, r0
 80048c4:	0019      	movs	r1, r3
 80048c6:	4b2d      	ldr	r3, [pc, #180]	; (800497c <SX1276OnDio0Irq+0x464>)
 80048c8:	225c      	movs	r2, #92	; 0x5c
 80048ca:	5499      	strb	r1, [r3, r2]
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80048cc:	4b2b      	ldr	r3, [pc, #172]	; (800497c <SX1276OnDio0Irq+0x464>)
 80048ce:	225c      	movs	r2, #92	; 0x5c
 80048d0:	5c9a      	ldrb	r2, [r3, r2]
 80048d2:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <SX1276OnDio0Irq+0x468>)
 80048d4:	0011      	movs	r1, r2
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7ff fd6e 	bl	80043b8 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80048dc:	4b27      	ldr	r3, [pc, #156]	; (800497c <SX1276OnDio0Irq+0x464>)
 80048de:	2252      	movs	r2, #82	; 0x52
 80048e0:	5c9b      	ldrb	r3, [r3, r2]
 80048e2:	2201      	movs	r2, #1
 80048e4:	4053      	eors	r3, r2
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <SX1276OnDio0Irq+0x3da>
                        SX1276.Settings.State = RF_IDLE;
 80048ec:	4b23      	ldr	r3, [pc, #140]	; (800497c <SX1276OnDio0Irq+0x464>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80048f2:	4b24      	ldr	r3, [pc, #144]	; (8004984 <SX1276OnDio0Irq+0x46c>)
 80048f4:	0018      	movs	r0, r3
 80048f6:	f004 fde3 	bl	80094c0 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80048fa:	4b23      	ldr	r3, [pc, #140]	; (8004988 <SX1276OnDio0Irq+0x470>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d017      	beq.n	8004932 <SX1276OnDio0Irq+0x41a>
 8004902:	4b21      	ldr	r3, [pc, #132]	; (8004988 <SX1276OnDio0Irq+0x470>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d012      	beq.n	8004932 <SX1276OnDio0Irq+0x41a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800490c:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <SX1276OnDio0Irq+0x470>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689c      	ldr	r4, [r3, #8]
 8004912:	4b1a      	ldr	r3, [pc, #104]	; (800497c <SX1276OnDio0Irq+0x464>)
 8004914:	225c      	movs	r2, #92	; 0x5c
 8004916:	5c9b      	ldrb	r3, [r3, r2]
 8004918:	b299      	uxth	r1, r3
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <SX1276OnDio0Irq+0x464>)
 800491c:	225a      	movs	r2, #90	; 0x5a
 800491e:	5e9d      	ldrsh	r5, [r3, r2]
 8004920:	4b16      	ldr	r3, [pc, #88]	; (800497c <SX1276OnDio0Irq+0x464>)
 8004922:	2258      	movs	r2, #88	; 0x58
 8004924:	569b      	ldrsb	r3, [r3, r2]
 8004926:	4816      	ldr	r0, [pc, #88]	; (8004980 <SX1276OnDio0Irq+0x468>)
 8004928:	002a      	movs	r2, r5
 800492a:	47a0      	blx	r4
                break;
 800492c:	e001      	b.n	8004932 <SX1276OnDio0Irq+0x41a>
                        break;
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	e01f      	b.n	8004972 <SX1276OnDio0Irq+0x45a>
                break;
 8004932:	46c0      	nop			; (mov r8, r8)
            break;
 8004934:	e01d      	b.n	8004972 <SX1276OnDio0Irq+0x45a>
            TimerStop( &TxTimeoutTimer );
 8004936:	4b15      	ldr	r3, [pc, #84]	; (800498c <SX1276OnDio0Irq+0x474>)
 8004938:	0018      	movs	r0, r3
 800493a:	f004 fdc1 	bl	80094c0 <TimerStop>
            switch( SX1276.Settings.Modem )
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <SX1276OnDio0Irq+0x464>)
 8004940:	795b      	ldrb	r3, [r3, #5]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d103      	bne.n	800494e <SX1276OnDio0Irq+0x436>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8004946:	2108      	movs	r1, #8
 8004948:	2012      	movs	r0, #18
 800494a:	f7ff fc6e 	bl	800422a <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <SX1276OnDio0Irq+0x464>)
 8004950:	2200      	movs	r2, #0
 8004952:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <SX1276OnDio0Irq+0x470>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <SX1276OnDio0Irq+0x456>
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <SX1276OnDio0Irq+0x470>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <SX1276OnDio0Irq+0x456>
                    RadioEvents->TxDone( );
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <SX1276OnDio0Irq+0x470>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4798      	blx	r3
                break;
 800496e:	46c0      	nop			; (mov r8, r8)
            break;
 8004970:	46c0      	nop			; (mov r8, r8)
    }
}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	b002      	add	sp, #8
 8004978:	bdb0      	pop	{r4, r5, r7, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	20000514 	.word	0x20000514
 8004980:	200000b0 	.word	0x200000b0
 8004984:	20000574 	.word	0x20000574
 8004988:	200000ac 	.word	0x200000ac
 800498c:	200004ec 	.word	0x200004ec

08004990 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8004994:	4b60      	ldr	r3, [pc, #384]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004996:	791b      	ldrb	r3, [r3, #4]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d003      	beq.n	80049a4 <SX1276OnDio1Irq+0x14>
 800499c:	2b02      	cmp	r3, #2
 800499e:	d100      	bne.n	80049a2 <SX1276OnDio1Irq+0x12>
 80049a0:	e078      	b.n	8004a94 <SX1276OnDio1Irq+0x104>
            default:
                break;
            }
            break;
        default:
            break;
 80049a2:	e0b6      	b.n	8004b12 <SX1276OnDio1Irq+0x182>
            switch( SX1276.Settings.Modem )
 80049a4:	4b5c      	ldr	r3, [pc, #368]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 80049a6:	795b      	ldrb	r3, [r3, #5]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <SX1276OnDio1Irq+0x22>
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d053      	beq.n	8004a58 <SX1276OnDio1Irq+0xc8>
                break;
 80049b0:	e06f      	b.n	8004a92 <SX1276OnDio1Irq+0x102>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80049b2:	4b59      	ldr	r3, [pc, #356]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 80049b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d118      	bne.n	80049ec <SX1276OnDio1Irq+0x5c>
 80049ba:	4b57      	ldr	r3, [pc, #348]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 80049bc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d114      	bne.n	80049ec <SX1276OnDio1Irq+0x5c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80049c2:	4b55      	ldr	r3, [pc, #340]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 80049c4:	2222      	movs	r2, #34	; 0x22
 80049c6:	5c9b      	ldrb	r3, [r3, r2]
 80049c8:	2201      	movs	r2, #1
 80049ca:	4053      	eors	r3, r2
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <SX1276OnDio1Irq+0x4e>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80049d2:	4b52      	ldr	r3, [pc, #328]	; (8004b1c <SX1276OnDio1Irq+0x18c>)
 80049d4:	2101      	movs	r1, #1
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7ff fcee 	bl	80043b8 <SX1276ReadFifo>
 80049dc:	e006      	b.n	80049ec <SX1276OnDio1Irq+0x5c>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80049de:	2032      	movs	r0, #50	; 0x32
 80049e0:	f7ff fc37 	bl	8004252 <SX1276Read>
 80049e4:	0003      	movs	r3, r0
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	4b4b      	ldr	r3, [pc, #300]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 80049ea:	86da      	strh	r2, [r3, #54]	; 0x36
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 80049ec:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 80049ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f0:	001a      	movs	r2, r3
 80049f2:	4b49      	ldr	r3, [pc, #292]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 80049f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	4a47      	ldr	r2, [pc, #284]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 80049fa:	213a      	movs	r1, #58	; 0x3a
 80049fc:	5c52      	ldrb	r2, [r2, r1]
 80049fe:	4293      	cmp	r3, r2
 8004a00:	dd15      	ble.n	8004a2e <SX1276OnDio1Irq+0x9e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 8004a02:	4b45      	ldr	r3, [pc, #276]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a04:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004a06:	001a      	movs	r2, r3
 8004a08:	4b45      	ldr	r3, [pc, #276]	; (8004b20 <SX1276OnDio1Irq+0x190>)
 8004a0a:	18d0      	adds	r0, r2, r3
 8004a0c:	4b42      	ldr	r3, [pc, #264]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a0e:	223a      	movs	r2, #58	; 0x3a
 8004a10:	5c9b      	ldrb	r3, [r3, r2]
 8004a12:	0019      	movs	r1, r3
 8004a14:	f7ff fcd0 	bl	80043b8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 8004a18:	4b3f      	ldr	r3, [pc, #252]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a1a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004a1c:	4b3e      	ldr	r3, [pc, #248]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a1e:	213a      	movs	r1, #58	; 0x3a
 8004a20:	5c5b      	ldrb	r3, [r3, r1]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	18d3      	adds	r3, r2, r3
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a2a:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004a2c:	e031      	b.n	8004a92 <SX1276OnDio1Irq+0x102>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004a2e:	4b3a      	ldr	r3, [pc, #232]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a30:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004a32:	001a      	movs	r2, r3
 8004a34:	4b3a      	ldr	r3, [pc, #232]	; (8004b20 <SX1276OnDio1Irq+0x190>)
 8004a36:	18d0      	adds	r0, r2, r3
 8004a38:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a40:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	0019      	movs	r1, r3
 8004a4a:	f7ff fcb5 	bl	80043b8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004a4e:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a50:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004a52:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a54:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004a56:	e01c      	b.n	8004a92 <SX1276OnDio1Irq+0x102>
                TimerStop( &RxTimeoutTimer );
 8004a58:	4b32      	ldr	r3, [pc, #200]	; (8004b24 <SX1276OnDio1Irq+0x194>)
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f004 fd30 	bl	80094c0 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004a60:	2180      	movs	r1, #128	; 0x80
 8004a62:	2012      	movs	r0, #18
 8004a64:	f7ff fbe1 	bl	800422a <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004a68:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <SX1276OnDio1Irq+0x198>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <SX1276OnDio1Irq+0x100>
 8004a76:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <SX1276OnDio1Irq+0x198>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <SX1276OnDio1Irq+0x100>
                    RadioEvents->RxTimeout( );
 8004a80:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <SX1276OnDio1Irq+0x198>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4798      	blx	r3
                    PRINTF("rxTimeOut\n\r");
 8004a88:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <SX1276OnDio1Irq+0x19c>)
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f006 fc3c 	bl	800b308 <vcom_Send>
                break;
 8004a90:	46c0      	nop			; (mov r8, r8)
            break;
 8004a92:	e03e      	b.n	8004b12 <SX1276OnDio1Irq+0x182>
            switch( SX1276.Settings.Modem )
 8004a94:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004a96:	795b      	ldrb	r3, [r3, #5]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <SX1276OnDio1Irq+0x112>
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d036      	beq.n	8004b0e <SX1276OnDio1Irq+0x17e>
                break;
 8004aa0:	e036      	b.n	8004b10 <SX1276OnDio1Irq+0x180>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	001a      	movs	r2, r3
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004aaa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	4a1a      	ldr	r2, [pc, #104]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004ab0:	213b      	movs	r1, #59	; 0x3b
 8004ab2:	5c52      	ldrb	r2, [r2, r1]
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	dd15      	ble.n	8004ae4 <SX1276OnDio1Irq+0x154>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8004ab8:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004aba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004abc:	001a      	movs	r2, r3
 8004abe:	4b18      	ldr	r3, [pc, #96]	; (8004b20 <SX1276OnDio1Irq+0x190>)
 8004ac0:	18d0      	adds	r0, r2, r3
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004ac4:	223b      	movs	r2, #59	; 0x3b
 8004ac6:	5c9b      	ldrb	r3, [r3, r2]
 8004ac8:	0019      	movs	r1, r3
 8004aca:	f7ff fc63 	bl	8004394 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004ad0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004ad4:	213b      	movs	r1, #59	; 0x3b
 8004ad6:	5c5b      	ldrb	r3, [r3, r1]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	18d3      	adds	r3, r2, r3
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004ae0:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004ae2:	e015      	b.n	8004b10 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004ae6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004ae8:	001a      	movs	r2, r3
 8004aea:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <SX1276OnDio1Irq+0x190>)
 8004aec:	18d0      	adds	r0, r2, r3
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004af6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	0019      	movs	r1, r3
 8004b00:	f7ff fc48 	bl	8004394 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8004b04:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004b06:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <SX1276OnDio1Irq+0x188>)
 8004b0a:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004b0c:	e000      	b.n	8004b10 <SX1276OnDio1Irq+0x180>
                break;
 8004b0e:	46c0      	nop			; (mov r8, r8)
            break;
 8004b10:	46c0      	nop			; (mov r8, r8)
    }
}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000514 	.word	0x20000514
 8004b1c:	2000054a 	.word	0x2000054a
 8004b20:	200000b0 	.word	0x200000b0
 8004b24:	20000574 	.word	0x20000574
 8004b28:	200000ac 	.word	0x200000ac
 8004b2c:	0800c208 	.word	0x0800c208

08004b30 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
    
    switch( SX1276.Settings.State )
 8004b3a:	4b58      	ldr	r3, [pc, #352]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004b3c:	791b      	ldrb	r3, [r3, #4]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d003      	beq.n	8004b4a <SX1276OnDio2Irq+0x1a>
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d100      	bne.n	8004b48 <SX1276OnDio2Irq+0x18>
 8004b46:	e079      	b.n	8004c3c <SX1276OnDio2Irq+0x10c>
            default:
                break;
            }
            break;
        default:
            break;
 8004b48:	e0a3      	b.n	8004c92 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 8004b4a:	4b54      	ldr	r3, [pc, #336]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004b4c:	795b      	ldrb	r3, [r3, #5]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <SX1276OnDio2Irq+0x28>
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d04e      	beq.n	8004bf4 <SX1276OnDio2Irq+0xc4>
                break;
 8004b56:	e070      	b.n	8004c3a <SX1276OnDio2Irq+0x10a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004b58:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004b5a:	222c      	movs	r2, #44	; 0x2c
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8004b60:	4b4e      	ldr	r3, [pc, #312]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004b62:	222c      	movs	r2, #44	; 0x2c
 8004b64:	5c9b      	ldrb	r3, [r3, r2]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d164      	bne.n	8004c34 <SX1276OnDio2Irq+0x104>
 8004b6a:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004b6c:	222d      	movs	r2, #45	; 0x2d
 8004b6e:	5c9b      	ldrb	r3, [r3, r2]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d15f      	bne.n	8004c34 <SX1276OnDio2Irq+0x104>
                    TimerStop( &RxTimeoutSyncWord );
 8004b74:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <SX1276OnDio2Irq+0x170>)
 8004b76:	0018      	movs	r0, r3
 8004b78:	f004 fca2 	bl	80094c0 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8004b7c:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004b7e:	222d      	movs	r2, #45	; 0x2d
 8004b80:	2101      	movs	r1, #1
 8004b82:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004b84:	2011      	movs	r0, #17
 8004b86:	f7ff fb64 	bl	8004252 <SX1276Read>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	425b      	negs	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	b259      	sxtb	r1, r3
 8004b96:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004b98:	222e      	movs	r2, #46	; 0x2e
 8004b9a:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8004b9c:	201b      	movs	r0, #27
 8004b9e:	f7ff fb58 	bl	8004252 <SX1276Read>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8004ba6:	201c      	movs	r0, #28
 8004ba8:	f7ff fb53 	bl	8004252 <SX1276Read>
 8004bac:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8004bae:	4323      	orrs	r3, r4
 8004bb0:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4a37      	ldr	r2, [pc, #220]	; (8004ca4 <SX1276OnDio2Irq+0x174>)
 8004bc6:	435a      	muls	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4936      	ldr	r1, [pc, #216]	; (8004ca4 <SX1276OnDio2Irq+0x174>)
 8004bcc:	434b      	muls	r3, r1
 8004bce:	3380      	adds	r3, #128	; 0x80
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	18d3      	adds	r3, r2, r3
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8004bda:	200c      	movs	r0, #12
 8004bdc:	f7ff fb39 	bl	8004252 <SX1276Read>
 8004be0:	0003      	movs	r3, r0
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2207      	movs	r2, #7
 8004be8:	4013      	ands	r3, r2
 8004bea:	b2d9      	uxtb	r1, r3
 8004bec:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004bee:	2234      	movs	r2, #52	; 0x34
 8004bf0:	5499      	strb	r1, [r3, r2]
                break;
 8004bf2:	e01f      	b.n	8004c34 <SX1276OnDio2Irq+0x104>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004bf4:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004bf6:	224f      	movs	r2, #79	; 0x4f
 8004bf8:	5c9b      	ldrb	r3, [r3, r2]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01c      	beq.n	8004c38 <SX1276OnDio2Irq+0x108>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004bfe:	2102      	movs	r1, #2
 8004c00:	2012      	movs	r0, #18
 8004c02:	f7ff fb12 	bl	800422a <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004c06:	4b28      	ldr	r3, [pc, #160]	; (8004ca8 <SX1276OnDio2Irq+0x178>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d014      	beq.n	8004c38 <SX1276OnDio2Irq+0x108>
 8004c0e:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <SX1276OnDio2Irq+0x178>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00f      	beq.n	8004c38 <SX1276OnDio2Irq+0x108>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004c18:	4b23      	ldr	r3, [pc, #140]	; (8004ca8 <SX1276OnDio2Irq+0x178>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695c      	ldr	r4, [r3, #20]
 8004c1e:	201c      	movs	r0, #28
 8004c20:	f7ff fb17 	bl	8004252 <SX1276Read>
 8004c24:	0003      	movs	r3, r0
 8004c26:	001a      	movs	r2, r3
 8004c28:	233f      	movs	r3, #63	; 0x3f
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	0018      	movs	r0, r3
 8004c30:	47a0      	blx	r4
                break;
 8004c32:	e001      	b.n	8004c38 <SX1276OnDio2Irq+0x108>
                break;
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	e02c      	b.n	8004c92 <SX1276OnDio2Irq+0x162>
                break;
 8004c38:	46c0      	nop			; (mov r8, r8)
            break;
 8004c3a:	e02a      	b.n	8004c92 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 8004c3c:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004c3e:	795b      	ldrb	r3, [r3, #5]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d022      	beq.n	8004c8a <SX1276OnDio2Irq+0x15a>
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d000      	beq.n	8004c4a <SX1276OnDio2Irq+0x11a>
                break;
 8004c48:	e022      	b.n	8004c90 <SX1276OnDio2Irq+0x160>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004c4a:	4b14      	ldr	r3, [pc, #80]	; (8004c9c <SX1276OnDio2Irq+0x16c>)
 8004c4c:	224f      	movs	r2, #79	; 0x4f
 8004c4e:	5c9b      	ldrb	r3, [r3, r2]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01c      	beq.n	8004c8e <SX1276OnDio2Irq+0x15e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004c54:	2102      	movs	r1, #2
 8004c56:	2012      	movs	r0, #18
 8004c58:	f7ff fae7 	bl	800422a <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <SX1276OnDio2Irq+0x178>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d014      	beq.n	8004c8e <SX1276OnDio2Irq+0x15e>
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <SX1276OnDio2Irq+0x178>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00f      	beq.n	8004c8e <SX1276OnDio2Irq+0x15e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004c6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <SX1276OnDio2Irq+0x178>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695c      	ldr	r4, [r3, #20]
 8004c74:	201c      	movs	r0, #28
 8004c76:	f7ff faec 	bl	8004252 <SX1276Read>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	233f      	movs	r3, #63	; 0x3f
 8004c80:	4013      	ands	r3, r2
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	0018      	movs	r0, r3
 8004c86:	47a0      	blx	r4
                break;
 8004c88:	e001      	b.n	8004c8e <SX1276OnDio2Irq+0x15e>
                break;
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	e000      	b.n	8004c90 <SX1276OnDio2Irq+0x160>
                break;
 8004c8e:	46c0      	nop			; (mov r8, r8)
            break;
 8004c90:	46c0      	nop			; (mov r8, r8)
    }
}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b005      	add	sp, #20
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	20000514 	.word	0x20000514
 8004ca0:	20000500 	.word	0x20000500
 8004ca4:	00003d09 	.word	0x00003d09
 8004ca8:	200000ac 	.word	0x200000ac

08004cac <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8004cb0:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <SX1276OnDio3Irq+0x7c>)
 8004cb2:	795b      	ldrb	r3, [r3, #5]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d031      	beq.n	8004d1c <SX1276OnDio3Irq+0x70>
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d000      	beq.n	8004cbe <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8004cbc:	e031      	b.n	8004d22 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8004cbe:	2012      	movs	r0, #18
 8004cc0:	f7ff fac7 	bl	8004252 <SX1276Read>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	001a      	movs	r2, r3
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d112      	bne.n	8004cf6 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8004cd0:	2105      	movs	r1, #5
 8004cd2:	2012      	movs	r0, #18
 8004cd4:	f7ff faa9 	bl	800422a <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <SX1276OnDio3Irq+0x80>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01f      	beq.n	8004d20 <SX1276OnDio3Irq+0x74>
 8004ce0:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <SX1276OnDio3Irq+0x80>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01a      	beq.n	8004d20 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <SX1276OnDio3Irq+0x80>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	4798      	blx	r3
        break;
 8004cf4:	e014      	b.n	8004d20 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	2012      	movs	r0, #18
 8004cfa:	f7ff fa96 	bl	800422a <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <SX1276OnDio3Irq+0x80>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <SX1276OnDio3Irq+0x74>
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <SX1276OnDio3Irq+0x80>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <SX1276OnDio3Irq+0x80>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2000      	movs	r0, #0
 8004d18:	4798      	blx	r3
        break;
 8004d1a:	e001      	b.n	8004d20 <SX1276OnDio3Irq+0x74>
        break;
 8004d1c:	46c0      	nop			; (mov r8, r8)
 8004d1e:	e000      	b.n	8004d22 <SX1276OnDio3Irq+0x76>
        break;
 8004d20:	46c0      	nop			; (mov r8, r8)
    }
}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000514 	.word	0x20000514
 8004d2c:	200000ac 	.word	0x200000ac

08004d30 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <SX1276OnDio4Irq+0x34>)
 8004d36:	795b      	ldrb	r3, [r3, #5]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <SX1276OnDio4Irq+0x12>
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d00a      	beq.n	8004d56 <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8004d40:	e00c      	b.n	8004d5c <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <SX1276OnDio4Irq+0x34>)
 8004d44:	222c      	movs	r2, #44	; 0x2c
 8004d46:	5c9b      	ldrb	r3, [r3, r2]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <SX1276OnDio4Irq+0x34>)
 8004d4e:	222c      	movs	r2, #44	; 0x2c
 8004d50:	2101      	movs	r1, #1
 8004d52:	5499      	strb	r1, [r3, r2]
        break;
 8004d54:	e001      	b.n	8004d5a <SX1276OnDio4Irq+0x2a>
        break;
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	e000      	b.n	8004d5c <SX1276OnDio4Irq+0x2c>
        break;
 8004d5a:	46c0      	nop			; (mov r8, r8)
    }
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	20000514 	.word	0x20000514

08004d68 <SX1276IoInit>:
  SX1276SetMaxPayloadLength
};


void SX1276IoInit( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	0018      	movs	r0, r3
 8004d72:	2314      	movs	r3, #20
 8004d74:	001a      	movs	r2, r3
 8004d76:	2100      	movs	r1, #0
 8004d78:	f006 fc8f 	bl	800b69a <memset>
  
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8004d7c:	1d3b      	adds	r3, r7, #4
 8004d7e:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <SX1276IoInit+0x7c>)
 8004d80:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	2201      	movs	r2, #1
 8004d86:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	4815      	ldr	r0, [pc, #84]	; (8004de8 <SX1276IoInit+0x80>)
 8004d92:	001a      	movs	r2, r3
 8004d94:	2110      	movs	r1, #16
 8004d96:	f004 fd3b 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8004d9a:	1d3b      	adds	r3, r7, #4
 8004d9c:	4812      	ldr	r0, [pc, #72]	; (8004de8 <SX1276IoInit+0x80>)
 8004d9e:	001a      	movs	r2, r3
 8004da0:	2102      	movs	r1, #2
 8004da2:	f004 fd35 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	480f      	ldr	r0, [pc, #60]	; (8004de8 <SX1276IoInit+0x80>)
 8004daa:	001a      	movs	r2, r3
 8004dac:	2101      	movs	r1, #1
 8004dae:	f004 fd2f 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8004db2:	1d3a      	adds	r2, r7, #4
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	019b      	lsls	r3, r3, #6
 8004db8:	480c      	ldr	r0, [pc, #48]	; (8004dec <SX1276IoInit+0x84>)
 8004dba:	0019      	movs	r1, r3
 8004dbc:	f004 fd28 	bl	8009810 <HW_GPIO_Init>
  
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;  
 8004dc6:	1d3b      	adds	r3, r7, #4
 8004dc8:	2200      	movs	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8004dcc:	1d3a      	adds	r2, r7, #4
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	0159      	lsls	r1, r3, #5
 8004dd2:	23a0      	movs	r3, #160	; 0xa0
 8004dd4:	05db      	lsls	r3, r3, #23
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f004 fd1a 	bl	8009810 <HW_GPIO_Init>
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b006      	add	sp, #24
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	10110000 	.word	0x10110000
 8004de8:	50000400 	.word	0x50000400
 8004dec:	50000800 	.word	0x50000800

08004df0 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4811      	ldr	r0, [pc, #68]	; (8004e44 <SX1276IoIrqInit+0x54>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2110      	movs	r1, #16
 8004e02:	f004 fd79 	bl	80098f8 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	480d      	ldr	r0, [pc, #52]	; (8004e44 <SX1276IoIrqInit+0x54>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2102      	movs	r1, #2
 8004e12:	f004 fd71 	bl	80098f8 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4809      	ldr	r0, [pc, #36]	; (8004e44 <SX1276IoIrqInit+0x54>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2101      	movs	r1, #1
 8004e22:	f004 fd69 	bl	80098f8 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	0199      	lsls	r1, r3, #6
 8004e30:	4805      	ldr	r0, [pc, #20]	; (8004e48 <SX1276IoIrqInit+0x58>)
 8004e32:	0013      	movs	r3, r2
 8004e34:	2200      	movs	r2, #0
 8004e36:	f004 fd5f 	bl	80098f8 <HW_GPIO_SetIrq>
}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b002      	add	sp, #8
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	50000400 	.word	0x50000400
 8004e48:	50000800 	.word	0x50000800

08004e4c <SX1276IoDeInit>:


void SX1276IoDeInit( void )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004e52:	1d3b      	adds	r3, r7, #4
 8004e54:	0018      	movs	r0, r3
 8004e56:	2314      	movs	r3, #20
 8004e58:	001a      	movs	r2, r3
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	f006 fc1d 	bl	800b69a <memset>

  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 8004e60:	1d3b      	adds	r3, r7, #4
 8004e62:	4a11      	ldr	r2, [pc, #68]	; (8004ea8 <SX1276IoDeInit+0x5c>)
 8004e64:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 8004e66:	1d3b      	adds	r3, r7, #4
 8004e68:	2202      	movs	r2, #2
 8004e6a:	609a      	str	r2, [r3, #8]
  
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8004e6c:	1d3b      	adds	r3, r7, #4
 8004e6e:	480f      	ldr	r0, [pc, #60]	; (8004eac <SX1276IoDeInit+0x60>)
 8004e70:	001a      	movs	r2, r3
 8004e72:	2110      	movs	r1, #16
 8004e74:	f004 fccc 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8004e78:	1d3b      	adds	r3, r7, #4
 8004e7a:	480c      	ldr	r0, [pc, #48]	; (8004eac <SX1276IoDeInit+0x60>)
 8004e7c:	001a      	movs	r2, r3
 8004e7e:	2102      	movs	r1, #2
 8004e80:	f004 fcc6 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	4809      	ldr	r0, [pc, #36]	; (8004eac <SX1276IoDeInit+0x60>)
 8004e88:	001a      	movs	r2, r3
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	f004 fcc0 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8004e90:	1d3a      	adds	r2, r7, #4
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	019b      	lsls	r3, r3, #6
 8004e96:	4806      	ldr	r0, [pc, #24]	; (8004eb0 <SX1276IoDeInit+0x64>)
 8004e98:	0019      	movs	r1, r3
 8004e9a:	f004 fcb9 	bl	8009810 <HW_GPIO_Init>
}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b006      	add	sp, #24
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	10110000 	.word	0x10110000
 8004eac:	50000400 	.word	0x50000400
 8004eb0:	50000800 	.word	0x50000800

08004eb4 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	0002      	movs	r2, r0
 8004ebc:	1dfb      	adds	r3, r7, #7
 8004ebe:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8004ec8:	230e      	movs	r3, #14
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 8004ed0:	230f      	movs	r3, #15
 8004ed2:	18fc      	adds	r4, r7, r3
 8004ed4:	2009      	movs	r0, #9
 8004ed6:	f7ff f9bc 	bl	8004252 <SX1276Read>
 8004eda:	0003      	movs	r3, r0
 8004edc:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8004ede:	230e      	movs	r3, #14
 8004ee0:	18fc      	adds	r4, r7, r3
 8004ee2:	204d      	movs	r0, #77	; 0x4d
 8004ee4:	f7ff f9b5 	bl	8004252 <SX1276Read>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 8004eec:	230f      	movs	r3, #15
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	227f      	movs	r2, #127	; 0x7f
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	b25c      	sxtb	r4, r3
 8004efa:	4b5e      	ldr	r3, [pc, #376]	; (8005074 <SX1276SetRfTxPower+0x1c0>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0018      	movs	r0, r3
 8004f00:	f000 f8ba 	bl	8005078 <SX1276GetPaSelect>
 8004f04:	0003      	movs	r3, r0
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	4323      	orrs	r3, r4
 8004f0a:	b25a      	sxtb	r2, r3
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8004f12:	230f      	movs	r3, #15
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	220f      	movs	r2, #15
 8004f18:	18ba      	adds	r2, r7, r2
 8004f1a:	7812      	ldrb	r2, [r2, #0]
 8004f1c:	2170      	movs	r1, #112	; 0x70
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004f22:	230f      	movs	r3, #15
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da6b      	bge.n	8005006 <SX1276SetRfTxPower+0x152>
    {
        if( power > 17 )
 8004f2e:	1dfb      	adds	r3, r7, #7
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	b25b      	sxtb	r3, r3
 8004f34:	2b11      	cmp	r3, #17
 8004f36:	dd08      	ble.n	8004f4a <SX1276SetRfTxPower+0x96>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8004f38:	230e      	movs	r3, #14
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	220e      	movs	r2, #14
 8004f3e:	18ba      	adds	r2, r7, r2
 8004f40:	7812      	ldrb	r2, [r2, #0]
 8004f42:	2107      	movs	r1, #7
 8004f44:	430a      	orrs	r2, r1
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e00c      	b.n	8004f64 <SX1276SetRfTxPower+0xb0>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8004f4a:	230e      	movs	r3, #14
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b25b      	sxtb	r3, r3
 8004f52:	2207      	movs	r2, #7
 8004f54:	4393      	bics	r3, r2
 8004f56:	b25b      	sxtb	r3, r3
 8004f58:	2204      	movs	r2, #4
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	b25a      	sxtb	r2, r3
 8004f5e:	230e      	movs	r3, #14
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8004f64:	230e      	movs	r3, #14
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2207      	movs	r2, #7
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b07      	cmp	r3, #7
 8004f70:	d124      	bne.n	8004fbc <SX1276SetRfTxPower+0x108>
        {
            if( power < 5 )
 8004f72:	1dfb      	adds	r3, r7, #7
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b25b      	sxtb	r3, r3
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	dc02      	bgt.n	8004f82 <SX1276SetRfTxPower+0xce>
            {
                power = 5;
 8004f7c:	1dfb      	adds	r3, r7, #7
 8004f7e:	2205      	movs	r2, #5
 8004f80:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8004f82:	1dfb      	adds	r3, r7, #7
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b25b      	sxtb	r3, r3
 8004f88:	2b14      	cmp	r3, #20
 8004f8a:	dd02      	ble.n	8004f92 <SX1276SetRfTxPower+0xde>
            {
                power = 20;
 8004f8c:	1dfb      	adds	r3, r7, #7
 8004f8e:	2214      	movs	r2, #20
 8004f90:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8004f92:	230f      	movs	r3, #15
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	220f      	movs	r2, #15
 8004f9c:	4393      	bics	r3, r2
 8004f9e:	b25a      	sxtb	r2, r3
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	3b05      	subs	r3, #5
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	b25b      	sxtb	r3, r3
 8004faa:	210f      	movs	r1, #15
 8004fac:	400b      	ands	r3, r1
 8004fae:	b25b      	sxtb	r3, r3
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	b25a      	sxtb	r2, r3
 8004fb4:	230f      	movs	r3, #15
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	e048      	b.n	800504e <SX1276SetRfTxPower+0x19a>
        }
        else
        {
            if( power < 2 )
 8004fbc:	1dfb      	adds	r3, r7, #7
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	b25b      	sxtb	r3, r3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	dc02      	bgt.n	8004fcc <SX1276SetRfTxPower+0x118>
            {
                power = 2;
 8004fc6:	1dfb      	adds	r3, r7, #7
 8004fc8:	2202      	movs	r2, #2
 8004fca:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8004fcc:	1dfb      	adds	r3, r7, #7
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	2b11      	cmp	r3, #17
 8004fd4:	dd02      	ble.n	8004fdc <SX1276SetRfTxPower+0x128>
            {
                power = 17;
 8004fd6:	1dfb      	adds	r3, r7, #7
 8004fd8:	2211      	movs	r2, #17
 8004fda:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8004fdc:	230f      	movs	r3, #15
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	220f      	movs	r2, #15
 8004fe6:	4393      	bics	r3, r2
 8004fe8:	b25a      	sxtb	r2, r3
 8004fea:	1dfb      	adds	r3, r7, #7
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	3b02      	subs	r3, #2
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	210f      	movs	r1, #15
 8004ff6:	400b      	ands	r3, r1
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b25a      	sxtb	r2, r3
 8004ffe:	230f      	movs	r3, #15
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e023      	b.n	800504e <SX1276SetRfTxPower+0x19a>
        }
    }
    else
    {
        if( power < -1 )
 8005006:	1dfb      	adds	r3, r7, #7
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b25b      	sxtb	r3, r3
 800500c:	3301      	adds	r3, #1
 800500e:	da02      	bge.n	8005016 <SX1276SetRfTxPower+0x162>
        {
            power = -1;
 8005010:	1dfb      	adds	r3, r7, #7
 8005012:	22ff      	movs	r2, #255	; 0xff
 8005014:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 8005016:	1dfb      	adds	r3, r7, #7
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	b25b      	sxtb	r3, r3
 800501c:	2b0e      	cmp	r3, #14
 800501e:	dd02      	ble.n	8005026 <SX1276SetRfTxPower+0x172>
        {
            power = 14;
 8005020:	1dfb      	adds	r3, r7, #7
 8005022:	220e      	movs	r2, #14
 8005024:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8005026:	230f      	movs	r3, #15
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b25b      	sxtb	r3, r3
 800502e:	220f      	movs	r2, #15
 8005030:	4393      	bics	r3, r2
 8005032:	b25a      	sxtb	r2, r3
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	3301      	adds	r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	b25b      	sxtb	r3, r3
 800503e:	210f      	movs	r1, #15
 8005040:	400b      	ands	r3, r1
 8005042:	b25b      	sxtb	r3, r3
 8005044:	4313      	orrs	r3, r2
 8005046:	b25a      	sxtb	r2, r3
 8005048:	230f      	movs	r3, #15
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800504e:	230f      	movs	r3, #15
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	0019      	movs	r1, r3
 8005056:	2009      	movs	r0, #9
 8005058:	f7ff f8e7 	bl	800422a <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800505c:	230e      	movs	r3, #14
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	0019      	movs	r1, r3
 8005064:	204d      	movs	r0, #77	; 0x4d
 8005066:	f7ff f8e0 	bl	800422a <SX1276Write>
}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	46bd      	mov	sp, r7
 800506e:	b005      	add	sp, #20
 8005070:	bd90      	pop	{r4, r7, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	20000514 	.word	0x20000514

08005078 <SX1276GetPaSelect>:
uint8_t SX1276GetPaSelect( uint32_t channel )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_RFO;
 8005080:	2300      	movs	r3, #0
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b002      	add	sp, #8
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <SX1276SetAntSwLowPower>:



void SX1276SetAntSwLowPower( bool status )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	0002      	movs	r2, r0
 8005094:	1dfb      	adds	r3, r7, #7
 8005096:	701a      	strb	r2, [r3, #0]
  if( RadioIsActive != status )
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <SX1276SetAntSwLowPower+0x7c>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	1dfa      	adds	r2, r7, #7
 800509e:	7812      	ldrb	r2, [r2, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d02d      	beq.n	8005100 <SX1276SetAntSwLowPower+0x74>
  {
    RadioIsActive = status;
 80050a4:	4b18      	ldr	r3, [pc, #96]	; (8005108 <SX1276SetAntSwLowPower+0x7c>)
 80050a6:	1dfa      	adds	r2, r7, #7
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	701a      	strb	r2, [r3, #0]
    
    if( status == false )
 80050ac:	1dfb      	adds	r3, r7, #7
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2201      	movs	r2, #1
 80050b2:	4053      	eors	r3, r2
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d011      	beq.n	80050de <SX1276SetAntSwLowPower+0x52>
    {
      TimerStop( &TcxoStopTimer );
 80050ba:	4b14      	ldr	r3, [pc, #80]	; (800510c <SX1276SetAntSwLowPower+0x80>)
 80050bc:	0018      	movs	r0, r3
 80050be:	f004 f9ff 	bl	80094c0 <TimerStop>
      
      MLM_TCXO_ON();  //TCXO ON
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	0159      	lsls	r1, r3, #5
 80050c6:	23a0      	movs	r3, #160	; 0xa0
 80050c8:	05db      	lsls	r3, r3, #23
 80050ca:	2201      	movs	r2, #1
 80050cc:	0018      	movs	r0, r3
 80050ce:	f004 fc6b 	bl	80099a8 <HW_GPIO_Write>
      
      DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 80050d2:	2003      	movs	r0, #3
 80050d4:	f004 f848 	bl	8009168 <DelayMs>
      
      SX1276AntSwInit( );
 80050d8:	f000 f81c 	bl	8005114 <SX1276AntSwInit>
      TimerSetValue( &TcxoStopTimer, TCXO_OFF_DELAY);
      
      TimerStart( &TcxoStopTimer );
    }
  }
}
 80050dc:	e010      	b.n	8005100 <SX1276SetAntSwLowPower+0x74>
      SX1276AntSwDeInit( );
 80050de:	f000 f859 	bl	8005194 <SX1276AntSwDeInit>
      TimerInit( &TcxoStopTimer, OnTcxoStopTimerEvent );
 80050e2:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <SX1276SetAntSwLowPower+0x84>)
 80050e4:	4b09      	ldr	r3, [pc, #36]	; (800510c <SX1276SetAntSwLowPower+0x80>)
 80050e6:	0011      	movs	r1, r2
 80050e8:	0018      	movs	r0, r3
 80050ea:	f004 f8bb 	bl	8009264 <TimerInit>
      TimerSetValue( &TcxoStopTimer, TCXO_OFF_DELAY);
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <SX1276SetAntSwLowPower+0x80>)
 80050f0:	2102      	movs	r1, #2
 80050f2:	0018      	movs	r0, r3
 80050f4:	f004 fa78 	bl	80095e8 <TimerSetValue>
      TimerStart( &TcxoStopTimer );
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <SX1276SetAntSwLowPower+0x80>)
 80050fa:	0018      	movs	r0, r3
 80050fc:	f004 f8ca 	bl	8009294 <TimerStart>
}
 8005100:	46c0      	nop			; (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	b002      	add	sp, #8
 8005106:	bd80      	pop	{r7, pc}
 8005108:	200001c4 	.word	0x200001c4
 800510c:	200001b0 	.word	0x200001b0
 8005110:	0800528d 	.word	0x0800528d

08005114 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	0018      	movs	r0, r3
 800511e:	2314      	movs	r3, #20
 8005120:	001a      	movs	r2, r3
 8005122:	2100      	movs	r1, #0
 8005124:	f006 fab9 	bl	800b69a <memset>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8005128:	1d3b      	adds	r3, r7, #4
 800512a:	2201      	movs	r2, #1
 800512c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP;
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	2200      	movs	r2, #0
 8005132:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	2203      	movs	r2, #3
 8005138:	60da      	str	r2, [r3, #12]
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 800513a:	1d3a      	adds	r2, r7, #4
 800513c:	23a0      	movs	r3, #160	; 0xa0
 800513e:	05db      	lsls	r3, r3, #23
 8005140:	2102      	movs	r1, #2
 8005142:	0018      	movs	r0, r3
 8005144:	f004 fb64 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8005148:	23a0      	movs	r3, #160	; 0xa0
 800514a:	05db      	lsls	r3, r3, #23
 800514c:	2200      	movs	r2, #0
 800514e:	2102      	movs	r1, #2
 8005150:	0018      	movs	r0, r3
 8005152:	f004 fc29 	bl	80099a8 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8005156:	1d3b      	adds	r3, r7, #4
 8005158:	480d      	ldr	r0, [pc, #52]	; (8005190 <SX1276AntSwInit+0x7c>)
 800515a:	001a      	movs	r2, r3
 800515c:	2102      	movs	r1, #2
 800515e:	f004 fb57 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <SX1276AntSwInit+0x7c>)
 8005164:	2200      	movs	r2, #0
 8005166:	2102      	movs	r1, #2
 8005168:	0018      	movs	r0, r3
 800516a:	f004 fc1d 	bl	80099a8 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	4807      	ldr	r0, [pc, #28]	; (8005190 <SX1276AntSwInit+0x7c>)
 8005172:	001a      	movs	r2, r3
 8005174:	2104      	movs	r1, #4
 8005176:	f004 fb4b 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <SX1276AntSwInit+0x7c>)
 800517c:	2200      	movs	r2, #0
 800517e:	2104      	movs	r1, #4
 8005180:	0018      	movs	r0, r3
 8005182:	f004 fc11 	bl	80099a8 <HW_GPIO_Write>
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b006      	add	sp, #24
 800518c:	bd80      	pop	{r7, pc}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	50000800 	.word	0x50000800

08005194 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	0018      	movs	r0, r3
 800519e:	2314      	movs	r3, #20
 80051a0:	001a      	movs	r2, r3
 80051a2:	2100      	movs	r1, #0
 80051a4:	f006 fa79 	bl	800b69a <memset>

  initStruct.Mode = GPIO_MODE_ANALOG ;
 80051a8:	1d3b      	adds	r3, r7, #4
 80051aa:	2203      	movs	r2, #3
 80051ac:	605a      	str	r2, [r3, #4]
  
  initStruct.Pull = GPIO_NOPULL;
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	2200      	movs	r2, #0
 80051b2:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	2203      	movs	r2, #3
 80051b8:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 80051ba:	1d3a      	adds	r2, r7, #4
 80051bc:	23a0      	movs	r3, #160	; 0xa0
 80051be:	05db      	lsls	r3, r3, #23
 80051c0:	2102      	movs	r1, #2
 80051c2:	0018      	movs	r0, r3
 80051c4:	f004 fb24 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 80051c8:	23a0      	movs	r3, #160	; 0xa0
 80051ca:	05db      	lsls	r3, r3, #23
 80051cc:	2200      	movs	r2, #0
 80051ce:	2102      	movs	r1, #2
 80051d0:	0018      	movs	r0, r3
 80051d2:	f004 fbe9 	bl	80099a8 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	480d      	ldr	r0, [pc, #52]	; (8005210 <SX1276AntSwDeInit+0x7c>)
 80051da:	001a      	movs	r2, r3
 80051dc:	2102      	movs	r1, #2
 80051de:	f004 fb17 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <SX1276AntSwDeInit+0x7c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	2102      	movs	r1, #2
 80051e8:	0018      	movs	r0, r3
 80051ea:	f004 fbdd 	bl	80099a8 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 80051ee:	1d3b      	adds	r3, r7, #4
 80051f0:	4807      	ldr	r0, [pc, #28]	; (8005210 <SX1276AntSwDeInit+0x7c>)
 80051f2:	001a      	movs	r2, r3
 80051f4:	2104      	movs	r1, #4
 80051f6:	f004 fb0b 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <SX1276AntSwDeInit+0x7c>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	2104      	movs	r1, #4
 8005200:	0018      	movs	r0, r3
 8005202:	f004 fbd1 	bl	80099a8 <HW_GPIO_Write>
}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	46bd      	mov	sp, r7
 800520a:	b006      	add	sp, #24
 800520c:	bd80      	pop	{r7, pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	50000800 	.word	0x50000800

08005214 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	0002      	movs	r2, r0
 800521c:	1dfb      	adds	r3, r7, #7
 800521e:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8005220:	230f      	movs	r3, #15
 8005222:	18fc      	adds	r4, r7, r3
 8005224:	2009      	movs	r0, #9
 8005226:	f7ff f814 	bl	8004252 <SX1276Read>
 800522a:	0003      	movs	r3, r0
 800522c:	7023      	strb	r3, [r4, #0]
      switch( opMode )
 800522e:	1dfb      	adds	r3, r7, #7
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d116      	bne.n	8005264 <SX1276SetAntSw+0x50>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005236:	230f      	movs	r3, #15
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	b25b      	sxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	da06      	bge.n	8005250 <SX1276SetAntSw+0x3c>
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <SX1276SetAntSw+0x70>)
 8005244:	2201      	movs	r2, #1
 8005246:	2102      	movs	r1, #2
 8005248:	0018      	movs	r0, r3
 800524a:	f004 fbad 	bl	80099a8 <HW_GPIO_Write>
 800524e:	e005      	b.n	800525c <SX1276SetAntSw+0x48>
      }
      else
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <SX1276SetAntSw+0x70>)
 8005252:	2201      	movs	r2, #1
 8005254:	2104      	movs	r1, #4
 8005256:	0018      	movs	r0, r3
 8005258:	f004 fba6 	bl	80099a8 <HW_GPIO_Write>
      }
      SX1276.RxTx = 1;
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <SX1276SetAntSw+0x74>)
 800525e:	2201      	movs	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
	  break;
 8005262:	e00a      	b.n	800527a <SX1276SetAntSw+0x66>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
    	SX1276.RxTx = 0;
 8005264:	4b08      	ldr	r3, [pc, #32]	; (8005288 <SX1276SetAntSw+0x74>)
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 800526a:	23a0      	movs	r3, #160	; 0xa0
 800526c:	05db      	lsls	r3, r3, #23
 800526e:	2201      	movs	r2, #1
 8005270:	2102      	movs	r1, #2
 8005272:	0018      	movs	r0, r3
 8005274:	f004 fb98 	bl	80099a8 <HW_GPIO_Write>
        break;
 8005278:	46c0      	nop			; (mov r8, r8)
    }
  
}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	46bd      	mov	sp, r7
 800527e:	b005      	add	sp, #20
 8005280:	bd90      	pop	{r4, r7, pc}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	50000800 	.word	0x50000800
 8005288:	20000514 	.word	0x20000514

0800528c <OnTcxoStopTimerEvent>:

static void OnTcxoStopTimerEvent( void )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  TimerStop( &TcxoStopTimer );
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <OnTcxoStopTimerEvent+0x24>)
 8005292:	0018      	movs	r0, r3
 8005294:	f004 f914 	bl	80094c0 <TimerStop>

  MLM_TCXO_OFF();  //TCXO OFF
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	0159      	lsls	r1, r3, #5
 800529c:	23a0      	movs	r3, #160	; 0xa0
 800529e:	05db      	lsls	r3, r3, #23
 80052a0:	2200      	movs	r2, #0
 80052a2:	0018      	movs	r0, r3
 80052a4:	f004 fb80 	bl	80099a8 <HW_GPIO_Write>
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	200001b0 	.word	0x200001b0

080052b4 <SX1276CheckRfFrequency>:



bool SX1276CheckRfFrequency( uint32_t frequency )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 80052bc:	2301      	movs	r3, #1
}
 80052be:	0018      	movs	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b002      	add	sp, #8
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052cc:	4b07      	ldr	r3, [pc, #28]	; (80052ec <HAL_Init+0x24>)
 80052ce:	4a07      	ldr	r2, [pc, #28]	; (80052ec <HAL_Init+0x24>)
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	2102      	movs	r1, #2
 80052d4:	430a      	orrs	r2, r1
 80052d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80052d8:	2003      	movs	r0, #3
 80052da:	f005 fc1a 	bl	800ab12 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052de:	f005 fc21 	bl	800ab24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	0018      	movs	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	40022000 	.word	0x40022000

080052f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  uwTick++;
 80052f4:	4b03      	ldr	r3, [pc, #12]	; (8005304 <HAL_IncTick+0x14>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	4b02      	ldr	r3, [pc, #8]	; (8005304 <HAL_IncTick+0x14>)
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000588 	.word	0x20000588

08005308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  return uwTick;
 800530c:	4b02      	ldr	r3, [pc, #8]	; (8005318 <HAL_GetTick+0x10>)
 800530e:	681b      	ldr	r3, [r3, #0]
}
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	20000588 	.word	0x20000588

0800531c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005320:	4b04      	ldr	r3, [pc, #16]	; (8005334 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8005322:	4a04      	ldr	r2, [pc, #16]	; (8005334 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8005324:	6852      	ldr	r2, [r2, #4]
 8005326:	2101      	movs	r1, #1
 8005328:	438a      	bics	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	40015800 	.word	0x40015800

08005338 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 800533e:	4a04      	ldr	r2, [pc, #16]	; (8005350 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8005340:	6852      	ldr	r2, [r2, #4]
 8005342:	2102      	movs	r1, #2
 8005344:	438a      	bics	r2, r1
 8005346:	605a      	str	r2, [r3, #4]
}
 8005348:	46c0      	nop			; (mov r8, r8)
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	40015800 	.word	0x40015800

08005354 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800535a:	4a04      	ldr	r2, [pc, #16]	; (800536c <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800535c:	6852      	ldr	r2, [r2, #4]
 800535e:	2104      	movs	r1, #4
 8005360:	438a      	bics	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	40015800 	.word	0x40015800

08005370 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e153      	b.n	800562a <HAL_ADC_Init+0x2ba>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2254      	movs	r2, #84	; 0x54
 8005394:	2100      	movs	r1, #0
 8005396:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0018      	movs	r0, r3
 800539c:	f000 f956 	bl	800564c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a4:	2210      	movs	r2, #16
 80053a6:	4013      	ands	r3, r2
 80053a8:	d105      	bne.n	80053b6 <HAL_ADC_Init+0x46>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2204      	movs	r2, #4
 80053b2:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80053b4:	d00b      	beq.n	80053ce <HAL_ADC_Init+0x5e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ba:	2210      	movs	r2, #16
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	659a      	str	r2, [r3, #88]	; 0x58
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2254      	movs	r2, #84	; 0x54
 80053c6:	2100      	movs	r1, #0
 80053c8:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e12d      	b.n	800562a <HAL_ADC_Init+0x2ba>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	4a98      	ldr	r2, [pc, #608]	; (8005634 <HAL_ADC_Init+0x2c4>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	2202      	movs	r2, #2
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	659a      	str	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2203      	movs	r2, #3
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d108      	bne.n	80053fe <HAL_ADC_Init+0x8e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	4013      	ands	r3, r2
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_ADC_Init+0x8e>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <HAL_ADC_Init+0x90>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d149      	bne.n	8005498 <HAL_ADC_Init+0x128>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	23c0      	movs	r3, #192	; 0xc0
 800540a:	061b      	lsls	r3, r3, #24
 800540c:	429a      	cmp	r2, r3
 800540e:	d00b      	beq.n	8005428 <HAL_ADC_Init+0xb8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	05db      	lsls	r3, r3, #23
 8005418:	429a      	cmp	r2, r3
 800541a:	d005      	beq.n	8005428 <HAL_ADC_Init+0xb8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	061b      	lsls	r3, r3, #24
 8005424:	429a      	cmp	r2, r3
 8005426:	d111      	bne.n	800544c <HAL_ADC_Init+0xdc>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	6912      	ldr	r2, [r2, #16]
 8005432:	0092      	lsls	r2, r2, #2
 8005434:	0892      	lsrs	r2, r2, #2
 8005436:	611a      	str	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	6911      	ldr	r1, [r2, #16]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6852      	ldr	r2, [r2, #4]
 8005446:	430a      	orrs	r2, r1
 8005448:	611a      	str	r2, [r3, #16]
 800544a:	e014      	b.n	8005476 <HAL_ADC_Init+0x106>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	6912      	ldr	r2, [r2, #16]
 8005456:	0092      	lsls	r2, r2, #2
 8005458:	0892      	lsrs	r2, r2, #2
 800545a:	611a      	str	r2, [r3, #16]
 800545c:	4b76      	ldr	r3, [pc, #472]	; (8005638 <HAL_ADC_Init+0x2c8>)
 800545e:	4a76      	ldr	r2, [pc, #472]	; (8005638 <HAL_ADC_Init+0x2c8>)
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	4976      	ldr	r1, [pc, #472]	; (800563c <HAL_ADC_Init+0x2cc>)
 8005464:	400a      	ands	r2, r1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	4a73      	ldr	r2, [pc, #460]	; (8005638 <HAL_ADC_Init+0x2c8>)
 800546a:	4b73      	ldr	r3, [pc, #460]	; (8005638 <HAL_ADC_Init+0x2c8>)
 800546c:	6819      	ldr	r1, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	430b      	orrs	r3, r1
 8005474:	6013      	str	r3, [r2, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	68d2      	ldr	r2, [r2, #12]
 8005480:	2118      	movs	r1, #24
 8005482:	438a      	bics	r2, r1
 8005484:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	68d1      	ldr	r1, [r2, #12]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6892      	ldr	r2, [r2, #8]
 8005494:	430a      	orrs	r2, r1
 8005496:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005498:	4b67      	ldr	r3, [pc, #412]	; (8005638 <HAL_ADC_Init+0x2c8>)
 800549a:	4a67      	ldr	r2, [pc, #412]	; (8005638 <HAL_ADC_Init+0x2c8>)
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	4968      	ldr	r1, [pc, #416]	; (8005640 <HAL_ADC_Init+0x2d0>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80054a4:	4a64      	ldr	r2, [pc, #400]	; (8005638 <HAL_ADC_Init+0x2c8>)
 80054a6:	4b64      	ldr	r3, [pc, #400]	; (8005638 <HAL_ADC_Init+0x2c8>)
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	065b      	lsls	r3, r3, #25
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6013      	str	r3, [r2, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	055b      	lsls	r3, r3, #21
 80054be:	4013      	ands	r3, r2
 80054c0:	d108      	bne.n	80054d4 <HAL_ADC_Init+0x164>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	6892      	ldr	r2, [r2, #8]
 80054cc:	2180      	movs	r1, #128	; 0x80
 80054ce:	0549      	lsls	r1, r1, #21
 80054d0:	430a      	orrs	r2, r1
 80054d2:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	68d2      	ldr	r2, [r2, #12]
 80054de:	4959      	ldr	r1, [pc, #356]	; (8005644 <HAL_ADC_Init+0x2d4>)
 80054e0:	400a      	ands	r2, r1
 80054e2:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	68d1      	ldr	r1, [r2, #12]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68d0      	ldr	r0, [r2, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6912      	ldr	r2, [r2, #16]
 80054f6:	2a02      	cmp	r2, #2
 80054f8:	d101      	bne.n	80054fe <HAL_ADC_Init+0x18e>
 80054fa:	2204      	movs	r2, #4
 80054fc:	e000      	b.n	8005500 <HAL_ADC_Init+0x190>
 80054fe:	2200      	movs	r2, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005500:	4310      	orrs	r0, r2
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6a12      	ldr	r2, [r2, #32]
 8005506:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005508:	4310      	orrs	r0, r2
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800550e:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8005510:	4310      	orrs	r0, r2
                            hadc->Init.Overrun                               |
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6b52      	ldr	r2, [r2, #52]	; 0x34
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8005516:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6992      	ldr	r2, [r2, #24]
 800551c:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 800551e:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	69d2      	ldr	r2, [r2, #28]
 8005524:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005526:	4302      	orrs	r2, r0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005528:	430a      	orrs	r2, r1
 800552a:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005530:	23c2      	movs	r3, #194	; 0xc2
 8005532:	33ff      	adds	r3, #255	; 0xff
 8005534:	429a      	cmp	r2, r3
 8005536:	d00b      	beq.n	8005550 <HAL_ADC_Init+0x1e0>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	68d1      	ldr	r1, [r2, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6a90      	ldr	r0, [r2, #40]	; 0x28
                             hadc->Init.ExternalTrigConvEdge;
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800554a:	4302      	orrs	r2, r0
 800554c:	430a      	orrs	r2, r1
 800554e:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	2b01      	cmp	r3, #1
 8005556:	d119      	bne.n	800558c <HAL_ADC_Init+0x21c>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <HAL_ADC_Init+0x204>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	68d2      	ldr	r2, [r2, #12]
 800556a:	2180      	movs	r1, #128	; 0x80
 800556c:	0249      	lsls	r1, r1, #9
 800556e:	430a      	orrs	r2, r1
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	e00b      	b.n	800558c <HAL_ADC_Init+0x21c>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	2220      	movs	r2, #32
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005584:	2201      	movs	r2, #1
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	2b01      	cmp	r3, #1
 8005592:	d11f      	bne.n	80055d4 <HAL_ADC_Init+0x264>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	6912      	ldr	r2, [r2, #16]
 800559e:	492a      	ldr	r1, [pc, #168]	; (8005648 <HAL_ADC_Init+0x2d8>)
 80055a0:	400a      	ands	r2, r1
 80055a2:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	6911      	ldr	r1, [r2, #16]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6c50      	ldr	r0, [r2, #68]	; 0x44
                               hadc->Init.Oversample.RightBitShift             |
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80055b6:	4310      	orrs	r0, r2
                               hadc->Init.Oversample.TriggeredMode );
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                               hadc->Init.Oversample.RightBitShift             |
 80055bc:	4302      	orrs	r2, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80055be:	430a      	orrs	r2, r1
 80055c0:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	6912      	ldr	r2, [r2, #16]
 80055cc:	2101      	movs	r1, #1
 80055ce:	430a      	orrs	r2, r1
 80055d0:	611a      	str	r2, [r3, #16]
 80055d2:	e00d      	b.n	80055f0 <HAL_ADC_Init+0x280>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2201      	movs	r2, #1
 80055dc:	4013      	ands	r3, r2
 80055de:	d007      	beq.n	80055f0 <HAL_ADC_Init+0x280>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	6912      	ldr	r2, [r2, #16]
 80055ea:	2101      	movs	r1, #1
 80055ec:	438a      	bics	r2, r1
 80055ee:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	6952      	ldr	r2, [r2, #20]
 80055fa:	2107      	movs	r1, #7
 80055fc:	438a      	bics	r2, r1
 80055fe:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	6951      	ldr	r1, [r2, #20]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800560e:	430a      	orrs	r2, r1
 8005610:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	2203      	movs	r2, #3
 800561e:	4393      	bics	r3, r2
 8005620:	2201      	movs	r2, #1
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	659a      	str	r2, [r3, #88]	; 0x58
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b002      	add	sp, #8
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	fffffefd 	.word	0xfffffefd
 8005638:	40012708 	.word	0x40012708
 800563c:	ffc3ffff 	.word	0xffc3ffff
 8005640:	fdffffff 	.word	0xfdffffff
 8005644:	fffe0219 	.word	0xfffe0219
 8005648:	fffffc03 	.word	0xfffffc03

0800564c <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8005654:	46c0      	nop			; (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b002      	add	sp, #8
 800565a:	bd80      	pop	{r7, pc}

0800565c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	0002      	movs	r2, r0
 8005664:	1dfb      	adds	r3, r7, #7
 8005666:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <NVIC_EnableIRQ+0x28>)
 800566a:	1dfa      	adds	r2, r7, #7
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	0011      	movs	r1, r2
 8005670:	221f      	movs	r2, #31
 8005672:	400a      	ands	r2, r1
 8005674:	2101      	movs	r1, #1
 8005676:	4091      	lsls	r1, r2
 8005678:	000a      	movs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]
}
 800567c:	46c0      	nop			; (mov r8, r8)
 800567e:	46bd      	mov	sp, r7
 8005680:	b002      	add	sp, #8
 8005682:	bd80      	pop	{r7, pc}
 8005684:	e000e100 	.word	0xe000e100

08005688 <NVIC_GetPendingIRQ>:

    \return             0  Interrupt status is not pending.
    \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	0002      	movs	r2, r0
 8005690:	1dfb      	adds	r3, r7, #7
 8005692:	701a      	strb	r2, [r3, #0]
  return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
 8005694:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <NVIC_GetPendingIRQ+0x38>)
 8005696:	2380      	movs	r3, #128	; 0x80
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	58d3      	ldr	r3, [r2, r3]
 800569c:	1dfa      	adds	r2, r7, #7
 800569e:	7812      	ldrb	r2, [r2, #0]
 80056a0:	0011      	movs	r1, r2
 80056a2:	221f      	movs	r2, #31
 80056a4:	400a      	ands	r2, r1
 80056a6:	2101      	movs	r1, #1
 80056a8:	4091      	lsls	r1, r2
 80056aa:	000a      	movs	r2, r1
 80056ac:	4013      	ands	r3, r2
 80056ae:	d001      	beq.n	80056b4 <NVIC_GetPendingIRQ+0x2c>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <NVIC_GetPendingIRQ+0x2e>
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	0018      	movs	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b002      	add	sp, #8
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	e000e100 	.word	0xe000e100

080056c4 <NVIC_SetPendingIRQ>:
    The function sets the pending bit of an external interrupt.

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	0002      	movs	r2, r0
 80056cc:	1dfb      	adds	r3, r7, #7
 80056ce:	701a      	strb	r2, [r3, #0]
  NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 80056d0:	4a08      	ldr	r2, [pc, #32]	; (80056f4 <NVIC_SetPendingIRQ+0x30>)
 80056d2:	1dfb      	adds	r3, r7, #7
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	0019      	movs	r1, r3
 80056d8:	231f      	movs	r3, #31
 80056da:	400b      	ands	r3, r1
 80056dc:	2101      	movs	r1, #1
 80056de:	4099      	lsls	r1, r3
 80056e0:	000b      	movs	r3, r1
 80056e2:	0019      	movs	r1, r3
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	50d1      	str	r1, [r2, r3]
}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b002      	add	sp, #8
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	e000e100 	.word	0xe000e100

080056f8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	0002      	movs	r2, r0
 8005700:	1dfb      	adds	r3, r7, #7
 8005702:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <NVIC_ClearPendingIRQ+0x30>)
 8005706:	1dfb      	adds	r3, r7, #7
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	0019      	movs	r1, r3
 800570c:	231f      	movs	r3, #31
 800570e:	400b      	ands	r3, r1
 8005710:	2101      	movs	r1, #1
 8005712:	4099      	lsls	r1, r3
 8005714:	000b      	movs	r3, r1
 8005716:	0019      	movs	r1, r3
 8005718:	23c0      	movs	r3, #192	; 0xc0
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	50d1      	str	r1, [r2, r3]
}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	46bd      	mov	sp, r7
 8005722:	b002      	add	sp, #8
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	e000e100 	.word	0xe000e100

0800572c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800572c:	b5b0      	push	{r4, r5, r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	0002      	movs	r2, r0
 8005734:	6039      	str	r1, [r7, #0]
 8005736:	1dfb      	adds	r3, r7, #7
 8005738:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 800573a:	1dfb      	adds	r3, r7, #7
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b7f      	cmp	r3, #127	; 0x7f
 8005740:	d932      	bls.n	80057a8 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8005742:	4c2f      	ldr	r4, [pc, #188]	; (8005800 <NVIC_SetPriority+0xd4>)
 8005744:	1dfb      	adds	r3, r7, #7
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	001a      	movs	r2, r3
 800574a:	230f      	movs	r3, #15
 800574c:	4013      	ands	r3, r2
 800574e:	3b08      	subs	r3, #8
 8005750:	0899      	lsrs	r1, r3, #2
 8005752:	4a2b      	ldr	r2, [pc, #172]	; (8005800 <NVIC_SetPriority+0xd4>)
 8005754:	1dfb      	adds	r3, r7, #7
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	0018      	movs	r0, r3
 800575a:	230f      	movs	r3, #15
 800575c:	4003      	ands	r3, r0
 800575e:	3b08      	subs	r3, #8
 8005760:	089b      	lsrs	r3, r3, #2
 8005762:	3306      	adds	r3, #6
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	18d3      	adds	r3, r2, r3
 8005768:	3304      	adds	r3, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	1dfa      	adds	r2, r7, #7
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	0010      	movs	r0, r2
 8005772:	2203      	movs	r2, #3
 8005774:	4002      	ands	r2, r0
 8005776:	00d2      	lsls	r2, r2, #3
 8005778:	20ff      	movs	r0, #255	; 0xff
 800577a:	4090      	lsls	r0, r2
 800577c:	0002      	movs	r2, r0
 800577e:	43d2      	mvns	r2, r2
 8005780:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	019b      	lsls	r3, r3, #6
 8005786:	20ff      	movs	r0, #255	; 0xff
 8005788:	4018      	ands	r0, r3
 800578a:	1dfb      	adds	r3, r7, #7
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	001d      	movs	r5, r3
 8005790:	2303      	movs	r3, #3
 8005792:	402b      	ands	r3, r5
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4098      	lsls	r0, r3
 8005798:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800579a:	431a      	orrs	r2, r3
 800579c:	1d8b      	adds	r3, r1, #6
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	18e3      	adds	r3, r4, r3
 80057a2:	3304      	adds	r3, #4
 80057a4:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 80057a6:	e027      	b.n	80057f8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80057a8:	4c16      	ldr	r4, [pc, #88]	; (8005804 <NVIC_SetPriority+0xd8>)
 80057aa:	1dfb      	adds	r3, r7, #7
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	b25b      	sxtb	r3, r3
 80057b0:	089b      	lsrs	r3, r3, #2
 80057b2:	4914      	ldr	r1, [pc, #80]	; (8005804 <NVIC_SetPriority+0xd8>)
 80057b4:	1dfa      	adds	r2, r7, #7
 80057b6:	7812      	ldrb	r2, [r2, #0]
 80057b8:	b252      	sxtb	r2, r2
 80057ba:	0892      	lsrs	r2, r2, #2
 80057bc:	32c0      	adds	r2, #192	; 0xc0
 80057be:	0092      	lsls	r2, r2, #2
 80057c0:	5852      	ldr	r2, [r2, r1]
 80057c2:	1df9      	adds	r1, r7, #7
 80057c4:	7809      	ldrb	r1, [r1, #0]
 80057c6:	0008      	movs	r0, r1
 80057c8:	2103      	movs	r1, #3
 80057ca:	4001      	ands	r1, r0
 80057cc:	00c9      	lsls	r1, r1, #3
 80057ce:	20ff      	movs	r0, #255	; 0xff
 80057d0:	4088      	lsls	r0, r1
 80057d2:	0001      	movs	r1, r0
 80057d4:	43c9      	mvns	r1, r1
 80057d6:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	0192      	lsls	r2, r2, #6
 80057dc:	20ff      	movs	r0, #255	; 0xff
 80057de:	4010      	ands	r0, r2
 80057e0:	1dfa      	adds	r2, r7, #7
 80057e2:	7812      	ldrb	r2, [r2, #0]
 80057e4:	0015      	movs	r5, r2
 80057e6:	2203      	movs	r2, #3
 80057e8:	402a      	ands	r2, r5
 80057ea:	00d2      	lsls	r2, r2, #3
 80057ec:	4090      	lsls	r0, r2
 80057ee:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80057f0:	430a      	orrs	r2, r1
 80057f2:	33c0      	adds	r3, #192	; 0xc0
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	511a      	str	r2, [r3, r4]
}
 80057f8:	46c0      	nop			; (mov r8, r8)
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b002      	add	sp, #8
 80057fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005800:	e000ed00 	.word	0xe000ed00
 8005804:	e000e100 	.word	0xe000e100

08005808 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	230f      	movs	r3, #15
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	1c02      	adds	r2, r0, #0
 8005818:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	230f      	movs	r3, #15
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b25b      	sxtb	r3, r3
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff ff80 	bl	800572c <NVIC_SetPriority>
}
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b004      	add	sp, #16
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	0002      	movs	r2, r0
 800583c:	1dfb      	adds	r3, r7, #7
 800583e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005840:	1dfb      	adds	r3, r7, #7
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b25b      	sxtb	r3, r3
 8005846:	0018      	movs	r0, r3
 8005848:	f7ff ff08 	bl	800565c <NVIC_EnableIRQ>
}
 800584c:	46c0      	nop			; (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b002      	add	sp, #8
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	0002      	movs	r2, r0
 800585c:	1dfb      	adds	r3, r7, #7
 800585e:	701a      	strb	r2, [r3, #0]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005860:	1dfb      	adds	r3, r7, #7
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b25b      	sxtb	r3, r3
 8005866:	0018      	movs	r0, r3
 8005868:	f7ff ff2c 	bl	80056c4 <NVIC_SetPendingIRQ>
}
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b002      	add	sp, #8
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_NVIC_GetPendingIRQ>:
  *          (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{ 
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	0002      	movs	r2, r0
 800587c:	1dfb      	adds	r3, r7, #7
 800587e:	701a      	strb	r2, [r3, #0]
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8005880:	1dfb      	adds	r3, r7, #7
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	b25b      	sxtb	r3, r3
 8005886:	0018      	movs	r0, r3
 8005888:	f7ff fefe 	bl	8005688 <NVIC_GetPendingIRQ>
 800588c:	0003      	movs	r3, r0
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b002      	add	sp, #8
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	0002      	movs	r2, r0
 800589e:	1dfb      	adds	r3, r7, #7
 80058a0:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80058a2:	1dfb      	adds	r3, r7, #7
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b25b      	sxtb	r3, r3
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7ff ff25 	bl	80056f8 <NVIC_ClearPendingIRQ>
}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b002      	add	sp, #8
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80058ce:	e155      	b.n	8005b7c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2101      	movs	r1, #1
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4091      	lsls	r1, r2
 80058da:	000a      	movs	r2, r1
 80058dc:	4013      	ands	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d100      	bne.n	80058e8 <HAL_GPIO_Init+0x30>
 80058e6:	e146      	b.n	8005b76 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d003      	beq.n	80058f8 <HAL_GPIO_Init+0x40>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b12      	cmp	r3, #18
 80058f6:	d123      	bne.n	8005940 <HAL_GPIO_Init+0x88>
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	08da      	lsrs	r2, r3, #3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3208      	adds	r2, #8
 8005900:	0092      	lsls	r2, r2, #2
 8005902:	58d3      	ldr	r3, [r2, r3]
 8005904:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2207      	movs	r2, #7
 800590a:	4013      	ands	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	220f      	movs	r2, #15
 8005910:	409a      	lsls	r2, r3
 8005912:	0013      	movs	r3, r2
 8005914:	43da      	mvns	r2, r3
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4013      	ands	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2107      	movs	r1, #7
 8005924:	400b      	ands	r3, r1
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	409a      	lsls	r2, r3
 800592a:	0013      	movs	r3, r2
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	08da      	lsrs	r2, r3, #3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3208      	adds	r2, #8
 800593a:	0092      	lsls	r2, r2, #2
 800593c:	6939      	ldr	r1, [r7, #16]
 800593e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d00b      	beq.n	8005960 <HAL_GPIO_Init+0xa8>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d007      	beq.n	8005960 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005954:	2b11      	cmp	r3, #17
 8005956:	d003      	beq.n	8005960 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b12      	cmp	r3, #18
 800595e:	d130      	bne.n	80059c2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	2203      	movs	r2, #3
 800596c:	409a      	lsls	r2, r3
 800596e:	0013      	movs	r3, r2
 8005970:	43da      	mvns	r2, r3
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4013      	ands	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	409a      	lsls	r2, r3
 8005982:	0013      	movs	r3, r2
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005996:	2201      	movs	r2, #1
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	409a      	lsls	r2, r3
 800599c:	0013      	movs	r3, r2
 800599e:	43da      	mvns	r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4013      	ands	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	2201      	movs	r2, #1
 80059ae:	401a      	ands	r2, r3
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	409a      	lsls	r2, r3
 80059b4:	0013      	movs	r3, r2
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	2203      	movs	r2, #3
 80059ce:	409a      	lsls	r2, r3
 80059d0:	0013      	movs	r3, r2
 80059d2:	43da      	mvns	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4013      	ands	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2203      	movs	r2, #3
 80059e0:	401a      	ands	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	409a      	lsls	r2, r3
 80059e8:	0013      	movs	r3, r2
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	2203      	movs	r2, #3
 8005a02:	409a      	lsls	r2, r3
 8005a04:	0013      	movs	r3, r2
 8005a06:	43da      	mvns	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	409a      	lsls	r2, r3
 8005a18:	0013      	movs	r3, r2
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	055b      	lsls	r3, r3, #21
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d100      	bne.n	8005a34 <HAL_GPIO_Init+0x17c>
 8005a32:	e0a0      	b.n	8005b76 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a34:	4b57      	ldr	r3, [pc, #348]	; (8005b94 <HAL_GPIO_Init+0x2dc>)
 8005a36:	4a57      	ldr	r2, [pc, #348]	; (8005b94 <HAL_GPIO_Init+0x2dc>)
 8005a38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8005a40:	4a55      	ldr	r2, [pc, #340]	; (8005b98 <HAL_GPIO_Init+0x2e0>)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	3302      	adds	r3, #2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	589b      	ldr	r3, [r3, r2]
 8005a4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2203      	movs	r2, #3
 8005a52:	4013      	ands	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	220f      	movs	r2, #15
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	0013      	movs	r3, r2
 8005a5c:	43da      	mvns	r2, r3
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4013      	ands	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	23a0      	movs	r3, #160	; 0xa0
 8005a68:	05db      	lsls	r3, r3, #23
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d01f      	beq.n	8005aae <HAL_GPIO_Init+0x1f6>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a4a      	ldr	r2, [pc, #296]	; (8005b9c <HAL_GPIO_Init+0x2e4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d019      	beq.n	8005aaa <HAL_GPIO_Init+0x1f2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a49      	ldr	r2, [pc, #292]	; (8005ba0 <HAL_GPIO_Init+0x2e8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_GPIO_Init+0x1ee>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a48      	ldr	r2, [pc, #288]	; (8005ba4 <HAL_GPIO_Init+0x2ec>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00d      	beq.n	8005aa2 <HAL_GPIO_Init+0x1ea>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a47      	ldr	r2, [pc, #284]	; (8005ba8 <HAL_GPIO_Init+0x2f0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <HAL_GPIO_Init+0x1e6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a46      	ldr	r2, [pc, #280]	; (8005bac <HAL_GPIO_Init+0x2f4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <HAL_GPIO_Init+0x1e2>
 8005a96:	2305      	movs	r3, #5
 8005a98:	e00a      	b.n	8005ab0 <HAL_GPIO_Init+0x1f8>
 8005a9a:	2306      	movs	r3, #6
 8005a9c:	e008      	b.n	8005ab0 <HAL_GPIO_Init+0x1f8>
 8005a9e:	2304      	movs	r3, #4
 8005aa0:	e006      	b.n	8005ab0 <HAL_GPIO_Init+0x1f8>
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e004      	b.n	8005ab0 <HAL_GPIO_Init+0x1f8>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e002      	b.n	8005ab0 <HAL_GPIO_Init+0x1f8>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <HAL_GPIO_Init+0x1f8>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	2103      	movs	r1, #3
 8005ab4:	400a      	ands	r2, r1
 8005ab6:	0092      	lsls	r2, r2, #2
 8005ab8:	4093      	lsls	r3, r2
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ac0:	4935      	ldr	r1, [pc, #212]	; (8005b98 <HAL_GPIO_Init+0x2e0>)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	089b      	lsrs	r3, r3, #2
 8005ac6:	3302      	adds	r3, #2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ace:	4b38      	ldr	r3, [pc, #224]	; (8005bb0 <HAL_GPIO_Init+0x2f8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	43da      	mvns	r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4013      	ands	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	025b      	lsls	r3, r3, #9
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005af2:	4b2f      	ldr	r3, [pc, #188]	; (8005bb0 <HAL_GPIO_Init+0x2f8>)
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005af8:	4b2d      	ldr	r3, [pc, #180]	; (8005bb0 <HAL_GPIO_Init+0x2f8>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	43da      	mvns	r2, r3
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4013      	ands	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	029b      	lsls	r3, r3, #10
 8005b10:	4013      	ands	r3, r2
 8005b12:	d003      	beq.n	8005b1c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005b1c:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_GPIO_Init+0x2f8>)
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <HAL_GPIO_Init+0x2f8>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	43da      	mvns	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	2380      	movs	r3, #128	; 0x80
 8005b38:	035b      	lsls	r3, r3, #13
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005b46:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <HAL_GPIO_Init+0x2f8>)
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005b4c:	4b18      	ldr	r3, [pc, #96]	; (8005bb0 <HAL_GPIO_Init+0x2f8>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	43da      	mvns	r2, r3
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	039b      	lsls	r3, r3, #14
 8005b64:	4013      	ands	r3, r2
 8005b66:	d003      	beq.n	8005b70 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005b70:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <HAL_GPIO_Init+0x2f8>)
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	40da      	lsrs	r2, r3
 8005b84:	1e13      	subs	r3, r2, #0
 8005b86:	d000      	beq.n	8005b8a <HAL_GPIO_Init+0x2d2>
 8005b88:	e6a2      	b.n	80058d0 <HAL_GPIO_Init+0x18>
  }
}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b006      	add	sp, #24
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	40021000 	.word	0x40021000
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	50000400 	.word	0x50000400
 8005ba0:	50000800 	.word	0x50000800
 8005ba4:	50000c00 	.word	0x50000c00
 8005ba8:	50001000 	.word	0x50001000
 8005bac:	50001c00 	.word	0x50001c00
 8005bb0:	40010400 	.word	0x40010400

08005bb4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	0008      	movs	r0, r1
 8005bbe:	0011      	movs	r1, r2
 8005bc0:	1cbb      	adds	r3, r7, #2
 8005bc2:	1c02      	adds	r2, r0, #0
 8005bc4:	801a      	strh	r2, [r3, #0]
 8005bc6:	1c7b      	adds	r3, r7, #1
 8005bc8:	1c0a      	adds	r2, r1, #0
 8005bca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005bcc:	1c7b      	adds	r3, r7, #1
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bd4:	1cbb      	adds	r3, r7, #2
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005bdc:	e003      	b.n	8005be6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005bde:	1cbb      	adds	r3, r7, #2
 8005be0:	881a      	ldrh	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b002      	add	sp, #8
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	0002      	movs	r2, r0
 8005bf8:	1dbb      	adds	r3, r7, #6
 8005bfa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8005bfc:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	1dba      	adds	r2, r7, #6
 8005c02:	8812      	ldrh	r2, [r2, #0]
 8005c04:	4013      	ands	r3, r2
 8005c06:	d008      	beq.n	8005c1a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005c0a:	1dba      	adds	r2, r7, #6
 8005c0c:	8812      	ldrh	r2, [r2, #0]
 8005c0e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c10:	1dbb      	adds	r3, r7, #6
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f004 ffe5 	bl	800abe4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b002      	add	sp, #8
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	40010400 	.word	0x40010400

08005c28 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <HAL_PWR_DisablePVD+0x18>)
 8005c2e:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <HAL_PWR_DisablePVD+0x18>)
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	2110      	movs	r1, #16
 8005c34:	438a      	bics	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]
}
 8005c38:	46c0      	nop			; (mov r8, r8)
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	40007000 	.word	0x40007000

08005c44 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	000a      	movs	r2, r1
 8005c4e:	1cfb      	adds	r3, r7, #3
 8005c50:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005c56:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <HAL_PWR_EnterSLEEPMode+0x54>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2203      	movs	r2, #3
 8005c60:	4393      	bics	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <HAL_PWR_EnterSLEEPMode+0x54>)
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005c72:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <HAL_PWR_EnterSLEEPMode+0x58>)
 8005c74:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <HAL_PWR_EnterSLEEPMode+0x58>)
 8005c76:	6912      	ldr	r2, [r2, #16]
 8005c78:	2104      	movs	r1, #4
 8005c7a:	438a      	bics	r2, r1
 8005c7c:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005c7e:	1cfb      	adds	r3, r7, #3
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_PWR_EnterSLEEPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8005c86:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8005c88:	e002      	b.n	8005c90 <HAL_PWR_EnterSLEEPMode+0x4c>

    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8005c8a:	bf40      	sev
  __ASM volatile ("wfe");
 8005c8c:	bf20      	wfe
 8005c8e:	bf20      	wfe
 8005c90:	46c0      	nop			; (mov r8, r8)
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b004      	add	sp, #16
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40007000 	.word	0x40007000
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	000a      	movs	r2, r1
 8005caa:	1cfb      	adds	r3, r7, #3
 8005cac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005cb2:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <HAL_PWR_EnterSTOPMode+0x60>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2203      	movs	r2, #3
 8005cbc:	4393      	bics	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <HAL_PWR_EnterSTOPMode+0x60>)
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <HAL_PWR_EnterSTOPMode+0x64>)
 8005cd0:	4a0c      	ldr	r2, [pc, #48]	; (8005d04 <HAL_PWR_EnterSTOPMode+0x64>)
 8005cd2:	6912      	ldr	r2, [r2, #16]
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005cda:	1cfb      	adds	r3, r7, #3
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_PWR_EnterSTOPMode+0x46>
  __ASM volatile ("wfi");
 8005ce2:	bf30      	wfi
 8005ce4:	e002      	b.n	8005cec <HAL_PWR_EnterSTOPMode+0x4c>
  __ASM volatile ("sev");
 8005ce6:	bf40      	sev
  __ASM volatile ("wfe");
 8005ce8:	bf20      	wfe
 8005cea:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_PWR_EnterSTOPMode+0x64>)
 8005cee:	4a05      	ldr	r2, [pc, #20]	; (8005d04 <HAL_PWR_EnterSTOPMode+0x64>)
 8005cf0:	6912      	ldr	r2, [r2, #16]
 8005cf2:	2104      	movs	r1, #4
 8005cf4:	438a      	bics	r2, r1
 8005cf6:	611a      	str	r2, [r3, #16]

}
 8005cf8:	46c0      	nop			; (mov r8, r8)
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b004      	add	sp, #16
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40007000 	.word	0x40007000
 8005d04:	e000ed00 	.word	0xe000ed00

08005d08 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8005d0e:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	00c9      	lsls	r1, r1, #3
 8005d16:	430a      	orrs	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40007000 	.word	0x40007000

08005d24 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005d28:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8005d2a:	4a04      	ldr	r2, [pc, #16]	; (8005d3c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	2180      	movs	r1, #128	; 0x80
 8005d30:	0089      	lsls	r1, r1, #2
 8005d32:	430a      	orrs	r2, r1
 8005d34:	601a      	str	r2, [r3, #0]
}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40007000 	.word	0x40007000

08005d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2201      	movs	r2, #1
 8005d52:	4013      	ands	r3, r2
 8005d54:	d100      	bne.n	8005d58 <HAL_RCC_OscConfig+0x18>
 8005d56:	e08a      	b.n	8005e6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d58:	4bc2      	ldr	r3, [pc, #776]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	220c      	movs	r2, #12
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d00e      	beq.n	8005d82 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d64:	4bbf      	ldr	r3, [pc, #764]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	220c      	movs	r2, #12
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b0c      	cmp	r3, #12
 8005d6e:	d117      	bne.n	8005da0 <HAL_RCC_OscConfig+0x60>
 8005d70:	4bbc      	ldr	r3, [pc, #752]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	025b      	lsls	r3, r3, #9
 8005d78:	401a      	ands	r2, r3
 8005d7a:	2380      	movs	r3, #128	; 0x80
 8005d7c:	025b      	lsls	r3, r3, #9
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d10e      	bne.n	8005da0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d82:	4bb8      	ldr	r3, [pc, #736]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d100      	bne.n	8005d90 <HAL_RCC_OscConfig+0x50>
 8005d8e:	e06d      	b.n	8005e6c <HAL_RCC_OscConfig+0x12c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d000      	beq.n	8005d9a <HAL_RCC_OscConfig+0x5a>
 8005d98:	e068      	b.n	8005e6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f000 fb6e 	bl	800647c <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	025b      	lsls	r3, r3, #9
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d107      	bne.n	8005dbc <HAL_RCC_OscConfig+0x7c>
 8005dac:	4bad      	ldr	r3, [pc, #692]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005dae:	4aad      	ldr	r2, [pc, #692]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	0249      	lsls	r1, r1, #9
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e027      	b.n	8005e0c <HAL_RCC_OscConfig+0xcc>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	23a0      	movs	r3, #160	; 0xa0
 8005dc2:	02db      	lsls	r3, r3, #11
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d10e      	bne.n	8005de6 <HAL_RCC_OscConfig+0xa6>
 8005dc8:	4ba6      	ldr	r3, [pc, #664]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005dca:	4aa6      	ldr	r2, [pc, #664]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	02c9      	lsls	r1, r1, #11
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	4ba3      	ldr	r3, [pc, #652]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005dd8:	4aa2      	ldr	r2, [pc, #648]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	2180      	movs	r1, #128	; 0x80
 8005dde:	0249      	lsls	r1, r1, #9
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e012      	b.n	8005e0c <HAL_RCC_OscConfig+0xcc>
 8005de6:	4b9f      	ldr	r3, [pc, #636]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005de8:	4a9e      	ldr	r2, [pc, #632]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	499e      	ldr	r1, [pc, #632]	; (8006068 <HAL_RCC_OscConfig+0x328>)
 8005dee:	400a      	ands	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	4b9c      	ldr	r3, [pc, #624]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	2380      	movs	r3, #128	; 0x80
 8005df8:	025b      	lsls	r3, r3, #9
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4b98      	ldr	r3, [pc, #608]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005e02:	4a98      	ldr	r2, [pc, #608]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	4999      	ldr	r1, [pc, #612]	; (800606c <HAL_RCC_OscConfig+0x32c>)
 8005e08:	400a      	ands	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d015      	beq.n	8005e40 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e14:	f7ff fa78 	bl	8005308 <HAL_GetTick>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1c:	e009      	b.n	8005e32 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e1e:	f7ff fa73 	bl	8005308 <HAL_GetTick>
 8005e22:	0002      	movs	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	4a91      	ldr	r2, [pc, #580]	; (8006070 <HAL_RCC_OscConfig+0x330>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e324      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e32:	4b8c      	ldr	r3, [pc, #560]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	2380      	movs	r3, #128	; 0x80
 8005e38:	029b      	lsls	r3, r3, #10
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d0ef      	beq.n	8005e1e <HAL_RCC_OscConfig+0xde>
 8005e3e:	e016      	b.n	8005e6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e40:	f7ff fa62 	bl	8005308 <HAL_GetTick>
 8005e44:	0003      	movs	r3, r0
 8005e46:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e48:	e009      	b.n	8005e5e <HAL_RCC_OscConfig+0x11e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e4a:	f7ff fa5d 	bl	8005308 <HAL_GetTick>
 8005e4e:	0002      	movs	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	4a86      	ldr	r2, [pc, #536]	; (8006070 <HAL_RCC_OscConfig+0x330>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e30e      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5e:	4b81      	ldr	r3, [pc, #516]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	2380      	movs	r3, #128	; 0x80
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	4013      	ands	r3, r2
 8005e68:	d1ef      	bne.n	8005e4a <HAL_RCC_OscConfig+0x10a>
 8005e6a:	e000      	b.n	8005e6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2202      	movs	r2, #2
 8005e74:	4013      	ands	r3, r2
 8005e76:	d100      	bne.n	8005e7a <HAL_RCC_OscConfig+0x13a>
 8005e78:	e06c      	b.n	8005f54 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005e7a:	4b7a      	ldr	r3, [pc, #488]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	220c      	movs	r2, #12
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d00b      	beq.n	8005e9e <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005e86:	4b77      	ldr	r3, [pc, #476]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	220c      	movs	r2, #12
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	2b0c      	cmp	r3, #12
 8005e90:	d11b      	bne.n	8005eca <HAL_RCC_OscConfig+0x18a>
 8005e92:	4b74      	ldr	r3, [pc, #464]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	2380      	movs	r3, #128	; 0x80
 8005e98:	025b      	lsls	r3, r3, #9
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d115      	bne.n	8005eca <HAL_RCC_OscConfig+0x18a>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e9e:	4b71      	ldr	r3, [pc, #452]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d005      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x174>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d001      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x174>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e2e3      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb4:	4a6b      	ldr	r2, [pc, #428]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005eb6:	4b6b      	ldr	r3, [pc, #428]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	496e      	ldr	r1, [pc, #440]	; (8006074 <HAL_RCC_OscConfig+0x334>)
 8005ebc:	4019      	ands	r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ec8:	e044      	b.n	8005f54 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d027      	beq.n	8005f22 <HAL_RCC_OscConfig+0x1e2>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ed2:	4a64      	ldr	r2, [pc, #400]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005ed4:	4b63      	ldr	r3, [pc, #396]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2109      	movs	r1, #9
 8005eda:	438b      	bics	r3, r1
 8005edc:	0019      	movs	r1, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee6:	f7ff fa0f 	bl	8005308 <HAL_GetTick>
 8005eea:	0003      	movs	r3, r0
 8005eec:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef0:	f7ff fa0a 	bl	8005308 <HAL_GetTick>
 8005ef4:	0002      	movs	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e2bc      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f02:	4b58      	ldr	r3, [pc, #352]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2204      	movs	r2, #4
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d0f1      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x1b0>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0c:	4a55      	ldr	r2, [pc, #340]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005f0e:	4b55      	ldr	r3, [pc, #340]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4958      	ldr	r1, [pc, #352]	; (8006074 <HAL_RCC_OscConfig+0x334>)
 8005f14:	4019      	ands	r1, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6053      	str	r3, [r2, #4]
 8005f20:	e018      	b.n	8005f54 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f22:	4b50      	ldr	r3, [pc, #320]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005f24:	4a4f      	ldr	r2, [pc, #316]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	438a      	bics	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2e:	f7ff f9eb 	bl	8005308 <HAL_GetTick>
 8005f32:	0003      	movs	r3, r0
 8005f34:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f38:	f7ff f9e6 	bl	8005308 <HAL_GetTick>
 8005f3c:	0002      	movs	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e298      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4a:	4b46      	ldr	r3, [pc, #280]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	4013      	ands	r3, r2
 8005f52:	d1f1      	bne.n	8005f38 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2210      	movs	r2, #16
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d100      	bne.n	8005f60 <HAL_RCC_OscConfig+0x220>
 8005f5e:	e0c5      	b.n	80060ec <HAL_RCC_OscConfig+0x3ac>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8005f60:	4b40      	ldr	r3, [pc, #256]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	220c      	movs	r2, #12
 8005f66:	4013      	ands	r3, r2
 8005f68:	d162      	bne.n	8006030 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f6a:	4b3e      	ldr	r3, [pc, #248]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4013      	ands	r3, r2
 8005f74:	d005      	beq.n	8005f82 <HAL_RCC_OscConfig+0x242>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e27c      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f86:	4b37      	ldr	r3, [pc, #220]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	23e0      	movs	r3, #224	; 0xe0
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	400b      	ands	r3, r1
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d91c      	bls.n	8005fce <HAL_RCC_OscConfig+0x28e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f000 fc47 	bl	800682c <RCC_SetFlashLatencyFromMSIRange>
 8005f9e:	1e03      	subs	r3, r0, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e26a      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fa6:	4a2f      	ldr	r2, [pc, #188]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005fa8:	4b2e      	ldr	r3, [pc, #184]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4932      	ldr	r1, [pc, #200]	; (8006078 <HAL_RCC_OscConfig+0x338>)
 8005fae:	4019      	ands	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fb8:	4a2a      	ldr	r2, [pc, #168]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005fba:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	0a19      	lsrs	r1, r3, #8
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	6053      	str	r3, [r2, #4]
 8005fcc:	e01b      	b.n	8006006 <HAL_RCC_OscConfig+0x2c6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fce:	4a25      	ldr	r2, [pc, #148]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005fd0:	4b24      	ldr	r3, [pc, #144]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	4928      	ldr	r1, [pc, #160]	; (8006078 <HAL_RCC_OscConfig+0x338>)
 8005fd6:	4019      	ands	r1, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fe0:	4a20      	ldr	r2, [pc, #128]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005fe2:	4b20      	ldr	r3, [pc, #128]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	0a19      	lsrs	r1, r3, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	061b      	lsls	r3, r3, #24
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6053      	str	r3, [r2, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f000 fc17 	bl	800682c <RCC_SetFlashLatencyFromMSIRange>
 8005ffe:	1e03      	subs	r3, r0, #0
 8006000:	d001      	beq.n	8006006 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e23a      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	0b5b      	lsrs	r3, r3, #13
 800600c:	3301      	adds	r3, #1
 800600e:	2280      	movs	r2, #128	; 0x80
 8006010:	0212      	lsls	r2, r2, #8
 8006012:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	210f      	movs	r1, #15
 800601c:	400b      	ands	r3, r1
 800601e:	4917      	ldr	r1, [pc, #92]	; (800607c <HAL_RCC_OscConfig+0x33c>)
 8006020:	5ccb      	ldrb	r3, [r1, r3]
 8006022:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8006024:	4b16      	ldr	r3, [pc, #88]	; (8006080 <HAL_RCC_OscConfig+0x340>)
 8006026:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8006028:	2003      	movs	r0, #3
 800602a:	f004 fd72 	bl	800ab12 <HAL_InitTick>
 800602e:	e05d      	b.n	80060ec <HAL_RCC_OscConfig+0x3ac>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d03f      	beq.n	80060b8 <HAL_RCC_OscConfig+0x378>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 800603a:	4a0a      	ldr	r2, [pc, #40]	; (8006064 <HAL_RCC_OscConfig+0x324>)
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	2180      	movs	r1, #128	; 0x80
 8006040:	0049      	lsls	r1, r1, #1
 8006042:	430a      	orrs	r2, r1
 8006044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006046:	f7ff f95f 	bl	8005308 <HAL_GetTick>
 800604a:	0003      	movs	r3, r0
 800604c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800604e:	e019      	b.n	8006084 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006050:	f7ff f95a 	bl	8005308 <HAL_GetTick>
 8006054:	0002      	movs	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d912      	bls.n	8006084 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e20c      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	40021000 	.word	0x40021000
 8006068:	fffeffff 	.word	0xfffeffff
 800606c:	fffbffff 	.word	0xfffbffff
 8006070:	00001388 	.word	0x00001388
 8006074:	ffffe0ff 	.word	0xffffe0ff
 8006078:	ffff1fff 	.word	0xffff1fff
 800607c:	0800c50c 	.word	0x0800c50c
 8006080:	20000028 	.word	0x20000028
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8006084:	4bc7      	ldr	r3, [pc, #796]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4013      	ands	r3, r2
 800608e:	d0df      	beq.n	8006050 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006090:	4ac4      	ldr	r2, [pc, #784]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006092:	4bc4      	ldr	r3, [pc, #784]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	49c4      	ldr	r1, [pc, #784]	; (80063a8 <HAL_RCC_OscConfig+0x668>)
 8006098:	4019      	ands	r1, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	430b      	orrs	r3, r1
 80060a0:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060a2:	4ac0      	ldr	r2, [pc, #768]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80060a4:	4bbf      	ldr	r3, [pc, #764]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	0a19      	lsrs	r1, r3, #8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	061b      	lsls	r3, r3, #24
 80060b2:	430b      	orrs	r3, r1
 80060b4:	6053      	str	r3, [r2, #4]
 80060b6:	e019      	b.n	80060ec <HAL_RCC_OscConfig+0x3ac>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060b8:	4bba      	ldr	r3, [pc, #744]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80060ba:	4aba      	ldr	r2, [pc, #744]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	49bb      	ldr	r1, [pc, #748]	; (80063ac <HAL_RCC_OscConfig+0x66c>)
 80060c0:	400a      	ands	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c4:	f7ff f920 	bl	8005308 <HAL_GetTick>
 80060c8:	0003      	movs	r3, r0
 80060ca:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060ce:	f7ff f91b 	bl	8005308 <HAL_GetTick>
 80060d2:	0002      	movs	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e1cd      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80060e0:	4bb0      	ldr	r3, [pc, #704]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4013      	ands	r3, r2
 80060ea:	d1f0      	bne.n	80060ce <HAL_RCC_OscConfig+0x38e>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2208      	movs	r2, #8
 80060f2:	4013      	ands	r3, r2
 80060f4:	d036      	beq.n	8006164 <HAL_RCC_OscConfig+0x424>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d019      	beq.n	8006132 <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060fe:	4ba9      	ldr	r3, [pc, #676]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006100:	4aa8      	ldr	r2, [pc, #672]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006102:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006104:	2101      	movs	r1, #1
 8006106:	430a      	orrs	r2, r1
 8006108:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610a:	f7ff f8fd 	bl	8005308 <HAL_GetTick>
 800610e:	0003      	movs	r3, r0
 8006110:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x3e6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006114:	f7ff f8f8 	bl	8005308 <HAL_GetTick>
 8006118:	0002      	movs	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e1aa      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006126:	4b9f      	ldr	r3, [pc, #636]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612a:	2202      	movs	r2, #2
 800612c:	4013      	ands	r3, r2
 800612e:	d0f1      	beq.n	8006114 <HAL_RCC_OscConfig+0x3d4>
 8006130:	e018      	b.n	8006164 <HAL_RCC_OscConfig+0x424>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006132:	4b9c      	ldr	r3, [pc, #624]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006134:	4a9b      	ldr	r2, [pc, #620]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006136:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006138:	2101      	movs	r1, #1
 800613a:	438a      	bics	r2, r1
 800613c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613e:	f7ff f8e3 	bl	8005308 <HAL_GetTick>
 8006142:	0003      	movs	r3, r0
 8006144:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006148:	f7ff f8de 	bl	8005308 <HAL_GetTick>
 800614c:	0002      	movs	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e190      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800615a:	4b92      	ldr	r3, [pc, #584]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 800615c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615e:	2202      	movs	r2, #2
 8006160:	4013      	ands	r3, r2
 8006162:	d1f1      	bne.n	8006148 <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2204      	movs	r2, #4
 800616a:	4013      	ands	r3, r2
 800616c:	d100      	bne.n	8006170 <HAL_RCC_OscConfig+0x430>
 800616e:	e0af      	b.n	80062d0 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006170:	2317      	movs	r3, #23
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006178:	4b8a      	ldr	r3, [pc, #552]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 800617a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	055b      	lsls	r3, r3, #21
 8006180:	4013      	ands	r3, r2
 8006182:	d10a      	bne.n	800619a <HAL_RCC_OscConfig+0x45a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006184:	4b87      	ldr	r3, [pc, #540]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006186:	4a87      	ldr	r2, [pc, #540]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006188:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800618a:	2180      	movs	r1, #128	; 0x80
 800618c:	0549      	lsls	r1, r1, #21
 800618e:	430a      	orrs	r2, r1
 8006190:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006192:	2317      	movs	r3, #23
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619a:	4b85      	ldr	r3, [pc, #532]	; (80063b0 <HAL_RCC_OscConfig+0x670>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	4013      	ands	r3, r2
 80061a4:	d11a      	bne.n	80061dc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061a6:	4b82      	ldr	r3, [pc, #520]	; (80063b0 <HAL_RCC_OscConfig+0x670>)
 80061a8:	4a81      	ldr	r2, [pc, #516]	; (80063b0 <HAL_RCC_OscConfig+0x670>)
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	0049      	lsls	r1, r1, #1
 80061b0:	430a      	orrs	r2, r1
 80061b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061b4:	f7ff f8a8 	bl	8005308 <HAL_GetTick>
 80061b8:	0003      	movs	r3, r0
 80061ba:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x490>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061be:	f7ff f8a3 	bl	8005308 <HAL_GetTick>
 80061c2:	0002      	movs	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b64      	cmp	r3, #100	; 0x64
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e155      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d0:	4b77      	ldr	r3, [pc, #476]	; (80063b0 <HAL_RCC_OscConfig+0x670>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4013      	ands	r3, r2
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x47e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d107      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4b8>
 80061e8:	4b6e      	ldr	r3, [pc, #440]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80061ea:	4a6e      	ldr	r2, [pc, #440]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80061ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061ee:	2180      	movs	r1, #128	; 0x80
 80061f0:	0049      	lsls	r1, r1, #1
 80061f2:	430a      	orrs	r2, r1
 80061f4:	651a      	str	r2, [r3, #80]	; 0x50
 80061f6:	e031      	b.n	800625c <HAL_RCC_OscConfig+0x51c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10c      	bne.n	800621a <HAL_RCC_OscConfig+0x4da>
 8006200:	4b68      	ldr	r3, [pc, #416]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006202:	4a68      	ldr	r2, [pc, #416]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006204:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006206:	4969      	ldr	r1, [pc, #420]	; (80063ac <HAL_RCC_OscConfig+0x66c>)
 8006208:	400a      	ands	r2, r1
 800620a:	651a      	str	r2, [r3, #80]	; 0x50
 800620c:	4b65      	ldr	r3, [pc, #404]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 800620e:	4a65      	ldr	r2, [pc, #404]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006210:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006212:	4968      	ldr	r1, [pc, #416]	; (80063b4 <HAL_RCC_OscConfig+0x674>)
 8006214:	400a      	ands	r2, r1
 8006216:	651a      	str	r2, [r3, #80]	; 0x50
 8006218:	e020      	b.n	800625c <HAL_RCC_OscConfig+0x51c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	23a0      	movs	r3, #160	; 0xa0
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	429a      	cmp	r2, r3
 8006224:	d10e      	bne.n	8006244 <HAL_RCC_OscConfig+0x504>
 8006226:	4b5f      	ldr	r3, [pc, #380]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006228:	4a5e      	ldr	r2, [pc, #376]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 800622a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800622c:	2180      	movs	r1, #128	; 0x80
 800622e:	00c9      	lsls	r1, r1, #3
 8006230:	430a      	orrs	r2, r1
 8006232:	651a      	str	r2, [r3, #80]	; 0x50
 8006234:	4b5b      	ldr	r3, [pc, #364]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006236:	4a5b      	ldr	r2, [pc, #364]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006238:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800623a:	2180      	movs	r1, #128	; 0x80
 800623c:	0049      	lsls	r1, r1, #1
 800623e:	430a      	orrs	r2, r1
 8006240:	651a      	str	r2, [r3, #80]	; 0x50
 8006242:	e00b      	b.n	800625c <HAL_RCC_OscConfig+0x51c>
 8006244:	4b57      	ldr	r3, [pc, #348]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006246:	4a57      	ldr	r2, [pc, #348]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006248:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800624a:	4958      	ldr	r1, [pc, #352]	; (80063ac <HAL_RCC_OscConfig+0x66c>)
 800624c:	400a      	ands	r2, r1
 800624e:	651a      	str	r2, [r3, #80]	; 0x50
 8006250:	4b54      	ldr	r3, [pc, #336]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006252:	4a54      	ldr	r2, [pc, #336]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006254:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006256:	4957      	ldr	r1, [pc, #348]	; (80063b4 <HAL_RCC_OscConfig+0x674>)
 8006258:	400a      	ands	r2, r1
 800625a:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d015      	beq.n	8006290 <HAL_RCC_OscConfig+0x550>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006264:	f7ff f850 	bl	8005308 <HAL_GetTick>
 8006268:	0003      	movs	r3, r0
 800626a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800626c:	e009      	b.n	8006282 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800626e:	f7ff f84b 	bl	8005308 <HAL_GetTick>
 8006272:	0002      	movs	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	4a4f      	ldr	r2, [pc, #316]	; (80063b8 <HAL_RCC_OscConfig+0x678>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e0fc      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006282:	4b48      	ldr	r3, [pc, #288]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4013      	ands	r3, r2
 800628c:	d0ef      	beq.n	800626e <HAL_RCC_OscConfig+0x52e>
 800628e:	e014      	b.n	80062ba <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006290:	f7ff f83a 	bl	8005308 <HAL_GetTick>
 8006294:	0003      	movs	r3, r0
 8006296:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006298:	e009      	b.n	80062ae <HAL_RCC_OscConfig+0x56e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7ff f835 	bl	8005308 <HAL_GetTick>
 800629e:	0002      	movs	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	4a44      	ldr	r2, [pc, #272]	; (80063b8 <HAL_RCC_OscConfig+0x678>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x56e>
        {
          return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e0e6      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ae:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80062b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4013      	ands	r3, r2
 80062b8:	d1ef      	bne.n	800629a <HAL_RCC_OscConfig+0x55a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062ba:	2317      	movs	r3, #23
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d105      	bne.n	80062d0 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c4:	4b37      	ldr	r3, [pc, #220]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80062c6:	4a37      	ldr	r2, [pc, #220]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80062c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062ca:	493c      	ldr	r1, [pc, #240]	; (80063bc <HAL_RCC_OscConfig+0x67c>)
 80062cc:	400a      	ands	r2, r1
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2220      	movs	r2, #32
 80062d6:	4013      	ands	r3, r2
 80062d8:	d049      	beq.n	800636e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d026      	beq.n	8006330 <HAL_RCC_OscConfig+0x5f0>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80062e2:	4b30      	ldr	r3, [pc, #192]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80062e4:	4a2f      	ldr	r2, [pc, #188]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80062e6:	6892      	ldr	r2, [r2, #8]
 80062e8:	2101      	movs	r1, #1
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]
 80062ee:	4b2d      	ldr	r3, [pc, #180]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80062f0:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 80062f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062f4:	2101      	movs	r1, #1
 80062f6:	430a      	orrs	r2, r1
 80062f8:	635a      	str	r2, [r3, #52]	; 0x34
 80062fa:	4b31      	ldr	r3, [pc, #196]	; (80063c0 <HAL_RCC_OscConfig+0x680>)
 80062fc:	4a30      	ldr	r2, [pc, #192]	; (80063c0 <HAL_RCC_OscConfig+0x680>)
 80062fe:	6a12      	ldr	r2, [r2, #32]
 8006300:	2180      	movs	r1, #128	; 0x80
 8006302:	0189      	lsls	r1, r1, #6
 8006304:	430a      	orrs	r2, r1
 8006306:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006308:	f7fe fffe 	bl	8005308 <HAL_GetTick>
 800630c:	0003      	movs	r3, r0
 800630e:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006312:	f7fe fff9 	bl	8005308 <HAL_GetTick>
 8006316:	0002      	movs	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e0ab      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006324:	4b1f      	ldr	r3, [pc, #124]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2202      	movs	r2, #2
 800632a:	4013      	ands	r3, r2
 800632c:	d0f1      	beq.n	8006312 <HAL_RCC_OscConfig+0x5d2>
 800632e:	e01e      	b.n	800636e <HAL_RCC_OscConfig+0x62e>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006330:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006332:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006334:	6892      	ldr	r2, [r2, #8]
 8006336:	2101      	movs	r1, #1
 8006338:	438a      	bics	r2, r1
 800633a:	609a      	str	r2, [r3, #8]
 800633c:	4b20      	ldr	r3, [pc, #128]	; (80063c0 <HAL_RCC_OscConfig+0x680>)
 800633e:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <HAL_RCC_OscConfig+0x680>)
 8006340:	6a12      	ldr	r2, [r2, #32]
 8006342:	4920      	ldr	r1, [pc, #128]	; (80063c4 <HAL_RCC_OscConfig+0x684>)
 8006344:	400a      	ands	r2, r1
 8006346:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fe ffde 	bl	8005308 <HAL_GetTick>
 800634c:	0003      	movs	r3, r0
 800634e:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x624>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006352:	f7fe ffd9 	bl	8005308 <HAL_GetTick>
 8006356:	0002      	movs	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x624>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e08b      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2202      	movs	r2, #2
 800636a:	4013      	ands	r3, r2
 800636c:	d1f1      	bne.n	8006352 <HAL_RCC_OscConfig+0x612>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	d100      	bne.n	8006378 <HAL_RCC_OscConfig+0x638>
 8006376:	e080      	b.n	800647a <HAL_RCC_OscConfig+0x73a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006378:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	220c      	movs	r2, #12
 800637e:	4013      	ands	r3, r2
 8006380:	2b0c      	cmp	r3, #12
 8006382:	d100      	bne.n	8006386 <HAL_RCC_OscConfig+0x646>
 8006384:	e077      	b.n	8006476 <HAL_RCC_OscConfig+0x736>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	2b02      	cmp	r3, #2
 800638c:	d158      	bne.n	8006440 <HAL_RCC_OscConfig+0x700>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006390:	4a04      	ldr	r2, [pc, #16]	; (80063a4 <HAL_RCC_OscConfig+0x664>)
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	490c      	ldr	r1, [pc, #48]	; (80063c8 <HAL_RCC_OscConfig+0x688>)
 8006396:	400a      	ands	r2, r1
 8006398:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639a:	f7fe ffb5 	bl	8005308 <HAL_GetTick>
 800639e:	0003      	movs	r3, r0
 80063a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063a2:	e01c      	b.n	80063de <HAL_RCC_OscConfig+0x69e>
 80063a4:	40021000 	.word	0x40021000
 80063a8:	ffff1fff 	.word	0xffff1fff
 80063ac:	fffffeff 	.word	0xfffffeff
 80063b0:	40007000 	.word	0x40007000
 80063b4:	fffffbff 	.word	0xfffffbff
 80063b8:	00001388 	.word	0x00001388
 80063bc:	efffffff 	.word	0xefffffff
 80063c0:	40010000 	.word	0x40010000
 80063c4:	ffffdfff 	.word	0xffffdfff
 80063c8:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063cc:	f7fe ff9c 	bl	8005308 <HAL_GetTick>
 80063d0:	0002      	movs	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e04e      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063de:	4b29      	ldr	r3, [pc, #164]	; (8006484 <HAL_RCC_OscConfig+0x744>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	049b      	lsls	r3, r3, #18
 80063e6:	4013      	ands	r3, r2
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x68c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063ea:	4a26      	ldr	r2, [pc, #152]	; (8006484 <HAL_RCC_OscConfig+0x744>)
 80063ec:	4b25      	ldr	r3, [pc, #148]	; (8006484 <HAL_RCC_OscConfig+0x744>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4925      	ldr	r1, [pc, #148]	; (8006488 <HAL_RCC_OscConfig+0x748>)
 80063f2:	4019      	ands	r1, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	4318      	orrs	r0, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006402:	4303      	orrs	r3, r0
 8006404:	430b      	orrs	r3, r1
 8006406:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006408:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <HAL_RCC_OscConfig+0x744>)
 800640a:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <HAL_RCC_OscConfig+0x744>)
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	2180      	movs	r1, #128	; 0x80
 8006410:	0449      	lsls	r1, r1, #17
 8006412:	430a      	orrs	r2, r1
 8006414:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006416:	f7fe ff77 	bl	8005308 <HAL_GetTick>
 800641a:	0003      	movs	r3, r0
 800641c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x6f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006420:	f7fe ff72 	bl	8005308 <HAL_GetTick>
 8006424:	0002      	movs	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x6f2>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e024      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006432:	4b14      	ldr	r3, [pc, #80]	; (8006484 <HAL_RCC_OscConfig+0x744>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	049b      	lsls	r3, r3, #18
 800643a:	4013      	ands	r3, r2
 800643c:	d0f0      	beq.n	8006420 <HAL_RCC_OscConfig+0x6e0>
 800643e:	e01c      	b.n	800647a <HAL_RCC_OscConfig+0x73a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006440:	4b10      	ldr	r3, [pc, #64]	; (8006484 <HAL_RCC_OscConfig+0x744>)
 8006442:	4a10      	ldr	r2, [pc, #64]	; (8006484 <HAL_RCC_OscConfig+0x744>)
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	4911      	ldr	r1, [pc, #68]	; (800648c <HAL_RCC_OscConfig+0x74c>)
 8006448:	400a      	ands	r2, r1
 800644a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644c:	f7fe ff5c 	bl	8005308 <HAL_GetTick>
 8006450:	0003      	movs	r3, r0
 8006452:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006456:	f7fe ff57 	bl	8005308 <HAL_GetTick>
 800645a:	0002      	movs	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e009      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <HAL_RCC_OscConfig+0x744>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	049b      	lsls	r3, r3, #18
 8006470:	4013      	ands	r3, r2
 8006472:	d1f0      	bne.n	8006456 <HAL_RCC_OscConfig+0x716>
 8006474:	e001      	b.n	800647a <HAL_RCC_OscConfig+0x73a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <HAL_RCC_OscConfig+0x73c>
    }
  }
  
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	b006      	add	sp, #24
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40021000 	.word	0x40021000
 8006488:	ff02ffff 	.word	0xff02ffff
 800648c:	feffffff 	.word	0xfeffffff

08006490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800649e:	4b82      	ldr	r3, [pc, #520]	; (80066a8 <HAL_RCC_ClockConfig+0x218>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	401a      	ands	r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d211      	bcs.n	80064d0 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ac:	4b7e      	ldr	r3, [pc, #504]	; (80066a8 <HAL_RCC_ClockConfig+0x218>)
 80064ae:	4a7e      	ldr	r2, [pc, #504]	; (80066a8 <HAL_RCC_ClockConfig+0x218>)
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	2101      	movs	r1, #1
 80064b4:	438a      	bics	r2, r1
 80064b6:	0011      	movs	r1, r2
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064be:	4b7a      	ldr	r3, [pc, #488]	; (80066a8 <HAL_RCC_ClockConfig+0x218>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2201      	movs	r2, #1
 80064c4:	401a      	ands	r2, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d001      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0e6      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2202      	movs	r2, #2
 80064d6:	4013      	ands	r3, r2
 80064d8:	d009      	beq.n	80064ee <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064da:	4a74      	ldr	r2, [pc, #464]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 80064dc:	4b73      	ldr	r3, [pc, #460]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	21f0      	movs	r1, #240	; 0xf0
 80064e2:	438b      	bics	r3, r1
 80064e4:	0019      	movs	r1, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	430b      	orrs	r3, r1
 80064ec:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2201      	movs	r2, #1
 80064f4:	4013      	ands	r3, r2
 80064f6:	d100      	bne.n	80064fa <HAL_RCC_ClockConfig+0x6a>
 80064f8:	e089      	b.n	800660e <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d107      	bne.n	8006512 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006502:	4b6a      	ldr	r3, [pc, #424]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	029b      	lsls	r3, r3, #10
 800650a:	4013      	ands	r3, r2
 800650c:	d120      	bne.n	8006550 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0c5      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d107      	bne.n	800652a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651a:	4b64      	ldr	r3, [pc, #400]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	049b      	lsls	r3, r3, #18
 8006522:	4013      	ands	r3, r2
 8006524:	d114      	bne.n	8006550 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e0b9      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d106      	bne.n	8006540 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006532:	4b5e      	ldr	r3, [pc, #376]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2204      	movs	r2, #4
 8006538:	4013      	ands	r3, r2
 800653a:	d109      	bne.n	8006550 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0ae      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8006540:	4b5a      	ldr	r3, [pc, #360]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	2380      	movs	r3, #128	; 0x80
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4013      	ands	r3, r2
 800654a:	d101      	bne.n	8006550 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0a6      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006550:	4a56      	ldr	r2, [pc, #344]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 8006552:	4b56      	ldr	r3, [pc, #344]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2103      	movs	r1, #3
 8006558:	438b      	bics	r3, r1
 800655a:	0019      	movs	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	430b      	orrs	r3, r1
 8006562:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006564:	f7fe fed0 	bl	8005308 <HAL_GetTick>
 8006568:	0003      	movs	r3, r0
 800656a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d111      	bne.n	8006598 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006574:	e009      	b.n	800658a <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006576:	f7fe fec7 	bl	8005308 <HAL_GetTick>
 800657a:	0002      	movs	r2, r0
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	4a4b      	ldr	r2, [pc, #300]	; (80066b0 <HAL_RCC_ClockConfig+0x220>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e089      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800658a:	4b48      	ldr	r3, [pc, #288]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	220c      	movs	r2, #12
 8006590:	4013      	ands	r3, r2
 8006592:	2b08      	cmp	r3, #8
 8006594:	d1ef      	bne.n	8006576 <HAL_RCC_ClockConfig+0xe6>
 8006596:	e03a      	b.n	800660e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d111      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065a0:	e009      	b.n	80065b6 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a2:	f7fe feb1 	bl	8005308 <HAL_GetTick>
 80065a6:	0002      	movs	r2, r0
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	4a40      	ldr	r2, [pc, #256]	; (80066b0 <HAL_RCC_ClockConfig+0x220>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e073      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b6:	4b3d      	ldr	r3, [pc, #244]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	220c      	movs	r2, #12
 80065bc:	4013      	ands	r3, r2
 80065be:	2b0c      	cmp	r3, #12
 80065c0:	d1ef      	bne.n	80065a2 <HAL_RCC_ClockConfig+0x112>
 80065c2:	e024      	b.n	800660e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d11b      	bne.n	8006604 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80065cc:	e009      	b.n	80065e2 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ce:	f7fe fe9b 	bl	8005308 <HAL_GetTick>
 80065d2:	0002      	movs	r2, r0
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	4a35      	ldr	r2, [pc, #212]	; (80066b0 <HAL_RCC_ClockConfig+0x220>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e05d      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80065e2:	4b32      	ldr	r3, [pc, #200]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	220c      	movs	r2, #12
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d1ef      	bne.n	80065ce <HAL_RCC_ClockConfig+0x13e>
 80065ee:	e00e      	b.n	800660e <HAL_RCC_ClockConfig+0x17e>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f0:	f7fe fe8a 	bl	8005308 <HAL_GetTick>
 80065f4:	0002      	movs	r2, r0
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	4a2d      	ldr	r2, [pc, #180]	; (80066b0 <HAL_RCC_ClockConfig+0x220>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e04c      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006604:	4b29      	ldr	r3, [pc, #164]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	220c      	movs	r2, #12
 800660a:	4013      	ands	r3, r2
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800660e:	4b26      	ldr	r3, [pc, #152]	; (80066a8 <HAL_RCC_ClockConfig+0x218>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2201      	movs	r2, #1
 8006614:	401a      	ands	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d911      	bls.n	8006640 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800661c:	4b22      	ldr	r3, [pc, #136]	; (80066a8 <HAL_RCC_ClockConfig+0x218>)
 800661e:	4a22      	ldr	r2, [pc, #136]	; (80066a8 <HAL_RCC_ClockConfig+0x218>)
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	2101      	movs	r1, #1
 8006624:	438a      	bics	r2, r1
 8006626:	0011      	movs	r1, r2
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800662e:	4b1e      	ldr	r3, [pc, #120]	; (80066a8 <HAL_RCC_ClockConfig+0x218>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	401a      	ands	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d001      	beq.n	8006640 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e02e      	b.n	800669e <HAL_RCC_ClockConfig+0x20e>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2204      	movs	r2, #4
 8006646:	4013      	ands	r3, r2
 8006648:	d008      	beq.n	800665c <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800664a:	4a18      	ldr	r2, [pc, #96]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 800664c:	4b17      	ldr	r3, [pc, #92]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	4918      	ldr	r1, [pc, #96]	; (80066b4 <HAL_RCC_ClockConfig+0x224>)
 8006652:	4019      	ands	r1, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	430b      	orrs	r3, r1
 800665a:	60d3      	str	r3, [r2, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2208      	movs	r2, #8
 8006662:	4013      	ands	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006666:	4a11      	ldr	r2, [pc, #68]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 8006668:	4b10      	ldr	r3, [pc, #64]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	4912      	ldr	r1, [pc, #72]	; (80066b8 <HAL_RCC_ClockConfig+0x228>)
 800666e:	4019      	ands	r1, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	430b      	orrs	r3, r1
 8006678:	60d3      	str	r3, [r2, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800667a:	f000 f823 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 800667e:	0001      	movs	r1, r0
 8006680:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <HAL_RCC_ClockConfig+0x21c>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	220f      	movs	r2, #15
 8006688:	4013      	ands	r3, r2
 800668a:	4a0c      	ldr	r2, [pc, #48]	; (80066bc <HAL_RCC_ClockConfig+0x22c>)
 800668c:	5cd3      	ldrb	r3, [r2, r3]
 800668e:	000a      	movs	r2, r1
 8006690:	40da      	lsrs	r2, r3
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <HAL_RCC_ClockConfig+0x230>)
 8006694:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006696:	2003      	movs	r0, #3
 8006698:	f004 fa3b 	bl	800ab12 <HAL_InitTick>
  
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	0018      	movs	r0, r3
 80066a0:	46bd      	mov	sp, r7
 80066a2:	b004      	add	sp, #16
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	40022000 	.word	0x40022000
 80066ac:	40021000 	.word	0x40021000
 80066b0:	00001388 	.word	0x00001388
 80066b4:	fffff8ff 	.word	0xfffff8ff
 80066b8:	ffffc7ff 	.word	0xffffc7ff
 80066bc:	0800c50c 	.word	0x0800c50c
 80066c0:	20000028 	.word	0x20000028

080066c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	2300      	movs	r3, #0
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	2300      	movs	r3, #0
 80066dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80066e2:	4b32      	ldr	r3, [pc, #200]	; (80067ac <HAL_RCC_GetSysClockFreq+0xe8>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	220c      	movs	r2, #12
 80066ec:	4013      	ands	r3, r2
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d00e      	beq.n	8006710 <HAL_RCC_GetSysClockFreq+0x4c>
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d00f      	beq.n	8006716 <HAL_RCC_GetSysClockFreq+0x52>
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d145      	bne.n	8006786 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80066fa:	4b2c      	ldr	r3, [pc, #176]	; (80067ac <HAL_RCC_GetSysClockFreq+0xe8>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2210      	movs	r2, #16
 8006700:	4013      	ands	r3, r2
 8006702:	d002      	beq.n	800670a <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006704:	4b2a      	ldr	r3, [pc, #168]	; (80067b0 <HAL_RCC_GetSysClockFreq+0xec>)
 8006706:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006708:	e04b      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 800670a:	4b2a      	ldr	r3, [pc, #168]	; (80067b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800670c:	613b      	str	r3, [r7, #16]
      break;
 800670e:	e048      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006710:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006712:	613b      	str	r3, [r7, #16]
      break;
 8006714:	e045      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	0c9b      	lsrs	r3, r3, #18
 800671a:	220f      	movs	r2, #15
 800671c:	4013      	ands	r3, r2
 800671e:	4a27      	ldr	r2, [pc, #156]	; (80067bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006720:	5cd3      	ldrb	r3, [r2, r3]
 8006722:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	0d9b      	lsrs	r3, r3, #22
 8006728:	2203      	movs	r2, #3
 800672a:	4013      	ands	r3, r2
 800672c:	3301      	adds	r3, #1
 800672e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006730:	4b1e      	ldr	r3, [pc, #120]	; (80067ac <HAL_RCC_GetSysClockFreq+0xe8>)
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	2380      	movs	r3, #128	; 0x80
 8006736:	025b      	lsls	r3, r3, #9
 8006738:	4013      	ands	r3, r2
 800673a:	d009      	beq.n	8006750 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4a1e      	ldr	r2, [pc, #120]	; (80067b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006740:	4353      	muls	r3, r2
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	0018      	movs	r0, r3
 8006746:	f7f9 fcdf 	bl	8000108 <__udivsi3>
 800674a:	0003      	movs	r3, r0
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	e017      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8006750:	4b16      	ldr	r3, [pc, #88]	; (80067ac <HAL_RCC_GetSysClockFreq+0xe8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2210      	movs	r2, #16
 8006756:	4013      	ands	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4a14      	ldr	r2, [pc, #80]	; (80067b0 <HAL_RCC_GetSysClockFreq+0xec>)
 800675e:	4353      	muls	r3, r2
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	0018      	movs	r0, r3
 8006764:	f7f9 fcd0 	bl	8000108 <__udivsi3>
 8006768:	0003      	movs	r3, r0
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e008      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4a10      	ldr	r2, [pc, #64]	; (80067b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006772:	4353      	muls	r3, r2
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	0018      	movs	r0, r3
 8006778:	f7f9 fcc6 	bl	8000108 <__udivsi3>
 800677c:	0003      	movs	r3, r0
 800677e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	613b      	str	r3, [r7, #16]
      break;
 8006784:	e00d      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8006786:	4b09      	ldr	r3, [pc, #36]	; (80067ac <HAL_RCC_GetSysClockFreq+0xe8>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	0b5b      	lsrs	r3, r3, #13
 800678c:	2207      	movs	r2, #7
 800678e:	4013      	ands	r3, r2
 8006790:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	2280      	movs	r2, #128	; 0x80
 8006798:	0212      	lsls	r2, r2, #8
 800679a:	409a      	lsls	r2, r3
 800679c:	0013      	movs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
      break;
 80067a0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80067a2:	693b      	ldr	r3, [r7, #16]
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b006      	add	sp, #24
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40021000 	.word	0x40021000
 80067b0:	003d0900 	.word	0x003d0900
 80067b4:	00f42400 	.word	0x00f42400
 80067b8:	007a1200 	.word	0x007a1200
 80067bc:	0800c524 	.word	0x0800c524

080067c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067c4:	4b02      	ldr	r3, [pc, #8]	; (80067d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80067c6:	681b      	ldr	r3, [r3, #0]
}
 80067c8:	0018      	movs	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	20000028 	.word	0x20000028

080067d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80067d8:	f7ff fff2 	bl	80067c0 <HAL_RCC_GetHCLKFreq>
 80067dc:	0001      	movs	r1, r0
 80067de:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	2207      	movs	r2, #7
 80067e6:	4013      	ands	r3, r2
 80067e8:	4a04      	ldr	r2, [pc, #16]	; (80067fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80067ea:	5cd3      	ldrb	r3, [r2, r3]
 80067ec:	40d9      	lsrs	r1, r3
 80067ee:	000b      	movs	r3, r1
}    
 80067f0:	0018      	movs	r0, r3
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	40021000 	.word	0x40021000
 80067fc:	0800c51c 	.word	0x0800c51c

08006800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006804:	f7ff ffdc 	bl	80067c0 <HAL_RCC_GetHCLKFreq>
 8006808:	0001      	movs	r1, r0
 800680a:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	0adb      	lsrs	r3, r3, #11
 8006810:	2207      	movs	r2, #7
 8006812:	4013      	ands	r3, r2
 8006814:	4a04      	ldr	r2, [pc, #16]	; (8006828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006816:	5cd3      	ldrb	r3, [r2, r3]
 8006818:	40d9      	lsrs	r1, r3
 800681a:	000b      	movs	r3, r1
} 
 800681c:	0018      	movs	r0, r3
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	46c0      	nop			; (mov r8, r8)
 8006824:	40021000 	.word	0x40021000
 8006828:	0800c51c 	.word	0x0800c51c

0800682c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006838:	2300      	movs	r3, #0
 800683a:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800683c:	4b23      	ldr	r3, [pc, #140]	; (80068cc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	22f0      	movs	r2, #240	; 0xf0
 8006842:	4013      	ands	r3, r2
 8006844:	d12b      	bne.n	800689e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006846:	4b21      	ldr	r3, [pc, #132]	; (80068cc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800684a:	2380      	movs	r3, #128	; 0x80
 800684c:	055b      	lsls	r3, r3, #21
 800684e:	4013      	ands	r3, r2
 8006850:	d006      	beq.n	8006860 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006852:	4b1f      	ldr	r3, [pc, #124]	; (80068d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	23c0      	movs	r3, #192	; 0xc0
 8006858:	015b      	lsls	r3, r3, #5
 800685a:	4013      	ands	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e012      	b.n	8006886 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006860:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006862:	4a1a      	ldr	r2, [pc, #104]	; (80068cc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006864:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006866:	2180      	movs	r1, #128	; 0x80
 8006868:	0549      	lsls	r1, r1, #21
 800686a:	430a      	orrs	r2, r1
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800686e:	4b18      	ldr	r3, [pc, #96]	; (80068d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	23c0      	movs	r3, #192	; 0xc0
 8006874:	015b      	lsls	r3, r3, #5
 8006876:	4013      	ands	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 800687a:	4b14      	ldr	r3, [pc, #80]	; (80068cc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800687c:	4a13      	ldr	r2, [pc, #76]	; (80068cc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800687e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006880:	4914      	ldr	r1, [pc, #80]	; (80068d4 <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 8006882:	400a      	ands	r2, r1
 8006884:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	23c0      	movs	r3, #192	; 0xc0
 800688a:	015b      	lsls	r3, r3, #5
 800688c:	429a      	cmp	r2, r3
 800688e:	d106      	bne.n	800689e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	23c0      	movs	r3, #192	; 0xc0
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	429a      	cmp	r2, r3
 8006898:	d101      	bne.n	800689e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800689a:	2301      	movs	r3, #1
 800689c:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800689e:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80068a0:	4a0d      	ldr	r2, [pc, #52]	; (80068d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	2101      	movs	r1, #1
 80068a6:	438a      	bics	r2, r1
 80068a8:	0011      	movs	r1, r2
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80068b0:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2201      	movs	r2, #1
 80068b6:	401a      	ands	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d001      	beq.n	80068c2 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b004      	add	sp, #16
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40021000 	.word	0x40021000
 80068d0:	40007000 	.word	0x40007000
 80068d4:	efffffff 	.word	0xefffffff
 80068d8:	40022000 	.word	0x40022000

080068dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2220      	movs	r2, #32
 80068f2:	4013      	ands	r3, r2
 80068f4:	d100      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80068f6:	e0c3      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80068f8:	2317      	movs	r3, #23
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006900:	4b94      	ldr	r3, [pc, #592]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006904:	2380      	movs	r3, #128	; 0x80
 8006906:	055b      	lsls	r3, r3, #21
 8006908:	4013      	ands	r3, r2
 800690a:	d10a      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800690c:	4b91      	ldr	r3, [pc, #580]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800690e:	4a91      	ldr	r2, [pc, #580]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006910:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006912:	2180      	movs	r1, #128	; 0x80
 8006914:	0549      	lsls	r1, r1, #21
 8006916:	430a      	orrs	r2, r1
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800691a:	2317      	movs	r3, #23
 800691c:	18fb      	adds	r3, r7, r3
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006922:	4b8d      	ldr	r3, [pc, #564]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	2380      	movs	r3, #128	; 0x80
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	4013      	ands	r3, r2
 800692c:	d11a      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800692e:	4b8a      	ldr	r3, [pc, #552]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006930:	4a89      	ldr	r2, [pc, #548]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	2180      	movs	r1, #128	; 0x80
 8006936:	0049      	lsls	r1, r1, #1
 8006938:	430a      	orrs	r2, r1
 800693a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800693c:	f7fe fce4 	bl	8005308 <HAL_GetTick>
 8006940:	0003      	movs	r3, r0
 8006942:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006944:	e008      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006946:	f7fe fcdf 	bl	8005308 <HAL_GetTick>
 800694a:	0002      	movs	r2, r0
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b64      	cmp	r3, #100	; 0x64
 8006952:	d901      	bls.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        {
          return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e0f9      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x270>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006958:	4b7f      	ldr	r3, [pc, #508]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	2380      	movs	r3, #128	; 0x80
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	4013      	ands	r3, r2
 8006962:	d0f0      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x6a>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006964:	4b7b      	ldr	r3, [pc, #492]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	23c0      	movs	r3, #192	; 0xc0
 800696a:	039b      	lsls	r3, r3, #14
 800696c:	4013      	ands	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	23c0      	movs	r3, #192	; 0xc0
 8006976:	039b      	lsls	r3, r3, #14
 8006978:	401a      	ands	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	429a      	cmp	r2, r3
 800697e:	d010      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	23c0      	movs	r3, #192	; 0xc0
 8006986:	029b      	lsls	r3, r3, #10
 8006988:	401a      	ands	r2, r3
 800698a:	23c0      	movs	r3, #192	; 0xc0
 800698c:	029b      	lsls	r3, r3, #10
 800698e:	429a      	cmp	r2, r3
 8006990:	d107      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8006992:	4b70      	ldr	r3, [pc, #448]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	2380      	movs	r3, #128	; 0x80
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	4013      	ands	r3, r2
 800699c:	d001      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 800699e:	2301      	movs	r3, #1
 80069a0:	e0d4      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x270>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80069a2:	4b6c      	ldr	r3, [pc, #432]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80069a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069a6:	23c0      	movs	r3, #192	; 0xc0
 80069a8:	029b      	lsls	r3, r3, #10
 80069aa:	4013      	ands	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d03b      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x150>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	23c0      	movs	r3, #192	; 0xc0
 80069ba:	029b      	lsls	r3, r3, #10
 80069bc:	401a      	ands	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d033      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x150>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2220      	movs	r2, #32
 80069ca:	4013      	ands	r3, r2
 80069cc:	d02e      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x150>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80069ce:	4b61      	ldr	r3, [pc, #388]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80069d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d2:	4a62      	ldr	r2, [pc, #392]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069d8:	4b5e      	ldr	r3, [pc, #376]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80069da:	4a5e      	ldr	r2, [pc, #376]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80069dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80069de:	2180      	movs	r1, #128	; 0x80
 80069e0:	0309      	lsls	r1, r1, #12
 80069e2:	430a      	orrs	r2, r1
 80069e4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069e6:	4b5b      	ldr	r3, [pc, #364]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80069e8:	4a5a      	ldr	r2, [pc, #360]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80069ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80069ec:	495c      	ldr	r1, [pc, #368]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80069ee:	400a      	ands	r2, r1
 80069f0:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80069f2:	4b58      	ldr	r3, [pc, #352]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	651a      	str	r2, [r3, #80]	; 0x50
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	2380      	movs	r3, #128	; 0x80
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4013      	ands	r3, r2
 8006a00:	d014      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a02:	f7fe fc81 	bl	8005308 <HAL_GetTick>
 8006a06:	0003      	movs	r3, r0
 8006a08:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0a:	e009      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a0c:	f7fe fc7c 	bl	8005308 <HAL_GetTick>
 8006a10:	0002      	movs	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	4a53      	ldr	r2, [pc, #332]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e095      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a20:	4b4c      	ldr	r3, [pc, #304]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d0ef      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x130>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	23c0      	movs	r3, #192	; 0xc0
 8006a32:	029b      	lsls	r3, r3, #10
 8006a34:	401a      	ands	r2, r3
 8006a36:	23c0      	movs	r3, #192	; 0xc0
 8006a38:	029b      	lsls	r3, r3, #10
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d10b      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006a3e:	4a45      	ldr	r2, [pc, #276]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006a40:	4b44      	ldr	r3, [pc, #272]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4948      	ldr	r1, [pc, #288]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006a46:	4019      	ands	r1, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6858      	ldr	r0, [r3, #4]
 8006a4c:	23c0      	movs	r3, #192	; 0xc0
 8006a4e:	039b      	lsls	r3, r3, #14
 8006a50:	4003      	ands	r3, r0
 8006a52:	430b      	orrs	r3, r1
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4a3f      	ldr	r2, [pc, #252]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006a58:	4b3e      	ldr	r3, [pc, #248]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006a5a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6858      	ldr	r0, [r3, #4]
 8006a60:	23c0      	movs	r3, #192	; 0xc0
 8006a62:	029b      	lsls	r3, r3, #10
 8006a64:	4003      	ands	r3, r0
 8006a66:	430b      	orrs	r3, r1
 8006a68:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a6a:	2317      	movs	r3, #23
 8006a6c:	18fb      	adds	r3, r7, r3
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d105      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a74:	4b37      	ldr	r3, [pc, #220]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006a76:	4a37      	ldr	r2, [pc, #220]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006a78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a7a:	493c      	ldr	r1, [pc, #240]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006a7c:	400a      	ands	r2, r1
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2201      	movs	r2, #1
 8006a86:	4013      	ands	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a8a:	4a32      	ldr	r2, [pc, #200]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006a8c:	4b31      	ldr	r3, [pc, #196]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a90:	2103      	movs	r1, #3
 8006a92:	438b      	bics	r3, r1
 8006a94:	0019      	movs	r1, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d009      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006aa8:	4a2a      	ldr	r2, [pc, #168]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006aaa:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aae:	210c      	movs	r1, #12
 8006ab0:	438b      	bics	r3, r1
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	d008      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ac6:	4a23      	ldr	r2, [pc, #140]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006ac8:	4b22      	ldr	r3, [pc, #136]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006acc:	4928      	ldr	r1, [pc, #160]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006ace:	4019      	ands	r1, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2208      	movs	r2, #8
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d008      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ae2:	4a1c      	ldr	r2, [pc, #112]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae8:	4922      	ldr	r1, [pc, #136]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006aea:	4019      	ands	r1, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	430b      	orrs	r3, r1
 8006af2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	2380      	movs	r3, #128	; 0x80
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4013      	ands	r3, r2
 8006afe:	d008      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b00:	4a14      	ldr	r2, [pc, #80]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b06:	4915      	ldr	r1, [pc, #84]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b08:	4019      	ands	r1, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	64d3      	str	r3, [r2, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2240      	movs	r2, #64	; 0x40
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d008      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b1c:	4a0d      	ldr	r2, [pc, #52]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b22:	4915      	ldr	r1, [pc, #84]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006b24:	4019      	ands	r1, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2280      	movs	r2, #128	; 0x80
 8006b34:	4013      	ands	r3, r2
 8006b36:	d008      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006b38:	4a06      	ldr	r2, [pc, #24]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006b3a:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3e:	490f      	ldr	r1, [pc, #60]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006b40:	4019      	ands	r1, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	430b      	orrs	r3, r1
 8006b48:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	b006      	add	sp, #24
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40007000 	.word	0x40007000
 8006b5c:	fffcffff 	.word	0xfffcffff
 8006b60:	fff7ffff 	.word	0xfff7ffff
 8006b64:	00001388 	.word	0x00001388
 8006b68:	ffcfffff 	.word	0xffcfffff
 8006b6c:	efffffff 	.word	0xefffffff
 8006b70:	fffff3ff 	.word	0xfffff3ff
 8006b74:	ffffcfff 	.word	0xffffcfff
 8006b78:	fbffffff 	.word	0xfbffffff
 8006b7c:	fff3ffff 	.word	0xfff3ffff

08006b80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08a      	sub	sp, #40	; 0x28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61bb      	str	r3, [r7, #24]
 8006b90:	2300      	movs	r3, #0
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t srcclk = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
#if defined(USB)
    uint32_t pllmul = 0U, plldiv = 0U, pllvco = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	623b      	str	r3, [r7, #32]
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d100      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8006baa:	e159      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006bac:	d809      	bhi.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d100      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8006bb2:	e0ec      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d100      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006bb8:	e11a      	b.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d100      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006bbe:	e0b5      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
    } 
#endif /* RCC_CCIPR_I2C3SEL */
  default: 
    {
      break;
 8006bc0:	e1c4      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
  switch (PeriphClk)
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d00c      	beq.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8006bc6:	d803      	bhi.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d100      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8006bcc:	e170      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
      break;
 8006bce:	e1bd      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
  switch (PeriphClk)
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d058      	beq.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8006bd4:	2280      	movs	r2, #128	; 0x80
 8006bd6:	0052      	lsls	r2, r2, #1
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d100      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8006bdc:	e18e      	b.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
      break;
 8006bde:	e1b5      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      temp_reg = RCC->CSR;
 8006be0:	4bbc      	ldr	r3, [pc, #752]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be4:	61fb      	str	r3, [r7, #28]
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006be6:	4bbb      	ldr	r3, [pc, #748]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006be8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bea:	23c0      	movs	r3, #192	; 0xc0
 8006bec:	029b      	lsls	r3, r3, #10
 8006bee:	4013      	ands	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	025b      	lsls	r3, r3, #9
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d108      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 8006bfc:	69fa      	ldr	r2, [r7, #28]
 8006bfe:	2380      	movs	r3, #128	; 0x80
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4013      	ands	r3, r2
 8006c04:	d003      	beq.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
        frequency = LSE_VALUE;
 8006c06:	2380      	movs	r3, #128	; 0x80
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0c:	e03a      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	2380      	movs	r3, #128	; 0x80
 8006c12:	029b      	lsls	r3, r3, #10
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d106      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d002      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSI_VALUE;
 8006c20:	4bad      	ldr	r3, [pc, #692]	; (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
 8006c24:	e02e      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	23c0      	movs	r3, #192	; 0xc0
 8006c2a:	029b      	lsls	r3, r3, #10
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d126      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006c30:	4ba8      	ldr	r3, [pc, #672]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	029b      	lsls	r3, r3, #10
 8006c38:	4013      	ands	r3, r2
 8006c3a:	d020      	beq.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8006c3c:	4ba5      	ldr	r3, [pc, #660]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	23c0      	movs	r3, #192	; 0xc0
 8006c42:	039b      	lsls	r3, r3, #14
 8006c44:	4013      	ands	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
        switch (clkprediv)
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2280      	movs	r2, #128	; 0x80
 8006c4c:	0392      	lsls	r2, r2, #14
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00b      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8006c52:	22c0      	movs	r2, #192	; 0xc0
 8006c54:	0392      	lsls	r2, r2, #14
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006c5a:	2280      	movs	r2, #128	; 0x80
 8006c5c:	0352      	lsls	r2, r2, #13
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d006      	beq.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8006c62:	e008      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
            frequency = HSE_VALUE / 16U;
 8006c64:	4b9d      	ldr	r3, [pc, #628]	; (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c68:	e008      	b.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 8U;
 8006c6a:	4b9d      	ldr	r3, [pc, #628]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c6e:	e005      	b.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 4U;
 8006c70:	4b9c      	ldr	r3, [pc, #624]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c74:	e002      	b.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 2U;
 8006c76:	4b9c      	ldr	r3, [pc, #624]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c7a:	46c0      	nop			; (mov r8, r8)
      }
 8006c7c:	e002      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
        frequency = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006c82:	e163      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006c84:	e162      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006c86:	4b93      	ldr	r3, [pc, #588]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c8a:	2380      	movs	r3, #128	; 0x80
 8006c8c:	04db      	lsls	r3, r3, #19
 8006c8e:	4013      	ands	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d138      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8006c98:	4b8e      	ldr	r3, [pc, #568]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	2380      	movs	r3, #128	; 0x80
 8006c9e:	049b      	lsls	r3, r3, #18
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d032      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8006ca4:	4b8b      	ldr	r3, [pc, #556]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	23f0      	movs	r3, #240	; 0xf0
 8006caa:	039b      	lsls	r3, r3, #14
 8006cac:	4013      	ands	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8006cb0:	4b88      	ldr	r3, [pc, #544]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	23c0      	movs	r3, #192	; 0xc0
 8006cb6:	041b      	lsls	r3, r3, #16
 8006cb8:	4013      	ands	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	0c9b      	lsrs	r3, r3, #18
 8006cc0:	4a8a      	ldr	r2, [pc, #552]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006cc2:	5cd3      	ldrb	r3, [r2, r3]
 8006cc4:	613b      	str	r3, [r7, #16]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	0d9b      	lsrs	r3, r3, #22
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8006cce:	4b81      	ldr	r3, [pc, #516]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	2380      	movs	r3, #128	; 0x80
 8006cd4:	025b      	lsls	r3, r3, #9
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d10a      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8006cda:	4b7e      	ldr	r3, [pc, #504]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2210      	movs	r2, #16
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d002      	beq.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
                    pllvco =  (HSI_VALUE >> 2U);
 8006ce4:	4b80      	ldr	r3, [pc, #512]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8006ce6:	623b      	str	r3, [r7, #32]
 8006ce8:	e004      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
                    pllvco =  HSI_VALUE;
 8006cea:	4b81      	ldr	r3, [pc, #516]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006cec:	623b      	str	r3, [r7, #32]
 8006cee:	e001      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
                pllvco = HSE_VALUE;
 8006cf0:	4b80      	ldr	r3, [pc, #512]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8006cf2:	623b      	str	r3, [r7, #32]
            pllvco = (pllvco * pllmul);
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4353      	muls	r3, r2
 8006cfa:	623b      	str	r3, [r7, #32]
            frequency = (pllvco/ plldiv);
 8006cfc:	68f9      	ldr	r1, [r7, #12]
 8006cfe:	6a38      	ldr	r0, [r7, #32]
 8006d00:	f7f9 fa02 	bl	8000108 <__udivsi3>
 8006d04:	0003      	movs	r3, r0
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
 8006d08:	e00f      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	2380      	movs	r3, #128	; 0x80
 8006d0e:	04db      	lsls	r3, r3, #19
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d107      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006d14:	4b6f      	ldr	r3, [pc, #444]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	d002      	beq.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
            frequency = HSI48_VALUE;
 8006d1e:	4b76      	ldr	r3, [pc, #472]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
 8006d22:	e002      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
            frequency = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d28:	e110      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006d2a:	e10f      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006d2c:	4b69      	ldr	r3, [pc, #420]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d30:	2203      	movs	r2, #3
 8006d32:	4013      	ands	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006d3c:	f7ff fd60 	bl	8006800 <HAL_RCC_GetPCLK2Freq>
 8006d40:	0003      	movs	r3, r0
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006d44:	e102      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8006d4c:	4b61      	ldr	r3, [pc, #388]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2204      	movs	r2, #4
 8006d52:	4013      	ands	r3, r2
 8006d54:	d002      	beq.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        frequency = HSI_VALUE;
 8006d56:	4b66      	ldr	r3, [pc, #408]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5a:	e017      	b.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d104      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        frequency = HAL_RCC_GetSysClockFreq();
 8006d62:	f7ff fcaf 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8006d66:	0003      	movs	r3, r0
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006d6a:	e0ef      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d109      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8006d72:	4b58      	ldr	r3, [pc, #352]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d76:	2380      	movs	r3, #128	; 0x80
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        frequency = LSE_VALUE;
 8006d7e:	2380      	movs	r3, #128	; 0x80
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
 8006d84:	e002      	b.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
        frequency = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006d8a:	e0df      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006d8c:	e0de      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d8e:	4b51      	ldr	r3, [pc, #324]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d92:	220c      	movs	r2, #12
 8006d94:	4013      	ands	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006d9e:	f7ff fd19 	bl	80067d4 <HAL_RCC_GetPCLK1Freq>
 8006da2:	0003      	movs	r3, r0
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006da6:	e0d1      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d107      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006dae:	4b49      	ldr	r3, [pc, #292]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2204      	movs	r2, #4
 8006db4:	4013      	ands	r3, r2
 8006db6:	d002      	beq.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        frequency = HSI_VALUE;
 8006db8:	4b4d      	ldr	r3, [pc, #308]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
 8006dbc:	e017      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d104      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
        frequency = HAL_RCC_GetSysClockFreq();
 8006dc4:	f7ff fc7e 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8006dc8:	0003      	movs	r3, r0
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006dcc:	e0be      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b0c      	cmp	r3, #12
 8006dd2:	d109      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8006dd4:	4b3f      	ldr	r3, [pc, #252]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd8:	2380      	movs	r3, #128	; 0x80
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d003      	beq.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = LSE_VALUE;
 8006de0:	2380      	movs	r3, #128	; 0x80
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
 8006de6:	e002      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
        frequency = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006dec:	e0ae      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006dee:	e0ad      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006df0:	4b38      	ldr	r3, [pc, #224]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006df2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006df4:	23c0      	movs	r3, #192	; 0xc0
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	4013      	ands	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006e02:	f7ff fce7 	bl	80067d4 <HAL_RCC_GetPCLK1Freq>
 8006e06:	0003      	movs	r3, r0
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e0a:	e09f      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	2380      	movs	r3, #128	; 0x80
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d107      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8006e16:	4b2f      	ldr	r3, [pc, #188]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	d002      	beq.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        frequency = HSI_VALUE;
 8006e20:	4b33      	ldr	r3, [pc, #204]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
 8006e24:	e01b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	2380      	movs	r3, #128	; 0x80
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d104      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetSysClockFreq();
 8006e30:	f7ff fc48 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8006e34:	0003      	movs	r3, r0
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e38:	e088      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	23c0      	movs	r3, #192	; 0xc0
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d109      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8006e44:	4b23      	ldr	r3, [pc, #140]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006e46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e48:	2380      	movs	r3, #128	; 0x80
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = LSE_VALUE;
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	e002      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
        frequency = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e5c:	e076      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006e5e:	e075      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e60:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e64:	23c0      	movs	r3, #192	; 0xc0
 8006e66:	019b      	lsls	r3, r3, #6
 8006e68:	4013      	ands	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d104      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006e72:	f7ff fcaf 	bl	80067d4 <HAL_RCC_GetPCLK1Freq>
 8006e76:	0003      	movs	r3, r0
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e7a:	e067      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	2380      	movs	r3, #128	; 0x80
 8006e80:	019b      	lsls	r3, r3, #6
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d107      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2204      	movs	r2, #4
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d002      	beq.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
        frequency = HSI_VALUE;
 8006e90:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e94:	e05a      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	2380      	movs	r3, #128	; 0x80
 8006e9a:	015b      	lsls	r3, r3, #5
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d104      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
        frequency = HAL_RCC_GetSysClockFreq();
 8006ea0:	f7ff fc10 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ea8:	e050      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        frequency = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006eae:	e04d      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8006eb0:	4b08      	ldr	r3, [pc, #32]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb4:	2380      	movs	r3, #128	; 0x80
 8006eb6:	03db      	lsls	r3, r3, #15
 8006eb8:	401a      	ands	r2, r3
 8006eba:	2380      	movs	r3, #128	; 0x80
 8006ebc:	03db      	lsls	r3, r3, #15
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d104      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ec2:	f7ff fc87 	bl	80067d4 <HAL_RCC_GetPCLK1Freq>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006eca:	e03f      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        frequency = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ed0:	e03c      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	00009088 	.word	0x00009088
 8006edc:	0007a120 	.word	0x0007a120
 8006ee0:	000f4240 	.word	0x000f4240
 8006ee4:	001e8480 	.word	0x001e8480
 8006ee8:	003d0900 	.word	0x003d0900
 8006eec:	0800c524 	.word	0x0800c524
 8006ef0:	00f42400 	.word	0x00f42400
 8006ef4:	007a1200 	.word	0x007a1200
 8006ef8:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006efc:	4b16      	ldr	r3, [pc, #88]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 8006efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f00:	23c0      	movs	r3, #192	; 0xc0
 8006f02:	029b      	lsls	r3, r3, #10
 8006f04:	4013      	ands	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006f0e:	f7ff fc61 	bl	80067d4 <HAL_RCC_GetPCLK1Freq>
 8006f12:	0003      	movs	r3, r0
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006f16:	e018      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	2380      	movs	r3, #128	; 0x80
 8006f1c:	029b      	lsls	r3, r3, #10
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d107      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006f22:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2204      	movs	r2, #4
 8006f28:	4013      	ands	r3, r2
 8006f2a:	d002      	beq.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        frequency = HSI_VALUE;
 8006f2c:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>)
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006f30:	e00b      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	2380      	movs	r3, #128	; 0x80
 8006f36:	025b      	lsls	r3, r3, #9
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d104      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 8006f3c:	f7ff fbc2 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8006f40:	0003      	movs	r3, r0
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006f44:	e001      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006f4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return(frequency);
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f4e:	0018      	movs	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b00a      	add	sp, #40	; 0x28
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	46c0      	nop			; (mov r8, r8)
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	00f42400 	.word	0x00f42400

08006f60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e074      	b.n	800705c <HAL_RTC_Init+0xfc>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
  
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2221      	movs	r2, #33	; 0x21
 8006f76:	5c9b      	ldrb	r3, [r3, r2]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d107      	bne.n	8006f8e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	2100      	movs	r1, #0
 8006f84:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f003 fddf 	bl	800ab4c <HAL_RTC_MspInit>
  }

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2221      	movs	r2, #33	; 0x21
 8006f92:	2102      	movs	r1, #2
 8006f94:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	22ca      	movs	r2, #202	; 0xca
 8006f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2253      	movs	r2, #83	; 0x53
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f000 fdea 	bl	8007b82 <RTC_EnterInitMode>
 8006fae:	1e03      	subs	r3, r0, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	22ff      	movs	r2, #255	; 0xff
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2221      	movs	r2, #33	; 0x21
 8006fbe:	2104      	movs	r1, #4
 8006fc0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e04a      	b.n	800705c <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	6892      	ldr	r2, [r2, #8]
 8006fd0:	4924      	ldr	r1, [pc, #144]	; (8007064 <HAL_RTC_Init+0x104>)
 8006fd2:	400a      	ands	r2, r1
 8006fd4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6812      	ldr	r2, [r2, #0]
 8006fde:	6891      	ldr	r1, [r2, #8]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6850      	ldr	r0, [r2, #4]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6912      	ldr	r2, [r2, #16]
 8006fe8:	4310      	orrs	r0, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6992      	ldr	r2, [r2, #24]
 8006fee:	4302      	orrs	r2, r0
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68d2      	ldr	r2, [r2, #12]
 8006ffc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	6911      	ldr	r1, [r2, #16]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6892      	ldr	r2, [r2, #8]
 800700c:	0412      	lsls	r2, r2, #16
 800700e:	430a      	orrs	r2, r1
 8007010:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	68d2      	ldr	r2, [r2, #12]
 800701c:	2180      	movs	r1, #128	; 0x80
 800701e:	438a      	bics	r2, r1
 8007020:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800702c:	2103      	movs	r1, #3
 800702e:	438a      	bics	r2, r1
 8007030:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	69d0      	ldr	r0, [r2, #28]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6952      	ldr	r2, [r2, #20]
 8007044:	4302      	orrs	r2, r0
 8007046:	430a      	orrs	r2, r1
 8007048:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	22ff      	movs	r2, #255	; 0xff
 8007050:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2221      	movs	r2, #33	; 0x21
 8007056:	2101      	movs	r1, #1
 8007058:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800705a:	2300      	movs	r3, #0
  }
}
 800705c:	0018      	movs	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	b002      	add	sp, #8
 8007062:	bd80      	pop	{r7, pc}
 8007064:	ff8fffbf 	.word	0xff8fffbf

08007068 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007068:	b590      	push	{r4, r7, lr}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2220      	movs	r2, #32
 800707c:	5c9b      	ldrb	r3, [r3, r2]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_RTC_SetTime+0x1e>
 8007082:	2302      	movs	r3, #2
 8007084:	e0b5      	b.n	80071f2 <HAL_RTC_SetTime+0x18a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	2101      	movs	r1, #1
 800708c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2221      	movs	r2, #33	; 0x21
 8007092:	2102      	movs	r1, #2
 8007094:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d125      	bne.n	80070e8 <HAL_RTC_SetTime+0x80>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2240      	movs	r2, #64	; 0x40
 80070a4:	4013      	ands	r3, r2
 80070a6:	d102      	bne.n	80070ae <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2200      	movs	r2, #0
 80070ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	0018      	movs	r0, r3
 80070b4:	f000 fd91 	bl	8007bda <RTC_ByteToBcd2>
 80070b8:	0003      	movs	r3, r0
 80070ba:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f000 fd8a 	bl	8007bda <RTC_ByteToBcd2>
 80070c6:	0003      	movs	r3, r0
 80070c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80070ca:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	789b      	ldrb	r3, [r3, #2]
 80070d0:	0018      	movs	r0, r3
 80070d2:	f000 fd82 	bl	8007bda <RTC_ByteToBcd2>
 80070d6:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80070d8:	0022      	movs	r2, r4
 80070da:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e01f      	b.n	8007128 <HAL_RTC_SetTime+0xc0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2240      	movs	r2, #64	; 0x40
 80070f0:	4013      	ands	r3, r2
 80070f2:	d007      	beq.n	8007104 <HAL_RTC_SetTime+0x9c>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	0018      	movs	r0, r3
 80070fa:	f000 fd8f 	bl	8007c1c <RTC_Bcd2ToByte>
 80070fe:	0003      	movs	r3, r0
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	e002      	b.n	800710a <HAL_RTC_SetTime+0xa2>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2200      	movs	r2, #0
 8007108:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007116:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800711c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	78db      	ldrb	r3, [r3, #3]
 8007122:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	22ca      	movs	r2, #202	; 0xca
 800712e:	625a      	str	r2, [r3, #36]	; 0x24
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2253      	movs	r2, #83	; 0x53
 8007136:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	0018      	movs	r0, r3
 800713c:	f000 fd21 	bl	8007b82 <RTC_EnterInitMode>
 8007140:	1e03      	subs	r3, r0, #0
 8007142:	d00d      	beq.n	8007160 <HAL_RTC_SetTime+0xf8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	22ff      	movs	r2, #255	; 0xff
 800714a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2221      	movs	r2, #33	; 0x21
 8007150:	2104      	movs	r1, #4
 8007152:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	2100      	movs	r1, #0
 800715a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e048      	b.n	80071f2 <HAL_RTC_SetTime+0x18a>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4925      	ldr	r1, [pc, #148]	; (80071fc <HAL_RTC_SetTime+0x194>)
 8007168:	400a      	ands	r2, r1
 800716a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	6892      	ldr	r2, [r2, #8]
 8007176:	4922      	ldr	r1, [pc, #136]	; (8007200 <HAL_RTC_SetTime+0x198>)
 8007178:	400a      	ands	r2, r1
 800717a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	6891      	ldr	r1, [r2, #8]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	68d0      	ldr	r0, [r2, #12]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	6912      	ldr	r2, [r2, #16]
 800718e:	4302      	orrs	r2, r0
 8007190:	430a      	orrs	r2, r1
 8007192:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	6812      	ldr	r2, [r2, #0]
 800719c:	68d2      	ldr	r2, [r2, #12]
 800719e:	2180      	movs	r1, #128	; 0x80
 80071a0:	438a      	bics	r2, r1
 80071a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2220      	movs	r2, #32
 80071ac:	4013      	ands	r3, r2
 80071ae:	d113      	bne.n	80071d8 <HAL_RTC_SetTime+0x170>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	0018      	movs	r0, r3
 80071b4:	f000 fcbc 	bl	8007b30 <HAL_RTC_WaitForSynchro>
 80071b8:	1e03      	subs	r3, r0, #0
 80071ba:	d00d      	beq.n	80071d8 <HAL_RTC_SetTime+0x170>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	22ff      	movs	r2, #255	; 0xff
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2221      	movs	r2, #33	; 0x21
 80071c8:	2104      	movs	r1, #4
 80071ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	2100      	movs	r1, #0
 80071d2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e00c      	b.n	80071f2 <HAL_RTC_SetTime+0x18a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	22ff      	movs	r2, #255	; 0xff
 80071de:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2221      	movs	r2, #33	; 0x21
 80071e4:	2101      	movs	r1, #1
 80071e6:	5499      	strb	r1, [r3, r2]

   __HAL_UNLOCK(hrtc); 
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	2100      	movs	r1, #0
 80071ee:	5499      	strb	r1, [r3, r2]

   return HAL_OK;
 80071f0:	2300      	movs	r3, #0
  }
}
 80071f2:	0018      	movs	r0, r3
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b007      	add	sp, #28
 80071f8:	bd90      	pop	{r4, r7, pc}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	007f7f7f 	.word	0x007f7f7f
 8007200:	fffbffff 	.word	0xfffbffff

08007204 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	045b      	lsls	r3, r3, #17
 8007226:	0c5a      	lsrs	r2, r3, #17
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a22      	ldr	r2, [pc, #136]	; (80072bc <HAL_RTC_GetTime+0xb8>)
 8007234:	4013      	ands	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	b2db      	uxtb	r3, r3
 800723e:	223f      	movs	r2, #63	; 0x3f
 8007240:	4013      	ands	r3, r2
 8007242:	b2da      	uxtb	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	0a1b      	lsrs	r3, r3, #8
 800724c:	b2db      	uxtb	r3, r3
 800724e:	227f      	movs	r2, #127	; 0x7f
 8007250:	4013      	ands	r3, r2
 8007252:	b2da      	uxtb	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	227f      	movs	r2, #127	; 0x7f
 800725e:	4013      	ands	r3, r2
 8007260:	b2da      	uxtb	r2, r3
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	0c1b      	lsrs	r3, r3, #16
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2240      	movs	r2, #64	; 0x40
 800726e:	4013      	ands	r3, r2
 8007270:	b2da      	uxtb	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d11a      	bne.n	80072b2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	0018      	movs	r0, r3
 8007282:	f000 fccb 	bl	8007c1c <RTC_Bcd2ToByte>
 8007286:	0003      	movs	r3, r0
 8007288:	001a      	movs	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	0018      	movs	r0, r3
 8007294:	f000 fcc2 	bl	8007c1c <RTC_Bcd2ToByte>
 8007298:	0003      	movs	r3, r0
 800729a:	001a      	movs	r2, r3
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	789b      	ldrb	r3, [r3, #2]
 80072a4:	0018      	movs	r0, r3
 80072a6:	f000 fcb9 	bl	8007c1c <RTC_Bcd2ToByte>
 80072aa:	0003      	movs	r3, r0
 80072ac:	001a      	movs	r2, r3
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	0018      	movs	r0, r3
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b006      	add	sp, #24
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	007f7f7f 	.word	0x007f7f7f

080072c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80072c0:	b590      	push	{r4, r7, lr}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2220      	movs	r2, #32
 80072d4:	5c9b      	ldrb	r3, [r3, r2]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_RTC_SetDate+0x1e>
 80072da:	2302      	movs	r3, #2
 80072dc:	e0a7      	b.n	800742e <HAL_RTC_SetDate+0x16e>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	2101      	movs	r1, #1
 80072e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2221      	movs	r2, #33	; 0x21
 80072ea:	2102      	movs	r1, #2
 80072ec:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10e      	bne.n	8007312 <HAL_RTC_SetDate+0x52>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	785b      	ldrb	r3, [r3, #1]
 80072f8:	001a      	movs	r2, r3
 80072fa:	2310      	movs	r3, #16
 80072fc:	4013      	ands	r3, r2
 80072fe:	d008      	beq.n	8007312 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	785b      	ldrb	r3, [r3, #1]
 8007304:	2210      	movs	r2, #16
 8007306:	4393      	bics	r3, r2
 8007308:	b2db      	uxtb	r3, r3
 800730a:	330a      	adds	r3, #10
 800730c:	b2da      	uxtb	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d11c      	bne.n	8007352 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	78db      	ldrb	r3, [r3, #3]
 800731c:	0018      	movs	r0, r3
 800731e:	f000 fc5c 	bl	8007bda <RTC_ByteToBcd2>
 8007322:	0003      	movs	r3, r0
 8007324:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	785b      	ldrb	r3, [r3, #1]
 800732a:	0018      	movs	r0, r3
 800732c:	f000 fc55 	bl	8007bda <RTC_ByteToBcd2>
 8007330:	0003      	movs	r3, r0
 8007332:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007334:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	789b      	ldrb	r3, [r3, #2]
 800733a:	0018      	movs	r0, r3
 800733c:	f000 fc4d 	bl	8007bda <RTC_ByteToBcd2>
 8007340:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007342:	0022      	movs	r2, r4
 8007344:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	e01c      	b.n	800738c <HAL_RTC_SetDate+0xcc>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	0018      	movs	r0, r3
 8007358:	f000 fc60 	bl	8007c1c <RTC_Bcd2ToByte>
 800735c:	0003      	movs	r3, r0
 800735e:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	789b      	ldrb	r3, [r3, #2]
 8007364:	0018      	movs	r0, r3
 8007366:	f000 fc59 	bl	8007c1c <RTC_Bcd2ToByte>
 800736a:	0003      	movs	r3, r0
 800736c:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	78db      	ldrb	r3, [r3, #3]
 8007372:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800737a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007380:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	22ca      	movs	r2, #202	; 0xca
 8007392:	625a      	str	r2, [r3, #36]	; 0x24
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2253      	movs	r2, #83	; 0x53
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	0018      	movs	r0, r3
 80073a0:	f000 fbef 	bl	8007b82 <RTC_EnterInitMode>
 80073a4:	1e03      	subs	r3, r0, #0
 80073a6:	d00d      	beq.n	80073c4 <HAL_RTC_SetDate+0x104>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	22ff      	movs	r2, #255	; 0xff
 80073ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2221      	movs	r2, #33	; 0x21
 80073b4:	2104      	movs	r1, #4
 80073b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2220      	movs	r2, #32
 80073bc:	2100      	movs	r1, #0
 80073be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e034      	b.n	800742e <HAL_RTC_SetDate+0x16e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	491b      	ldr	r1, [pc, #108]	; (8007438 <HAL_RTC_SetDate+0x178>)
 80073cc:	400a      	ands	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	68d2      	ldr	r2, [r2, #12]
 80073da:	2180      	movs	r1, #128	; 0x80
 80073dc:	438a      	bics	r2, r1
 80073de:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2220      	movs	r2, #32
 80073e8:	4013      	ands	r3, r2
 80073ea:	d113      	bne.n	8007414 <HAL_RTC_SetDate+0x154>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 fb9e 	bl	8007b30 <HAL_RTC_WaitForSynchro>
 80073f4:	1e03      	subs	r3, r0, #0
 80073f6:	d00d      	beq.n	8007414 <HAL_RTC_SetDate+0x154>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	22ff      	movs	r2, #255	; 0xff
 80073fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2221      	movs	r2, #33	; 0x21
 8007404:	2104      	movs	r1, #4
 8007406:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	2100      	movs	r1, #0
 800740e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e00c      	b.n	800742e <HAL_RTC_SetDate+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	22ff      	movs	r2, #255	; 0xff
 800741a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2221      	movs	r2, #33	; 0x21
 8007420:	2101      	movs	r1, #1
 8007422:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	2100      	movs	r1, #0
 800742a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800742c:	2300      	movs	r3, #0
  }
}
 800742e:	0018      	movs	r0, r3
 8007430:	46bd      	mov	sp, r7
 8007432:	b007      	add	sp, #28
 8007434:	bd90      	pop	{r4, r7, pc}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	00ffff3f 	.word	0x00ffff3f

0800743c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	4a21      	ldr	r2, [pc, #132]	; (80074d8 <HAL_RTC_GetDate+0x9c>)
 8007454:	4013      	ands	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	0c1b      	lsrs	r3, r3, #16
 800745c:	b2da      	uxtb	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	0a1b      	lsrs	r3, r3, #8
 8007466:	b2db      	uxtb	r3, r3
 8007468:	221f      	movs	r2, #31
 800746a:	4013      	ands	r3, r2
 800746c:	b2da      	uxtb	r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	223f      	movs	r2, #63	; 0x3f
 8007478:	4013      	ands	r3, r2
 800747a:	b2da      	uxtb	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	0b5b      	lsrs	r3, r3, #13
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2207      	movs	r2, #7
 8007488:	4013      	ands	r3, r2
 800748a:	b2da      	uxtb	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d11a      	bne.n	80074cc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	78db      	ldrb	r3, [r3, #3]
 800749a:	0018      	movs	r0, r3
 800749c:	f000 fbbe 	bl	8007c1c <RTC_Bcd2ToByte>
 80074a0:	0003      	movs	r3, r0
 80074a2:	001a      	movs	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	0018      	movs	r0, r3
 80074ae:	f000 fbb5 	bl	8007c1c <RTC_Bcd2ToByte>
 80074b2:	0003      	movs	r3, r0
 80074b4:	001a      	movs	r2, r3
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	789b      	ldrb	r3, [r3, #2]
 80074be:	0018      	movs	r0, r3
 80074c0:	f000 fbac 	bl	8007c1c <RTC_Bcd2ToByte>
 80074c4:	0003      	movs	r3, r0
 80074c6:	001a      	movs	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	0018      	movs	r0, r3
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b006      	add	sp, #24
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	00ffff3f 	.word	0x00ffff3f

080074dc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b089      	sub	sp, #36	; 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	5c9b      	ldrb	r3, [r3, r2]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_RTC_SetAlarm_IT+0x26>
 80074fe:	2302      	movs	r3, #2
 8007500:	e14d      	b.n	800779e <HAL_RTC_SetAlarm_IT+0x2c2>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2220      	movs	r2, #32
 8007506:	2101      	movs	r1, #1
 8007508:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2221      	movs	r2, #33	; 0x21
 800750e:	2102      	movs	r1, #2
 8007510:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d136      	bne.n	8007586 <HAL_RTC_SetAlarm_IT+0xaa>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2240      	movs	r2, #64	; 0x40
 8007520:	4013      	ands	r3, r2
 8007522:	d102      	bne.n	800752a <HAL_RTC_SetAlarm_IT+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2200      	movs	r2, #0
 8007528:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	0018      	movs	r0, r3
 8007530:	f000 fb53 	bl	8007bda <RTC_ByteToBcd2>
 8007534:	0003      	movs	r3, r0
 8007536:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	0018      	movs	r0, r3
 800753e:	f000 fb4c 	bl	8007bda <RTC_ByteToBcd2>
 8007542:	0003      	movs	r3, r0
 8007544:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007546:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	789b      	ldrb	r3, [r3, #2]
 800754c:	0018      	movs	r0, r3
 800754e:	f000 fb44 	bl	8007bda <RTC_ByteToBcd2>
 8007552:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007554:	0022      	movs	r2, r4
 8007556:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	78db      	ldrb	r3, [r3, #3]
 800755c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800755e:	431a      	orrs	r2, r3
 8007560:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2220      	movs	r2, #32
 8007566:	5c9b      	ldrb	r3, [r3, r2]
 8007568:	0018      	movs	r0, r3
 800756a:	f000 fb36 	bl	8007bda <RTC_ByteToBcd2>
 800756e:	0003      	movs	r3, r0
 8007570:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007572:	0022      	movs	r2, r4
 8007574:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800757a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007580:	4313      	orrs	r3, r2
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	e03f      	b.n	8007606 <HAL_RTC_SetAlarm_IT+0x12a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2240      	movs	r2, #64	; 0x40
 800758e:	4013      	ands	r3, r2
 8007590:	d007      	beq.n	80075a2 <HAL_RTC_SetAlarm_IT+0xc6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	0018      	movs	r0, r3
 8007598:	f000 fb40 	bl	8007c1c <RTC_Bcd2ToByte>
 800759c:	0003      	movs	r3, r0
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e002      	b.n	80075a8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2200      	movs	r2, #0
 80075a6:	70da      	strb	r2, [r3, #3]
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d108      	bne.n	80075c2 <HAL_RTC_SetAlarm_IT+0xe6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2220      	movs	r2, #32
 80075b4:	5c9b      	ldrb	r3, [r3, r2]
 80075b6:	0018      	movs	r0, r3
 80075b8:	f000 fb30 	bl	8007c1c <RTC_Bcd2ToByte>
 80075bc:	0003      	movs	r3, r0
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	e007      	b.n	80075d2 <HAL_RTC_SetAlarm_IT+0xf6>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2220      	movs	r2, #32
 80075c6:	5c9b      	ldrb	r3, [r3, r2]
 80075c8:	0018      	movs	r0, r3
 80075ca:	f000 fb27 	bl	8007c1c <RTC_Bcd2ToByte>
 80075ce:	0003      	movs	r3, r0
 80075d0:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	785b      	ldrb	r3, [r3, #1]
 80075dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80075de:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80075e4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	78db      	ldrb	r3, [r3, #3]
 80075ea:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80075ec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2120      	movs	r1, #32
 80075f2:	5c5b      	ldrb	r3, [r3, r1]
 80075f4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80075f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80075fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007602:	4313      	orrs	r3, r2
 8007604:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	22ca      	movs	r2, #202	; 0xca
 8007618:	625a      	str	r2, [r3, #36]	; 0x24
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2253      	movs	r2, #83	; 0x53
 8007620:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007626:	2380      	movs	r3, #128	; 0x80
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	429a      	cmp	r2, r3
 800762c:	d14e      	bne.n	80076cc <HAL_RTC_SetAlarm_IT+0x1f0>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	6892      	ldr	r2, [r2, #8]
 8007638:	495b      	ldr	r1, [pc, #364]	; (80077a8 <HAL_RTC_SetAlarm_IT+0x2cc>)
 800763a:	400a      	ands	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
    
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	68d2      	ldr	r2, [r2, #12]
 8007648:	21ff      	movs	r1, #255	; 0xff
 800764a:	400a      	ands	r2, r1
 800764c:	4957      	ldr	r1, [pc, #348]	; (80077ac <HAL_RTC_SetAlarm_IT+0x2d0>)
 800764e:	430a      	orrs	r2, r1
 8007650:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007652:	f7fd fe59 	bl	8005308 <HAL_GetTick>
 8007656:	0003      	movs	r3, r0
 8007658:	61bb      	str	r3, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800765a:	e016      	b.n	800768a <HAL_RTC_SetAlarm_IT+0x1ae>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800765c:	f7fd fe54 	bl	8005308 <HAL_GetTick>
 8007660:	0002      	movs	r2, r0
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	1ad2      	subs	r2, r2, r3
 8007666:	23fa      	movs	r3, #250	; 0xfa
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	429a      	cmp	r2, r3
 800766c:	d90d      	bls.n	800768a <HAL_RTC_SetAlarm_IT+0x1ae>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	22ff      	movs	r2, #255	; 0xff
 8007674:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2221      	movs	r2, #33	; 0x21
 800767a:	2103      	movs	r1, #3
 800767c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2220      	movs	r2, #32
 8007682:	2100      	movs	r1, #0
 8007684:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e089      	b.n	800779e <HAL_RTC_SetAlarm_IT+0x2c2>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	4013      	ands	r3, r2
 8007694:	d0e2      	beq.n	800765c <HAL_RTC_SetAlarm_IT+0x180>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	6892      	ldr	r2, [r2, #8]
 80076b0:	2180      	movs	r1, #128	; 0x80
 80076b2:	0049      	lsls	r1, r1, #1
 80076b4:	430a      	orrs	r2, r1
 80076b6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	6812      	ldr	r2, [r2, #0]
 80076c0:	6892      	ldr	r2, [r2, #8]
 80076c2:	2180      	movs	r1, #128	; 0x80
 80076c4:	0149      	lsls	r1, r1, #5
 80076c6:	430a      	orrs	r2, r1
 80076c8:	609a      	str	r2, [r3, #8]
 80076ca:	e04d      	b.n	8007768 <HAL_RTC_SetAlarm_IT+0x28c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	6892      	ldr	r2, [r2, #8]
 80076d6:	4936      	ldr	r1, [pc, #216]	; (80077b0 <HAL_RTC_SetAlarm_IT+0x2d4>)
 80076d8:	400a      	ands	r2, r1
 80076da:	609a      	str	r2, [r3, #8]
    
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	6812      	ldr	r2, [r2, #0]
 80076e4:	68d2      	ldr	r2, [r2, #12]
 80076e6:	21ff      	movs	r1, #255	; 0xff
 80076e8:	400a      	ands	r2, r1
 80076ea:	4932      	ldr	r1, [pc, #200]	; (80077b4 <HAL_RTC_SetAlarm_IT+0x2d8>)
 80076ec:	430a      	orrs	r2, r1
 80076ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80076f0:	f7fd fe0a 	bl	8005308 <HAL_GetTick>
 80076f4:	0003      	movs	r3, r0
 80076f6:	61bb      	str	r3, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80076f8:	e016      	b.n	8007728 <HAL_RTC_SetAlarm_IT+0x24c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80076fa:	f7fd fe05 	bl	8005308 <HAL_GetTick>
 80076fe:	0002      	movs	r2, r0
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	1ad2      	subs	r2, r2, r3
 8007704:	23fa      	movs	r3, #250	; 0xfa
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	429a      	cmp	r2, r3
 800770a:	d90d      	bls.n	8007728 <HAL_RTC_SetAlarm_IT+0x24c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	22ff      	movs	r2, #255	; 0xff
 8007712:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2221      	movs	r2, #33	; 0x21
 8007718:	2103      	movs	r1, #3
 800771a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2220      	movs	r2, #32
 8007720:	2100      	movs	r1, #0
 8007722:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e03a      	b.n	800779e <HAL_RTC_SetAlarm_IT+0x2c2>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2202      	movs	r2, #2
 8007730:	4013      	ands	r3, r2
 8007732:	d0e2      	beq.n	80076fa <HAL_RTC_SetAlarm_IT+0x21e>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	6892      	ldr	r2, [r2, #8]
 800774e:	2180      	movs	r1, #128	; 0x80
 8007750:	0089      	lsls	r1, r1, #2
 8007752:	430a      	orrs	r2, r1
 8007754:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	6892      	ldr	r2, [r2, #8]
 8007760:	2180      	movs	r1, #128	; 0x80
 8007762:	0189      	lsls	r1, r1, #6
 8007764:	430a      	orrs	r2, r1
 8007766:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007768:	4b13      	ldr	r3, [pc, #76]	; (80077b8 <HAL_RTC_SetAlarm_IT+0x2dc>)
 800776a:	4a13      	ldr	r2, [pc, #76]	; (80077b8 <HAL_RTC_SetAlarm_IT+0x2dc>)
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	2180      	movs	r1, #128	; 0x80
 8007770:	0289      	lsls	r1, r1, #10
 8007772:	430a      	orrs	r2, r1
 8007774:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007776:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <HAL_RTC_SetAlarm_IT+0x2dc>)
 8007778:	4a0f      	ldr	r2, [pc, #60]	; (80077b8 <HAL_RTC_SetAlarm_IT+0x2dc>)
 800777a:	6892      	ldr	r2, [r2, #8]
 800777c:	2180      	movs	r1, #128	; 0x80
 800777e:	0289      	lsls	r1, r1, #10
 8007780:	430a      	orrs	r2, r1
 8007782:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	22ff      	movs	r2, #255	; 0xff
 800778a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2221      	movs	r2, #33	; 0x21
 8007790:	2101      	movs	r1, #1
 8007792:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2220      	movs	r2, #32
 8007798:	2100      	movs	r1, #0
 800779a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	0018      	movs	r0, r3
 80077a0:	46bd      	mov	sp, r7
 80077a2:	b009      	add	sp, #36	; 0x24
 80077a4:	bd90      	pop	{r4, r7, pc}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	fffffeff 	.word	0xfffffeff
 80077ac:	fffffe7f 	.word	0xfffffe7f
 80077b0:	fffffdff 	.word	0xfffffdff
 80077b4:	fffffd7f 	.word	0xfffffd7f
 80077b8:	40010400 	.word	0x40010400

080077bc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	5c9b      	ldrb	r3, [r3, r2]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_RTC_DeactivateAlarm+0x1c>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e086      	b.n	80078e6 <HAL_RTC_DeactivateAlarm+0x12a>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	2101      	movs	r1, #1
 80077de:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2221      	movs	r2, #33	; 0x21
 80077e4:	2102      	movs	r1, #2
 80077e6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	22ca      	movs	r2, #202	; 0xca
 80077ee:	625a      	str	r2, [r3, #36]	; 0x24
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2253      	movs	r2, #83	; 0x53
 80077f6:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	2380      	movs	r3, #128	; 0x80
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	429a      	cmp	r2, r3
 8007800:	d132      	bne.n	8007868 <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	6892      	ldr	r2, [r2, #8]
 800780c:	4938      	ldr	r1, [pc, #224]	; (80078f0 <HAL_RTC_DeactivateAlarm+0x134>)
 800780e:	400a      	ands	r2, r1
 8007810:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	6892      	ldr	r2, [r2, #8]
 800781c:	4935      	ldr	r1, [pc, #212]	; (80078f4 <HAL_RTC_DeactivateAlarm+0x138>)
 800781e:	400a      	ands	r2, r1
 8007820:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8007822:	f7fd fd71 	bl	8005308 <HAL_GetTick>
 8007826:	0003      	movs	r3, r0
 8007828:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800782a:	e016      	b.n	800785a <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800782c:	f7fd fd6c 	bl	8005308 <HAL_GetTick>
 8007830:	0002      	movs	r2, r0
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1ad2      	subs	r2, r2, r3
 8007836:	23fa      	movs	r3, #250	; 0xfa
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	429a      	cmp	r2, r3
 800783c:	d90d      	bls.n	800785a <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	22ff      	movs	r2, #255	; 0xff
 8007844:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2221      	movs	r2, #33	; 0x21
 800784a:	2103      	movs	r1, #3
 800784c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2220      	movs	r2, #32
 8007852:	2100      	movs	r1, #0
 8007854:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e045      	b.n	80078e6 <HAL_RTC_DeactivateAlarm+0x12a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	4013      	ands	r3, r2
 8007864:	d0e2      	beq.n	800782c <HAL_RTC_DeactivateAlarm+0x70>
 8007866:	e031      	b.n	80078cc <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6812      	ldr	r2, [r2, #0]
 8007870:	6892      	ldr	r2, [r2, #8]
 8007872:	4921      	ldr	r1, [pc, #132]	; (80078f8 <HAL_RTC_DeactivateAlarm+0x13c>)
 8007874:	400a      	ands	r2, r1
 8007876:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	6892      	ldr	r2, [r2, #8]
 8007882:	491e      	ldr	r1, [pc, #120]	; (80078fc <HAL_RTC_DeactivateAlarm+0x140>)
 8007884:	400a      	ands	r2, r1
 8007886:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8007888:	f7fd fd3e 	bl	8005308 <HAL_GetTick>
 800788c:	0003      	movs	r3, r0
 800788e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007890:	e016      	b.n	80078c0 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007892:	f7fd fd39 	bl	8005308 <HAL_GetTick>
 8007896:	0002      	movs	r2, r0
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	1ad2      	subs	r2, r2, r3
 800789c:	23fa      	movs	r3, #250	; 0xfa
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d90d      	bls.n	80078c0 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	22ff      	movs	r2, #255	; 0xff
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2221      	movs	r2, #33	; 0x21
 80078b0:	2103      	movs	r1, #3
 80078b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	2100      	movs	r1, #0
 80078ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e012      	b.n	80078e6 <HAL_RTC_DeactivateAlarm+0x12a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	2202      	movs	r2, #2
 80078c8:	4013      	ands	r3, r2
 80078ca:	d0e2      	beq.n	8007892 <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	22ff      	movs	r2, #255	; 0xff
 80078d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2221      	movs	r2, #33	; 0x21
 80078d8:	2101      	movs	r1, #1
 80078da:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	2100      	movs	r1, #0
 80078e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK; 
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	0018      	movs	r0, r3
 80078e8:	46bd      	mov	sp, r7
 80078ea:	b004      	add	sp, #16
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	46c0      	nop			; (mov r8, r8)
 80078f0:	fffffeff 	.word	0xfffffeff
 80078f4:	ffffefff 	.word	0xffffefff
 80078f8:	fffffdff 	.word	0xfffffdff
 80078fc:	ffffdfff 	.word	0xffffdfff

08007900 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	2300      	movs	r3, #0
 8007914:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	2380      	movs	r3, #128	; 0x80
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	429a      	cmp	r2, r3
 800791e:	d144      	bne.n	80079aa <HAL_RTC_GetAlarm+0xaa>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2280      	movs	r2, #128	; 0x80
 8007924:	0052      	lsls	r2, r2, #1
 8007926:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007936:	045b      	lsls	r3, r3, #17
 8007938:	0c5b      	lsrs	r3, r3, #17
 800793a:	613b      	str	r3, [r7, #16]

/* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	0c1b      	lsrs	r3, r3, #16
 8007940:	b2db      	uxtb	r3, r3
 8007942:	223f      	movs	r2, #63	; 0x3f
 8007944:	4013      	ands	r3, r2
 8007946:	b2da      	uxtb	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	b2db      	uxtb	r3, r3
 8007952:	227f      	movs	r2, #127	; 0x7f
 8007954:	4013      	ands	r3, r2
 8007956:	b2da      	uxtb	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	227f      	movs	r2, #127	; 0x7f
 8007962:	4013      	ands	r3, r2
 8007964:	b2da      	uxtb	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	0c1b      	lsrs	r3, r3, #16
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2240      	movs	r2, #64	; 0x40
 8007972:	4013      	ands	r3, r2
 8007974:	b2da      	uxtb	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	0e1b      	lsrs	r3, r3, #24
 8007984:	b2db      	uxtb	r3, r3
 8007986:	223f      	movs	r2, #63	; 0x3f
 8007988:	4013      	ands	r3, r2
 800798a:	b2d9      	uxtb	r1, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2220      	movs	r2, #32
 8007990:	5499      	strb	r1, [r3, r2]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	05db      	lsls	r3, r3, #23
 8007998:	401a      	ands	r2, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	4a3b      	ldr	r2, [pc, #236]	; (8007a90 <HAL_RTC_GetAlarm+0x190>)
 80079a2:	401a      	ands	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	615a      	str	r2, [r3, #20]
 80079a8:	e043      	b.n	8007a32 <HAL_RTC_GetAlarm+0x132>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2280      	movs	r2, #128	; 0x80
 80079ae:	0092      	lsls	r2, r2, #2
 80079b0:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c0:	045b      	lsls	r3, r3, #17
 80079c2:	0c5b      	lsrs	r3, r3, #17
 80079c4:	613b      	str	r3, [r7, #16]
 
  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> 16U);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	0c1b      	lsrs	r3, r3, #16
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	223f      	movs	r2, #63	; 0x3f
 80079ce:	4013      	ands	r3, r2
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> 8U);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	227f      	movs	r2, #127	; 0x7f
 80079de:	4013      	ands	r3, r2
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	227f      	movs	r2, #127	; 0x7f
 80079ec:	4013      	ands	r3, r2
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMBR_PM) >> 16U);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	0c1b      	lsrs	r3, r3, #16
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2240      	movs	r2, #64	; 0x40
 80079fc:	4013      	ands	r3, r2
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	0e1b      	lsrs	r3, r3, #24
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	223f      	movs	r2, #63	; 0x3f
 8007a12:	4013      	ands	r3, r2
 8007a14:	b2d9      	uxtb	r1, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	5499      	strb	r1, [r3, r2]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	2380      	movs	r3, #128	; 0x80
 8007a20:	05db      	lsls	r3, r3, #23
 8007a22:	401a      	ands	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4a19      	ldr	r2, [pc, #100]	; (8007a90 <HAL_RTC_GetAlarm+0x190>)
 8007a2c:	401a      	ands	r2, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	615a      	str	r2, [r3, #20]
 }
 
  if(Format == RTC_FORMAT_BIN)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d125      	bne.n	8007a84 <HAL_RTC_GetAlarm+0x184>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f000 f8ed 	bl	8007c1c <RTC_Bcd2ToByte>
 8007a42:	0003      	movs	r3, r0
 8007a44:	001a      	movs	r2, r3
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	785b      	ldrb	r3, [r3, #1]
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f000 f8e4 	bl	8007c1c <RTC_Bcd2ToByte>
 8007a54:	0003      	movs	r3, r0
 8007a56:	001a      	movs	r2, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	789b      	ldrb	r3, [r3, #2]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 f8db 	bl	8007c1c <RTC_Bcd2ToByte>
 8007a66:	0003      	movs	r3, r0
 8007a68:	001a      	movs	r2, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2220      	movs	r2, #32
 8007a72:	5c9b      	ldrb	r3, [r3, r2]
 8007a74:	0018      	movs	r0, r3
 8007a76:	f000 f8d1 	bl	8007c1c <RTC_Bcd2ToByte>
 8007a7a:	0003      	movs	r3, r0
 8007a7c:	0019      	movs	r1, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2220      	movs	r2, #32
 8007a82:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	0018      	movs	r0, r3
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	b006      	add	sp, #24
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	80808080 	.word	0x80808080

08007a94 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	2380      	movs	r3, #128	; 0x80
 8007aa4:	015b      	lsls	r3, r3, #5
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	d014      	beq.n	8007ad4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	2380      	movs	r3, #128	; 0x80
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	d00d      	beq.n	8007ad4 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	0018      	movs	r0, r3
 8007abc:	f003 f888 	bl	800abd0 <HAL_RTC_AlarmAEventCallback>

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	68d2      	ldr	r2, [r2, #12]
 8007aca:	21ff      	movs	r1, #255	; 0xff
 8007acc:	400a      	ands	r2, r1
 8007ace:	4915      	ldr	r1, [pc, #84]	; (8007b24 <HAL_RTC_AlarmIRQHandler+0x90>)
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	2380      	movs	r3, #128	; 0x80
 8007adc:	019b      	lsls	r3, r3, #6
 8007ade:	4013      	ands	r3, r2
 8007ae0:	d014      	beq.n	8007b0c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	2380      	movs	r3, #128	; 0x80
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4013      	ands	r3, r2
 8007aee:	d00d      	beq.n	8007b0c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	0018      	movs	r0, r3
 8007af4:	f000 f8e5 	bl	8007cc2 <HAL_RTCEx_AlarmBEventCallback>

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6812      	ldr	r2, [r2, #0]
 8007b00:	68d2      	ldr	r2, [r2, #12]
 8007b02:	21ff      	movs	r1, #255	; 0xff
 8007b04:	400a      	ands	r2, r1
 8007b06:	4908      	ldr	r1, [pc, #32]	; (8007b28 <HAL_RTC_AlarmIRQHandler+0x94>)
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007b0c:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <HAL_RTC_AlarmIRQHandler+0x98>)
 8007b0e:	2280      	movs	r2, #128	; 0x80
 8007b10:	0292      	lsls	r2, r2, #10
 8007b12:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2221      	movs	r2, #33	; 0x21
 8007b18:	2101      	movs	r1, #1
 8007b1a:	5499      	strb	r1, [r3, r2]
}
 8007b1c:	46c0      	nop			; (mov r8, r8)
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b002      	add	sp, #8
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	fffffe7f 	.word	0xfffffe7f
 8007b28:	fffffd7f 	.word	0xfffffd7f
 8007b2c:	40010400 	.word	0x40010400

08007b30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6812      	ldr	r2, [r2, #0]
 8007b44:	68d2      	ldr	r2, [r2, #12]
 8007b46:	21a0      	movs	r1, #160	; 0xa0
 8007b48:	438a      	bics	r2, r1
 8007b4a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007b4c:	f7fd fbdc 	bl	8005308 <HAL_GetTick>
 8007b50:	0003      	movs	r3, r0
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b54:	e00a      	b.n	8007b6c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b56:	f7fd fbd7 	bl	8005308 <HAL_GetTick>
 8007b5a:	0002      	movs	r2, r0
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	23fa      	movs	r3, #250	; 0xfa
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d901      	bls.n	8007b6c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e006      	b.n	8007b7a <HAL_RTC_WaitForSynchro+0x4a>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	2220      	movs	r2, #32
 8007b74:	4013      	ands	r3, r2
 8007b76:	d0ee      	beq.n	8007b56 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b004      	add	sp, #16
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	2240      	movs	r2, #64	; 0x40
 8007b96:	4013      	ands	r3, r2
 8007b98:	d11a      	bne.n	8007bd0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	4252      	negs	r2, r2
 8007ba2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ba4:	f7fd fbb0 	bl	8005308 <HAL_GetTick>
 8007ba8:	0003      	movs	r3, r0
 8007baa:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007bac:	e00a      	b.n	8007bc4 <RTC_EnterInitMode+0x42>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007bae:	f7fd fbab 	bl	8005308 <HAL_GetTick>
 8007bb2:	0002      	movs	r2, r0
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	23fa      	movs	r3, #250	; 0xfa
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d901      	bls.n	8007bc4 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e006      	b.n	8007bd2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2240      	movs	r2, #64	; 0x40
 8007bcc:	4013      	ands	r3, r2
 8007bce:	d0ee      	beq.n	8007bae <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	b004      	add	sp, #16
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	0002      	movs	r2, r0
 8007be2:	1dfb      	adds	r3, r7, #7
 8007be4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007bea:	e007      	b.n	8007bfc <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007bf2:	1dfb      	adds	r3, r7, #7
 8007bf4:	1dfa      	adds	r2, r7, #7
 8007bf6:	7812      	ldrb	r2, [r2, #0]
 8007bf8:	3a0a      	subs	r2, #10
 8007bfa:	701a      	strb	r2, [r3, #0]
  while(Value >= 10U)
 8007bfc:	1dfb      	adds	r3, r7, #7
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	d8f3      	bhi.n	8007bec <RTC_ByteToBcd2+0x12>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	1dfb      	adds	r3, r7, #7
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b2db      	uxtb	r3, r3
}
 8007c14:	0018      	movs	r0, r3
 8007c16:	46bd      	mov	sp, r7
 8007c18:	b004      	add	sp, #16
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	0002      	movs	r2, r0
 8007c24:	1dfb      	adds	r3, r7, #7
 8007c26:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007c2c:	1dfb      	adds	r3, r7, #7
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	091b      	lsrs	r3, r3, #4
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	001a      	movs	r2, r3
 8007c36:	0013      	movs	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	189b      	adds	r3, r3, r2
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007c40:	1dfb      	adds	r3, r7, #7
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	220f      	movs	r2, #15
 8007c46:	4013      	ands	r3, r2
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	18d3      	adds	r3, r2, r3
 8007c50:	b2db      	uxtb	r3, r3
}
 8007c52:	0018      	movs	r0, r3
 8007c54:	46bd      	mov	sp, r7
 8007c56:	b004      	add	sp, #16
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	5c9b      	ldrb	r3, [r3, r2]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e024      	b.n	8007cba <HAL_RTCEx_EnableBypassShadow+0x60>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	2101      	movs	r1, #1
 8007c76:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2221      	movs	r2, #33	; 0x21
 8007c7c:	2102      	movs	r1, #2
 8007c7e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	22ca      	movs	r2, #202	; 0xca
 8007c86:	625a      	str	r2, [r3, #36]	; 0x24
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2253      	movs	r2, #83	; 0x53
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	6892      	ldr	r2, [r2, #8]
 8007c9a:	2120      	movs	r1, #32
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	22ff      	movs	r2, #255	; 0xff
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2221      	movs	r2, #33	; 0x21
 8007cac:	2101      	movs	r1, #1
 8007cae:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	0018      	movs	r0, r3
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	b002      	add	sp, #8
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	b002      	add	sp, #8
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e059      	b.n	8007d9a <HAL_SPI_Init+0xc6>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2251      	movs	r2, #81	; 0x51
 8007cea:	5c9b      	ldrb	r3, [r3, r2]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d107      	bne.n	8007d02 <HAL_SPI_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2250      	movs	r2, #80	; 0x50
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f000 f87c 	bl	8007dfa <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2251      	movs	r2, #81	; 0x51
 8007d06:	2102      	movs	r1, #2
 8007d08:	5499      	strb	r1, [r3, r2]

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	2140      	movs	r1, #64	; 0x40
 8007d16:	438a      	bics	r2, r1
 8007d18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6851      	ldr	r1, [r2, #4]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6892      	ldr	r2, [r2, #8]
 8007d26:	4311      	orrs	r1, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	68d2      	ldr	r2, [r2, #12]
 8007d2c:	4311      	orrs	r1, r2
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6912      	ldr	r2, [r2, #16]
 8007d32:	4311      	orrs	r1, r2
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6952      	ldr	r2, [r2, #20]
 8007d38:	4311      	orrs	r1, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6990      	ldr	r0, [r2, #24]
 8007d3e:	2280      	movs	r2, #128	; 0x80
 8007d40:	0092      	lsls	r2, r2, #2
 8007d42:	4002      	ands	r2, r0
 8007d44:	4311      	orrs	r1, r2
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	69d2      	ldr	r2, [r2, #28]
 8007d4a:	4311      	orrs	r1, r2
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6a12      	ldr	r2, [r2, #32]
 8007d50:	4311      	orrs	r1, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007d56:	430a      	orrs	r2, r1
 8007d58:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6992      	ldr	r2, [r2, #24]
 8007d62:	0c12      	lsrs	r2, r2, #16
 8007d64:	2104      	movs	r1, #4
 8007d66:	4011      	ands	r1, r2
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d78:	611a      	str	r2, [r3, #16]
  
#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	69d2      	ldr	r2, [r2, #28]
 8007d84:	4907      	ldr	r1, [pc, #28]	; (8007da4 <HAL_SPI_Init+0xd0>)
 8007d86:	400a      	ands	r2, r1
 8007d88:	61da      	str	r2, [r3, #28]
#endif
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2251      	movs	r2, #81	; 0x51
 8007d94:	2101      	movs	r1, #1
 8007d96:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	b002      	add	sp, #8
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	fffff7ff 	.word	0xfffff7ff

08007da8 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e01b      	b.n	8007df2 <HAL_SPI_DeInit+0x4a>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2251      	movs	r2, #81	; 0x51
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	2140      	movs	r1, #64	; 0x40
 8007dce:	438a      	bics	r2, r1
 8007dd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f000 f818 	bl	8007e0a <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2251      	movs	r2, #81	; 0x51
 8007de4:	2100      	movs	r1, #0
 8007de6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2250      	movs	r2, #80	; 0x50
 8007dec:	2100      	movs	r1, #0
 8007dee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	0018      	movs	r0, r3
 8007df4:	46bd      	mov	sp, r7
 8007df6:	b002      	add	sp, #8
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
 {
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function Should not be modified, when the callback is needed,
             the HAL_SPI_MspInit could be implenetd in the user file
  */
}
 8007e02:	46c0      	nop			; (mov r8, r8)
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b002      	add	sp, #8
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit could be implenetd in the user file
   */
}
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	46bd      	mov	sp, r7
 8007e16:	b002      	add	sp, #8
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	001a      	movs	r2, r3
 8007e2a:	1cbb      	adds	r3, r7, #2
 8007e2c:	801a      	strh	r2, [r3, #0]
  __IO uint16_t tmpreg = 0U;
 8007e2e:	2316      	movs	r3, #22
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	801a      	strh	r2, [r3, #0]

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2251      	movs	r2, #81	; 0x51
 8007e3a:	5c9b      	ldrb	r3, [r3, r2]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d006      	beq.n	8007e50 <HAL_SPI_TransmitReceive+0x34>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2251      	movs	r2, #81	; 0x51
 8007e46:	5c9b      	ldrb	r3, [r3, r2]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b22      	cmp	r3, #34	; 0x22
 8007e4c:	d000      	beq.n	8007e50 <HAL_SPI_TransmitReceive+0x34>
 8007e4e:	e256      	b.n	80082fe <HAL_SPI_TransmitReceive+0x4e2>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d006      	beq.n	8007e64 <HAL_SPI_TransmitReceive+0x48>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_SPI_TransmitReceive+0x48>
 8007e5c:	1cbb      	adds	r3, r7, #2
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <HAL_SPI_TransmitReceive+0x4c>
    {
      return  HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e24b      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2250      	movs	r2, #80	; 0x50
 8007e6c:	5c9b      	ldrb	r3, [r3, r2]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_SPI_TransmitReceive+0x5a>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e244      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2250      	movs	r2, #80	; 0x50
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	5499      	strb	r1, [r3, r2]
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2251      	movs	r2, #81	; 0x51
 8007e82:	5c9b      	ldrb	r3, [r3, r2]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d103      	bne.n	8007e92 <HAL_SPI_TransmitReceive+0x76>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2251      	movs	r2, #81	; 0x51
 8007e8e:	2132      	movs	r1, #50	; 0x32
 8007e90:	5499      	strb	r1, [r3, r2]
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1cba      	adds	r2, r7, #2
 8007ea2:	8812      	ldrh	r2, [r2, #0]
 8007ea4:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	1cba      	adds	r2, r7, #2
 8007eaa:	8812      	ldrh	r2, [r2, #0]
 8007eac:	87da      	strh	r2, [r3, #62]	; 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	1cba      	adds	r2, r7, #2
 8007eb8:	8812      	ldrh	r2, [r2, #0]
 8007eba:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	1cba      	adds	r2, r7, #2
 8007ec0:	8812      	ldrh	r2, [r2, #0]
 8007ec2:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0U;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ed4:	2380      	movs	r3, #128	; 0x80
 8007ed6:	019b      	lsls	r3, r3, #6
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d110      	bne.n	8007efe <HAL_SPI_TransmitReceive+0xe2>
    {
      SPI_RESET_CRC(hspi);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	49ca      	ldr	r1, [pc, #808]	; (8008210 <HAL_SPI_TransmitReceive+0x3f4>)
 8007ee8:	400a      	ands	r2, r1
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	6812      	ldr	r2, [r2, #0]
 8007ef6:	2180      	movs	r1, #128	; 0x80
 8007ef8:	0189      	lsls	r1, r1, #6
 8007efa:	430a      	orrs	r2, r1
 8007efc:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2240      	movs	r2, #64	; 0x40
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b40      	cmp	r3, #64	; 0x40
 8007f0a:	d007      	beq.n	8007f1c <HAL_SPI_TransmitReceive+0x100>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	6812      	ldr	r2, [r2, #0]
 8007f16:	2140      	movs	r1, #64	; 0x40
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	2380      	movs	r3, #128	; 0x80
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d000      	beq.n	8007f2a <HAL_SPI_TransmitReceive+0x10e>
 8007f28:	e0c8      	b.n	80080bc <HAL_SPI_TransmitReceive+0x2a0>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <HAL_SPI_TransmitReceive+0x12c>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	2382      	movs	r3, #130	; 0x82
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d116      	bne.n	8007f6c <HAL_SPI_TransmitReceive+0x150>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d111      	bne.n	8007f6c <HAL_SPI_TransmitReceive+0x150>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f50:	8812      	ldrh	r2, [r2, #0]
 8007f52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f58:	1c9a      	adds	r2, r3, #2
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d000      	beq.n	8007f78 <HAL_SPI_TransmitReceive+0x15c>
 8007f76:	e079      	b.n	800806c <HAL_SPI_TransmitReceive+0x250>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f7c:	2380      	movs	r3, #128	; 0x80
 8007f7e:	019b      	lsls	r3, r3, #6
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d108      	bne.n	8007f96 <HAL_SPI_TransmitReceive+0x17a>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	6812      	ldr	r2, [r2, #0]
 8007f8e:	2180      	movs	r1, #128	; 0x80
 8007f90:	0149      	lsls	r1, r1, #5
 8007f92:	430a      	orrs	r2, r1
 8007f94:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	f000 fa77 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 8007fa2:	1e03      	subs	r3, r0, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_SPI_TransmitReceive+0x18e>
        { 
          return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e1aa      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr+=2U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	1c9a      	adds	r2, r3, #2
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fd0:	e131      	b.n	8008236 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2102      	movs	r1, #2
 8007fda:	f000 fa59 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 8007fde:	1e03      	subs	r3, r0, #0
 8007fe0:	d001      	beq.n	8007fe6 <HAL_SPI_TransmitReceive+0x1ca>
          { 
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e18c      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007fee:	8812      	ldrh	r2, [r2, #0]
 8007ff0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	1c9a      	adds	r2, r3, #2
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
          hspi->TxXferCount--;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10e      	bne.n	8008032 <HAL_SPI_TransmitReceive+0x216>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008018:	2380      	movs	r3, #128	; 0x80
 800801a:	019b      	lsls	r3, r3, #6
 800801c:	429a      	cmp	r2, r3
 800801e:	d108      	bne.n	8008032 <HAL_SPI_TransmitReceive+0x216>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	6812      	ldr	r2, [r2, #0]
 8008028:	6812      	ldr	r2, [r2, #0]
 800802a:	2180      	movs	r1, #128	; 0x80
 800802c:	0149      	lsls	r1, r1, #5
 800802e:	430a      	orrs	r2, r1
 8008030:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	2101      	movs	r1, #1
 800803a:	f000 fa29 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 800803e:	1e03      	subs	r3, r0, #0
 8008040:	d001      	beq.n	8008046 <HAL_SPI_TransmitReceive+0x22a>
          { 
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e15c      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	b29b      	uxth	r3, r3
 8008052:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	1c9a      	adds	r2, r3, #2
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1ad      	bne.n	8007fd2 <HAL_SPI_TransmitReceive+0x1b6>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d000      	beq.n	8008080 <HAL_SPI_TransmitReceive+0x264>
 800807e:	e0da      	b.n	8008236 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	2101      	movs	r1, #1
 8008088:	f000 fa02 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 800808c:	1e03      	subs	r3, r0, #0
 800808e:	d001      	beq.n	8008094 <HAL_SPI_TransmitReceive+0x278>
          {
            return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e135      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a6:	1c9a      	adds	r2, r3, #2
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080ba:	e0bc      	b.n	8008236 <HAL_SPI_TransmitReceive+0x41a>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <HAL_SPI_TransmitReceive+0x2be>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	2382      	movs	r3, #130	; 0x82
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d114      	bne.n	80080fa <HAL_SPI_TransmitReceive+0x2de>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d10f      	bne.n	80080fa <HAL_SPI_TransmitReceive+0x2de>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80080e2:	1c50      	adds	r0, r2, #1
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	6308      	str	r0, [r1, #48]	; 0x30
 80080e8:	7812      	ldrb	r2, [r2, #0]
 80080ea:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d000      	beq.n	8008106 <HAL_SPI_TransmitReceive+0x2ea>
 8008104:	e070      	b.n	80081e8 <HAL_SPI_TransmitReceive+0x3cc>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800810a:	2380      	movs	r3, #128	; 0x80
 800810c:	019b      	lsls	r3, r3, #6
 800810e:	429a      	cmp	r2, r3
 8008110:	d108      	bne.n	8008124 <HAL_SPI_TransmitReceive+0x308>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	6812      	ldr	r2, [r2, #0]
 800811c:	2180      	movs	r1, #128	; 0x80
 800811e:	0149      	lsls	r1, r1, #5
 8008120:	430a      	orrs	r2, r1
 8008122:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	2101      	movs	r1, #1
 800812c:	f000 f9b0 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d001      	beq.n	8008138 <HAL_SPI_TransmitReceive+0x31c>
        {
          return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e0e3      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008154:	e06f      	b.n	8008236 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	2102      	movs	r1, #2
 800815e:	f000 f997 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 8008162:	1e03      	subs	r3, r0, #0
 8008164:	d001      	beq.n	800816a <HAL_SPI_TransmitReceive+0x34e>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e0ca      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008172:	1c50      	adds	r0, r2, #1
 8008174:	68f9      	ldr	r1, [r7, #12]
 8008176:	6308      	str	r0, [r1, #48]	; 0x30
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008180:	b29b      	uxth	r3, r3
 8008182:	3b01      	subs	r3, #1
 8008184:	b29a      	uxth	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800818e:	b29b      	uxth	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10e      	bne.n	80081b2 <HAL_SPI_TransmitReceive+0x396>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008198:	2380      	movs	r3, #128	; 0x80
 800819a:	019b      	lsls	r3, r3, #6
 800819c:	429a      	cmp	r2, r3
 800819e:	d108      	bne.n	80081b2 <HAL_SPI_TransmitReceive+0x396>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	6812      	ldr	r2, [r2, #0]
 80081a8:	6812      	ldr	r2, [r2, #0]
 80081aa:	2180      	movs	r1, #128	; 0x80
 80081ac:	0149      	lsls	r1, r1, #5
 80081ae:	430a      	orrs	r2, r1
 80081b0:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	2101      	movs	r1, #1
 80081ba:	f000 f969 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 80081be:	1e03      	subs	r3, r0, #0
 80081c0:	d001      	beq.n	80081c6 <HAL_SPI_TransmitReceive+0x3aa>
          {
            return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e09c      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ca:	1c59      	adds	r1, r3, #1
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	6391      	str	r1, [r2, #56]	; 0x38
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	6812      	ldr	r2, [r2, #0]
 80081d4:	68d2      	ldr	r2, [r2, #12]
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1b1      	bne.n	8008156 <HAL_SPI_TransmitReceive+0x33a>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11d      	bne.n	8008236 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	2101      	movs	r1, #1
 8008202:	f000 f945 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 8008206:	1e03      	subs	r3, r0, #0
 8008208:	d004      	beq.n	8008214 <HAL_SPI_TransmitReceive+0x3f8>
          {
            return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e078      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	ffffdfff 	.word	0xffffdfff
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	1c59      	adds	r1, r3, #1
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	6391      	str	r1, [r2, #56]	; 0x38
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	6812      	ldr	r2, [r2, #0]
 8008222:	68d2      	ldr	r2, [r2, #12]
 8008224:	b2d2      	uxtb	r2, r2
 8008226:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800823a:	2380      	movs	r3, #128	; 0x80
 800823c:	019b      	lsls	r3, r3, #6
 800823e:	429a      	cmp	r2, r3
 8008240:	d119      	bne.n	8008276 <HAL_SPI_TransmitReceive+0x45a>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	2101      	movs	r1, #1
 800824a:	f000 f921 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 800824e:	1e03      	subs	r3, r0, #0
 8008250:	d007      	beq.n	8008262 <HAL_SPI_TransmitReceive+0x446>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	2202      	movs	r2, #2
 8008258:	431a      	orrs	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e04e      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	b29a      	uxth	r2, r3
 800826a:	2316      	movs	r3, #22
 800826c:	18fb      	adds	r3, r7, r3
 800826e:	801a      	strh	r2, [r3, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8008270:	2316      	movs	r3, #22
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	881b      	ldrh	r3, [r3, #0]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	2201      	movs	r2, #1
 800827c:	2180      	movs	r1, #128	; 0x80
 800827e:	f000 f907 	bl	8008490 <SPI_WaitOnFlagUntilTimeout>
 8008282:	1e03      	subs	r3, r0, #0
 8008284:	d007      	beq.n	8008296 <HAL_SPI_TransmitReceive+0x47a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828a:	2220      	movs	r2, #32
 800828c:	431a      	orrs	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e034      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2251      	movs	r2, #81	; 0x51
 800829a:	2101      	movs	r1, #1
 800829c:	5499      	strb	r1, [r3, r2]

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082a2:	2380      	movs	r3, #128	; 0x80
 80082a4:	019b      	lsls	r3, r3, #6
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d123      	bne.n	80082f2 <HAL_SPI_TransmitReceive+0x4d6>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2210      	movs	r2, #16
 80082b2:	4013      	ands	r3, r2
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d11c      	bne.n	80082f2 <HAL_SPI_TransmitReceive+0x4d6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	2202      	movs	r2, #2
 80082be:	431a      	orrs	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	655a      	str	r2, [r3, #84]	; 0x54

      SPI_RESET_CRC(hspi);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	6812      	ldr	r2, [r2, #0]
 80082ce:	490e      	ldr	r1, [pc, #56]	; (8008308 <HAL_SPI_TransmitReceive+0x4ec>)
 80082d0:	400a      	ands	r2, r1
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	6812      	ldr	r2, [r2, #0]
 80082dc:	6812      	ldr	r2, [r2, #0]
 80082de:	2180      	movs	r1, #128	; 0x80
 80082e0:	0189      	lsls	r1, r1, #6
 80082e2:	430a      	orrs	r2, r1
 80082e4:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2250      	movs	r2, #80	; 0x50
 80082ea:	2100      	movs	r1, #0
 80082ec:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR; 
 80082ee:	2301      	movs	r3, #1
 80082f0:	e006      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2250      	movs	r2, #80	; 0x50
 80082f6:	2100      	movs	r1, #0
 80082f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e000      	b.n	8008300 <HAL_SPI_TransmitReceive+0x4e4>
  }
  else
  {
    return HAL_BUSY;
 80082fe:	2302      	movs	r3, #2
  }
}
 8008300:	0018      	movs	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	b006      	add	sp, #24
 8008306:	bd80      	pop	{r7, pc}
 8008308:	ffffdfff 	.word	0xffffdfff

0800830c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* SPI in mode Receiver and Overrun not occurred ---------------------------*/
  if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) == RESET))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2240      	movs	r2, #64	; 0x40
 800831c:	4013      	ands	r3, r2
 800831e:	2b40      	cmp	r3, #64	; 0x40
 8008320:	d113      	bne.n	800834a <HAL_SPI_IRQHandler+0x3e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2201      	movs	r2, #1
 800832a:	4013      	ands	r3, r2
 800832c:	2b01      	cmp	r3, #1
 800832e:	d10c      	bne.n	800834a <HAL_SPI_IRQHandler+0x3e>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2240      	movs	r2, #64	; 0x40
 8008338:	4013      	ands	r3, r2
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d005      	beq.n	800834a <HAL_SPI_IRQHandler+0x3e>
  {
    hspi->RxISR(hspi);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	0010      	movs	r0, r2
 8008346:	4798      	blx	r3
    return;
 8008348:	e08b      	b.n	8008462 <HAL_SPI_IRQHandler+0x156>
  }

  /* SPI in mode Tramitter ---------------------------------------------------*/
  if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE) != RESET))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2280      	movs	r2, #128	; 0x80
 8008352:	4013      	ands	r3, r2
 8008354:	2b80      	cmp	r3, #128	; 0x80
 8008356:	d10c      	bne.n	8008372 <HAL_SPI_IRQHandler+0x66>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2202      	movs	r2, #2
 8008360:	4013      	ands	r3, r2
 8008362:	2b02      	cmp	r3, #2
 8008364:	d105      	bne.n	8008372 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	0010      	movs	r0, r2
 800836e:	4798      	blx	r3
    return;
 8008370:	e077      	b.n	8008462 <HAL_SPI_IRQHandler+0x156>
  }

  if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_ERR) != RESET)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	4013      	ands	r3, r2
 800837c:	2b20      	cmp	r3, #32
 800837e:	d170      	bne.n	8008462 <HAL_SPI_IRQHandler+0x156>
  {
    /* SPI CRC error interrupt occurred ---------------------------------------*/
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2210      	movs	r2, #16
 8008388:	4013      	ands	r3, r2
 800838a:	2b10      	cmp	r3, #16
 800838c:	d10a      	bne.n	80083a4 <HAL_SPI_IRQHandler+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008392:	2202      	movs	r2, #2
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2211      	movs	r2, #17
 80083a0:	4252      	negs	r2, r2
 80083a2:	609a      	str	r2, [r3, #8]
    }
    /* SPI Mode Fault error interrupt occurred --------------------------------*/
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_MODF) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	2220      	movs	r2, #32
 80083ac:	4013      	ands	r3, r2
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d112      	bne.n	80083d8 <HAL_SPI_IRQHandler+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b6:	2201      	movs	r2, #1
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6812      	ldr	r2, [r2, #0]
 80083ce:	6812      	ldr	r2, [r2, #0]
 80083d0:	2140      	movs	r1, #64	; 0x40
 80083d2:	438a      	bics	r2, r1
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	697b      	ldr	r3, [r7, #20]
    }
    
    /* SPI Overrun error interrupt occurred -----------------------------------*/
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	2240      	movs	r2, #64	; 0x40
 80083e0:	4013      	ands	r3, r2
 80083e2:	2b40      	cmp	r3, #64	; 0x40
 80083e4:	d114      	bne.n	8008410 <HAL_SPI_IRQHandler+0x104>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2251      	movs	r2, #81	; 0x51
 80083ea:	5c9b      	ldrb	r3, [r3, r2]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b12      	cmp	r3, #18
 80083f0:	d00e      	beq.n	8008410 <HAL_SPI_IRQHandler+0x104>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f6:	2204      	movs	r2, #4
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);      
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	613b      	str	r3, [r7, #16]
 800840e:	693b      	ldr	r3, [r7, #16]
      }
    }

    /* SPI Frame error interrupt occurred -------------------------------------*/
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_FRE) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	2380      	movs	r3, #128	; 0x80
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	401a      	ands	r2, r3
 800841c:	2380      	movs	r3, #128	; 0x80
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	429a      	cmp	r2, r3
 8008422:	d10a      	bne.n	800843a <HAL_SPI_IRQHandler+0x12e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008428:	2208      	movs	r2, #8
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
    }

    /* Call the Error call Back in case of Errors */
    if(hspi->ErrorCode!=HAL_SPI_ERROR_NONE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00f      	beq.n	8008462 <HAL_SPI_IRQHandler+0x156>
    {
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	6852      	ldr	r2, [r2, #4]
 800844c:	21e0      	movs	r1, #224	; 0xe0
 800844e:	438a      	bics	r2, r1
 8008450:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2251      	movs	r2, #81	; 0x51
 8008456:	2101      	movs	r1, #1
 8008458:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	0018      	movs	r0, r3
 800845e:	f000 f803 	bl	8008468 <HAL_SPI_ErrorCallback>
    }
  }
}
 8008462:	46bd      	mov	sp, r7
 8008464:	b006      	add	sp, #24
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function Should not be modified, when the callback is needed,
            the HAL_SPI_ErrorCallback() could be implenetd in the user file.
            - The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred.
   */
}
 8008470:	46c0      	nop			; (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	b002      	add	sp, #8
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  return hspi->State;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2251      	movs	r2, #81	; 0x51
 8008484:	5c9b      	ldrb	r3, [r3, r2]
 8008486:	b2db      	uxtb	r3, r3
}
 8008488:	0018      	movs	r0, r3
 800848a:	46bd      	mov	sp, r7
 800848c:	b002      	add	sp, #8
 800848e:	bd80      	pop	{r7, pc}

08008490 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	603b      	str	r3, [r7, #0]
 800849c:	1dfb      	adds	r3, r7, #7
 800849e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80084a4:	f7fc ff30 	bl	8005308 <HAL_GetTick>
 80084a8:	0003      	movs	r3, r0
 80084aa:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80084ac:	1dfb      	adds	r3, r7, #7
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d000      	beq.n	80084b6 <SPI_WaitOnFlagUntilTimeout+0x26>
 80084b4:	e087      	b.n	80085c6 <SPI_WaitOnFlagUntilTimeout+0x136>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 80084b6:	e03e      	b.n	8008536 <SPI_WaitOnFlagUntilTimeout+0xa6>
    {
      if(Timeout != HAL_MAX_DELAY)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	3301      	adds	r3, #1
 80084bc:	d03b      	beq.n	8008536 <SPI_WaitOnFlagUntilTimeout+0xa6>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d007      	beq.n	80084d4 <SPI_WaitOnFlagUntilTimeout+0x44>
 80084c4:	f7fc ff20 	bl	8005308 <HAL_GetTick>
 80084c8:	0002      	movs	r2, r0
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	1ad2      	subs	r2, r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d930      	bls.n	8008536 <SPI_WaitOnFlagUntilTimeout+0xa6>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	6812      	ldr	r2, [r2, #0]
 80084dc:	6852      	ldr	r2, [r2, #4]
 80084de:	21e0      	movs	r1, #224	; 0xe0
 80084e0:	438a      	bics	r2, r1
 80084e2:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	2140      	movs	r1, #64	; 0x40
 80084f0:	438a      	bics	r2, r1
 80084f2:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084f8:	2380      	movs	r3, #128	; 0x80
 80084fa:	019b      	lsls	r3, r3, #6
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d110      	bne.n	8008522 <SPI_WaitOnFlagUntilTimeout+0x92>
          {
            SPI_RESET_CRC(hspi);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	6812      	ldr	r2, [r2, #0]
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	4935      	ldr	r1, [pc, #212]	; (80085e0 <SPI_WaitOnFlagUntilTimeout+0x150>)
 800850c:	400a      	ands	r2, r1
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	2180      	movs	r1, #128	; 0x80
 800851c:	0189      	lsls	r1, r1, #6
 800851e:	430a      	orrs	r2, r1
 8008520:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2251      	movs	r2, #81	; 0x51
 8008526:	2101      	movs	r1, #1
 8008528:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2250      	movs	r2, #80	; 0x50
 800852e:	2100      	movs	r1, #0
 8008530:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e050      	b.n	80085d8 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	401a      	ands	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	429a      	cmp	r2, r3
 8008544:	d1b8      	bne.n	80084b8 <SPI_WaitOnFlagUntilTimeout+0x28>
 8008546:	e046      	b.n	80085d6 <SPI_WaitOnFlagUntilTimeout+0x146>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	3301      	adds	r3, #1
 800854c:	d03b      	beq.n	80085c6 <SPI_WaitOnFlagUntilTimeout+0x136>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <SPI_WaitOnFlagUntilTimeout+0xd4>
 8008554:	f7fc fed8 	bl	8005308 <HAL_GetTick>
 8008558:	0002      	movs	r2, r0
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	1ad2      	subs	r2, r2, r3
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	429a      	cmp	r2, r3
 8008562:	d930      	bls.n	80085c6 <SPI_WaitOnFlagUntilTimeout+0x136>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	6852      	ldr	r2, [r2, #4]
 800856e:	21e0      	movs	r1, #224	; 0xe0
 8008570:	438a      	bics	r2, r1
 8008572:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	6812      	ldr	r2, [r2, #0]
 800857e:	2140      	movs	r1, #64	; 0x40
 8008580:	438a      	bics	r2, r1
 8008582:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008588:	2380      	movs	r3, #128	; 0x80
 800858a:	019b      	lsls	r3, r3, #6
 800858c:	429a      	cmp	r2, r3
 800858e:	d110      	bne.n	80085b2 <SPI_WaitOnFlagUntilTimeout+0x122>
          {
            SPI_RESET_CRC(hspi);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	6812      	ldr	r2, [r2, #0]
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	4911      	ldr	r1, [pc, #68]	; (80085e0 <SPI_WaitOnFlagUntilTimeout+0x150>)
 800859c:	400a      	ands	r2, r1
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	6812      	ldr	r2, [r2, #0]
 80085a8:	6812      	ldr	r2, [r2, #0]
 80085aa:	2180      	movs	r1, #128	; 0x80
 80085ac:	0189      	lsls	r1, r1, #6
 80085ae:	430a      	orrs	r2, r1
 80085b0:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2251      	movs	r2, #81	; 0x51
 80085b6:	2101      	movs	r1, #1
 80085b8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2250      	movs	r2, #80	; 0x50
 80085be:	2100      	movs	r1, #0
 80085c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e008      	b.n	80085d8 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	401a      	ands	r2, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d0b8      	beq.n	8008548 <SPI_WaitOnFlagUntilTimeout+0xb8>
        }
      }
    }
  }
  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	0018      	movs	r0, r3
 80085da:	46bd      	mov	sp, r7
 80085dc:	b006      	add	sp, #24
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	ffffdfff 	.word	0xffffdfff

080085e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e047      	b.n	8008686 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2269      	movs	r2, #105	; 0x69
 80085fa:	5c9b      	ldrb	r3, [r3, r2]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d107      	bne.n	8008612 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2268      	movs	r2, #104	; 0x68
 8008606:	2100      	movs	r1, #0
 8008608:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	0018      	movs	r0, r3
 800860e:	f002 ff59 	bl	800b4c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2269      	movs	r2, #105	; 0x69
 8008616:	2124      	movs	r1, #36	; 0x24
 8008618:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	6812      	ldr	r2, [r2, #0]
 8008622:	6812      	ldr	r2, [r2, #0]
 8008624:	2101      	movs	r1, #1
 8008626:	438a      	bics	r2, r1
 8008628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_UART_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	0018      	movs	r0, r3
 8008636:	f000 fc55 	bl	8008ee4 <UART_AdvFeatureConfig>
  }

  if (UART_SetConfig(huart) == HAL_ERROR)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	0018      	movs	r0, r3
 800863e:	f000 f903 	bl	8008848 <UART_SetConfig>
 8008642:	0003      	movs	r3, r0
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_UART_Init+0x68>
  {
    return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e01c      	b.n	8008686 <HAL_UART_Init+0xa2>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	6812      	ldr	r2, [r2, #0]
 8008654:	6852      	ldr	r2, [r2, #4]
 8008656:	490e      	ldr	r1, [pc, #56]	; (8008690 <HAL_UART_Init+0xac>)
 8008658:	400a      	ands	r2, r1
 800865a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6812      	ldr	r2, [r2, #0]
 8008664:	6892      	ldr	r2, [r2, #8]
 8008666:	212a      	movs	r1, #42	; 0x2a
 8008668:	438a      	bics	r2, r1
 800866a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6812      	ldr	r2, [r2, #0]
 8008674:	6812      	ldr	r2, [r2, #0]
 8008676:	2101      	movs	r1, #1
 8008678:	430a      	orrs	r2, r1
 800867a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	0018      	movs	r0, r3
 8008680:	f000 fcdc 	bl	800903c <UART_CheckIdleState>
 8008684:	0003      	movs	r3, r0
}
 8008686:	0018      	movs	r0, r3
 8008688:	46bd      	mov	sp, r7
 800868a:	b002      	add	sp, #8
 800868c:	bd80      	pop	{r7, pc}
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	ffffb7ff 	.word	0xffffb7ff

08008694 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e02b      	b.n	80086fe <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2269      	movs	r2, #105	; 0x69
 80086aa:	2124      	movs	r1, #36	; 0x24
 80086ac:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	2101      	movs	r1, #1
 80086ba:	438a      	bics	r2, r1
 80086bc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2200      	movs	r2, #0
 80086cc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	609a      	str	r2, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	0018      	movs	r0, r3
 80086da:	f002 ffa7 	bl	800b62c <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2269      	movs	r2, #105	; 0x69
 80086e8:	2100      	movs	r1, #0
 80086ea:	5499      	strb	r1, [r3, r2]
  huart->RxState   = HAL_UART_STATE_RESET;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	226a      	movs	r2, #106	; 0x6a
 80086f0:	2100      	movs	r1, #0
 80086f2:	5499      	strb	r1, [r3, r2]

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2268      	movs	r2, #104	; 0x68
 80086f8:	2100      	movs	r1, #0
 80086fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	0018      	movs	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	b002      	add	sp, #8
 8008704:	bd80      	pop	{r7, pc}

08008706 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b088      	sub	sp, #32
 800870a:	af02      	add	r7, sp, #8
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	1dbb      	adds	r3, r7, #6
 8008714:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2269      	movs	r2, #105	; 0x69
 800871e:	5c9b      	ldrb	r3, [r3, r2]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b20      	cmp	r3, #32
 8008724:	d000      	beq.n	8008728 <HAL_UART_Transmit+0x22>
 8008726:	e08a      	b.n	800883e <HAL_UART_Transmit+0x138>
  {
    if((pData == NULL ) || (Size == 0U))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_UART_Transmit+0x30>
 800872e:	1dbb      	adds	r3, r7, #6
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e082      	b.n	8008840 <HAL_UART_Transmit+0x13a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	2380      	movs	r3, #128	; 0x80
 8008740:	015b      	lsls	r3, r3, #5
 8008742:	429a      	cmp	r2, r3
 8008744:	d109      	bne.n	800875a <HAL_UART_Transmit+0x54>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1) != 0)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2201      	movs	r2, #1
 8008752:	4013      	ands	r3, r2
 8008754:	d001      	beq.n	800875a <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e072      	b.n	8008840 <HAL_UART_Transmit+0x13a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2268      	movs	r2, #104	; 0x68
 800875e:	5c9b      	ldrb	r3, [r3, r2]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_UART_Transmit+0x62>
 8008764:	2302      	movs	r3, #2
 8008766:	e06b      	b.n	8008840 <HAL_UART_Transmit+0x13a>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2268      	movs	r2, #104	; 0x68
 800876c:	2101      	movs	r1, #1
 800876e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2269      	movs	r2, #105	; 0x69
 800877a:	2121      	movs	r1, #33	; 0x21
 800877c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800877e:	f7fc fdc3 	bl	8005308 <HAL_GetTick>
 8008782:	0003      	movs	r3, r0
 8008784:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	1dba      	adds	r2, r7, #6
 800878a:	2150      	movs	r1, #80	; 0x50
 800878c:	8812      	ldrh	r2, [r2, #0]
 800878e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1dba      	adds	r2, r7, #6
 8008794:	2152      	movs	r1, #82	; 0x52
 8008796:	8812      	ldrh	r2, [r2, #0]
 8008798:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0U)
 800879a:	e033      	b.n	8008804 <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2252      	movs	r2, #82	; 0x52
 80087a0:	5a9b      	ldrh	r3, [r3, r2]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b299      	uxth	r1, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2252      	movs	r2, #82	; 0x52
 80087ac:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	0013      	movs	r3, r2
 80087b8:	2200      	movs	r2, #0
 80087ba:	2180      	movs	r1, #128	; 0x80
 80087bc:	f000 fc88 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 80087c0:	1e03      	subs	r3, r0, #0
 80087c2:	d001      	beq.n	80087c8 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e03b      	b.n	8008840 <HAL_UART_Transmit+0x13a>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	2380      	movs	r3, #128	; 0x80
 80087ce:	015b      	lsls	r3, r3, #5
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d110      	bne.n	80087f6 <HAL_UART_Transmit+0xf0>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10c      	bne.n	80087f6 <HAL_UART_Transmit+0xf0>
      {
        tmp = (uint16_t*) pData;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	8812      	ldrh	r2, [r2, #0]
 80087e8:	05d2      	lsls	r2, r2, #23
 80087ea:	0dd2      	lsrs	r2, r2, #23
 80087ec:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2U;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	3302      	adds	r3, #2
 80087f2:	60bb      	str	r3, [r7, #8]
 80087f4:	e006      	b.n	8008804 <HAL_UART_Transmit+0xfe>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	1c51      	adds	r1, r2, #1
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	7812      	ldrb	r2, [r2, #0]
 8008802:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2252      	movs	r2, #82	; 0x52
 8008808:	5a9b      	ldrh	r3, [r3, r2]
 800880a:	b29b      	uxth	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1c5      	bne.n	800879c <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	0013      	movs	r3, r2
 800881a:	2200      	movs	r2, #0
 800881c:	2140      	movs	r1, #64	; 0x40
 800881e:	f000 fc57 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 8008822:	1e03      	subs	r3, r0, #0
 8008824:	d001      	beq.n	800882a <HAL_UART_Transmit+0x124>
    {
      return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e00a      	b.n	8008840 <HAL_UART_Transmit+0x13a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2269      	movs	r2, #105	; 0x69
 800882e:	2120      	movs	r1, #32
 8008830:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2268      	movs	r2, #104	; 0x68
 8008836:	2100      	movs	r1, #0
 8008838:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	e000      	b.n	8008840 <HAL_UART_Transmit+0x13a>
  }
  else
  {
    return HAL_BUSY;
 800883e:	2302      	movs	r3, #2
  }
}
 8008840:	0018      	movs	r0, r3
 8008842:	46bd      	mov	sp, r7
 8008844:	b006      	add	sp, #24
 8008846:	bd80      	pop	{r7, pc}

08008848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008848:	b5b0      	push	{r4, r5, r7, lr}
 800884a:	b08c      	sub	sp, #48	; 0x30
 800884c:	af00      	add	r7, sp, #0
 800884e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg                     = 0x00000000U;
 8008850:	2300      	movs	r3, #0
 8008852:	62fb      	str	r3, [r7, #44]	; 0x2c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8008854:	2313      	movs	r3, #19
 8008856:	2218      	movs	r2, #24
 8008858:	4694      	mov	ip, r2
 800885a:	44bc      	add	ip, r7
 800885c:	4463      	add	r3, ip
 800885e:	2210      	movs	r2, #16
 8008860:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8008862:	230c      	movs	r3, #12
 8008864:	2218      	movs	r2, #24
 8008866:	4694      	mov	ip, r2
 8008868:	44bc      	add	ip, r7
 800886a:	4463      	add	r3, ip
 800886c:	2200      	movs	r2, #0
 800886e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8008870:	2310      	movs	r3, #16
 8008872:	2218      	movs	r2, #24
 8008874:	4694      	mov	ip, r2
 8008876:	44bc      	add	ip, r7
 8008878:	4463      	add	r3, ip
 800887a:	2200      	movs	r2, #0
 800887c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800887e:	230f      	movs	r3, #15
 8008880:	2218      	movs	r2, #24
 8008882:	4694      	mov	ip, r2
 8008884:	44bc      	add	ip, r7
 8008886:	4463      	add	r3, ip
 8008888:	2200      	movs	r2, #0
 800888a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	431a      	orrs	r2, r3
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	431a      	orrs	r2, r3
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69fa      	ldr	r2, [r7, #28]
 80088aa:	6812      	ldr	r2, [r2, #0]
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	49c7      	ldr	r1, [pc, #796]	; (8008bcc <UART_SetConfig+0x384>)
 80088b0:	4011      	ands	r1, r2
 80088b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b4:	430a      	orrs	r2, r1
 80088b6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	6812      	ldr	r2, [r2, #0]
 80088c0:	6852      	ldr	r2, [r2, #4]
 80088c2:	49c3      	ldr	r1, [pc, #780]	; (8008bd0 <UART_SetConfig+0x388>)
 80088c4:	4011      	ands	r1, r2
 80088c6:	69fa      	ldr	r2, [r7, #28]
 80088c8:	68d2      	ldr	r2, [r2, #12]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4abe      	ldr	r2, [pc, #760]	; (8008bd4 <UART_SetConfig+0x38c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d004      	beq.n	80088e8 <UART_SetConfig+0xa0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e4:	4313      	orrs	r3, r2
 80088e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	69fa      	ldr	r2, [r7, #28]
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	6892      	ldr	r2, [r2, #8]
 80088f2:	49b9      	ldr	r1, [pc, #740]	; (8008bd8 <UART_SetConfig+0x390>)
 80088f4:	4011      	ands	r1, r2
 80088f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f8:	430a      	orrs	r2, r1
 80088fa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4ab6      	ldr	r2, [pc, #728]	; (8008bdc <UART_SetConfig+0x394>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d134      	bne.n	8008970 <UART_SetConfig+0x128>
 8008906:	4bb6      	ldr	r3, [pc, #728]	; (8008be0 <UART_SetConfig+0x398>)
 8008908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800890a:	2203      	movs	r2, #3
 800890c:	4013      	ands	r3, r2
 800890e:	2b01      	cmp	r3, #1
 8008910:	d015      	beq.n	800893e <UART_SetConfig+0xf6>
 8008912:	d304      	bcc.n	800891e <UART_SetConfig+0xd6>
 8008914:	2b02      	cmp	r3, #2
 8008916:	d00a      	beq.n	800892e <UART_SetConfig+0xe6>
 8008918:	2b03      	cmp	r3, #3
 800891a:	d018      	beq.n	800894e <UART_SetConfig+0x106>
 800891c:	e01f      	b.n	800895e <UART_SetConfig+0x116>
 800891e:	2313      	movs	r3, #19
 8008920:	2218      	movs	r2, #24
 8008922:	4694      	mov	ip, r2
 8008924:	44bc      	add	ip, r7
 8008926:	4463      	add	r3, ip
 8008928:	2201      	movs	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	e0bc      	b.n	8008aa8 <UART_SetConfig+0x260>
 800892e:	2313      	movs	r3, #19
 8008930:	2218      	movs	r2, #24
 8008932:	4694      	mov	ip, r2
 8008934:	44bc      	add	ip, r7
 8008936:	4463      	add	r3, ip
 8008938:	2202      	movs	r2, #2
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	e0b4      	b.n	8008aa8 <UART_SetConfig+0x260>
 800893e:	2313      	movs	r3, #19
 8008940:	2218      	movs	r2, #24
 8008942:	4694      	mov	ip, r2
 8008944:	44bc      	add	ip, r7
 8008946:	4463      	add	r3, ip
 8008948:	2204      	movs	r2, #4
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	e0ac      	b.n	8008aa8 <UART_SetConfig+0x260>
 800894e:	2313      	movs	r3, #19
 8008950:	2218      	movs	r2, #24
 8008952:	4694      	mov	ip, r2
 8008954:	44bc      	add	ip, r7
 8008956:	4463      	add	r3, ip
 8008958:	2208      	movs	r2, #8
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e0a4      	b.n	8008aa8 <UART_SetConfig+0x260>
 800895e:	2313      	movs	r3, #19
 8008960:	2218      	movs	r2, #24
 8008962:	4694      	mov	ip, r2
 8008964:	44bc      	add	ip, r7
 8008966:	4463      	add	r3, ip
 8008968:	2210      	movs	r2, #16
 800896a:	701a      	strb	r2, [r3, #0]
 800896c:	46c0      	nop			; (mov r8, r8)
 800896e:	e09b      	b.n	8008aa8 <UART_SetConfig+0x260>
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a9b      	ldr	r2, [pc, #620]	; (8008be4 <UART_SetConfig+0x39c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d137      	bne.n	80089ea <UART_SetConfig+0x1a2>
 800897a:	4b99      	ldr	r3, [pc, #612]	; (8008be0 <UART_SetConfig+0x398>)
 800897c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897e:	220c      	movs	r2, #12
 8008980:	4013      	ands	r3, r2
 8008982:	2b04      	cmp	r3, #4
 8008984:	d018      	beq.n	80089b8 <UART_SetConfig+0x170>
 8008986:	d802      	bhi.n	800898e <UART_SetConfig+0x146>
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <UART_SetConfig+0x150>
 800898c:	e024      	b.n	80089d8 <UART_SetConfig+0x190>
 800898e:	2b08      	cmp	r3, #8
 8008990:	d00a      	beq.n	80089a8 <UART_SetConfig+0x160>
 8008992:	2b0c      	cmp	r3, #12
 8008994:	d018      	beq.n	80089c8 <UART_SetConfig+0x180>
 8008996:	e01f      	b.n	80089d8 <UART_SetConfig+0x190>
 8008998:	2313      	movs	r3, #19
 800899a:	2218      	movs	r2, #24
 800899c:	4694      	mov	ip, r2
 800899e:	44bc      	add	ip, r7
 80089a0:	4463      	add	r3, ip
 80089a2:	2200      	movs	r2, #0
 80089a4:	701a      	strb	r2, [r3, #0]
 80089a6:	e07f      	b.n	8008aa8 <UART_SetConfig+0x260>
 80089a8:	2313      	movs	r3, #19
 80089aa:	2218      	movs	r2, #24
 80089ac:	4694      	mov	ip, r2
 80089ae:	44bc      	add	ip, r7
 80089b0:	4463      	add	r3, ip
 80089b2:	2202      	movs	r2, #2
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	e077      	b.n	8008aa8 <UART_SetConfig+0x260>
 80089b8:	2313      	movs	r3, #19
 80089ba:	2218      	movs	r2, #24
 80089bc:	4694      	mov	ip, r2
 80089be:	44bc      	add	ip, r7
 80089c0:	4463      	add	r3, ip
 80089c2:	2204      	movs	r2, #4
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	e06f      	b.n	8008aa8 <UART_SetConfig+0x260>
 80089c8:	2313      	movs	r3, #19
 80089ca:	2218      	movs	r2, #24
 80089cc:	4694      	mov	ip, r2
 80089ce:	44bc      	add	ip, r7
 80089d0:	4463      	add	r3, ip
 80089d2:	2208      	movs	r2, #8
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	e067      	b.n	8008aa8 <UART_SetConfig+0x260>
 80089d8:	2313      	movs	r3, #19
 80089da:	2218      	movs	r2, #24
 80089dc:	4694      	mov	ip, r2
 80089de:	44bc      	add	ip, r7
 80089e0:	4463      	add	r3, ip
 80089e2:	2210      	movs	r2, #16
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	46c0      	nop			; (mov r8, r8)
 80089e8:	e05e      	b.n	8008aa8 <UART_SetConfig+0x260>
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a7e      	ldr	r2, [pc, #504]	; (8008be8 <UART_SetConfig+0x3a0>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d107      	bne.n	8008a04 <UART_SetConfig+0x1bc>
 80089f4:	2313      	movs	r3, #19
 80089f6:	2218      	movs	r2, #24
 80089f8:	4694      	mov	ip, r2
 80089fa:	44bc      	add	ip, r7
 80089fc:	4463      	add	r3, ip
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e052      	b.n	8008aaa <UART_SetConfig+0x262>
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a78      	ldr	r2, [pc, #480]	; (8008bec <UART_SetConfig+0x3a4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d107      	bne.n	8008a1e <UART_SetConfig+0x1d6>
 8008a0e:	2313      	movs	r3, #19
 8008a10:	2218      	movs	r2, #24
 8008a12:	4694      	mov	ip, r2
 8008a14:	44bc      	add	ip, r7
 8008a16:	4463      	add	r3, ip
 8008a18:	2200      	movs	r2, #0
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	e045      	b.n	8008aaa <UART_SetConfig+0x262>
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a6c      	ldr	r2, [pc, #432]	; (8008bd4 <UART_SetConfig+0x38c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d140      	bne.n	8008aaa <UART_SetConfig+0x262>
 8008a28:	4b6d      	ldr	r3, [pc, #436]	; (8008be0 <UART_SetConfig+0x398>)
 8008a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a2c:	23c0      	movs	r3, #192	; 0xc0
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	4013      	ands	r3, r2
 8008a32:	2280      	movs	r2, #128	; 0x80
 8008a34:	00d2      	lsls	r2, r2, #3
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d01f      	beq.n	8008a7a <UART_SetConfig+0x232>
 8008a3a:	2280      	movs	r2, #128	; 0x80
 8008a3c:	00d2      	lsls	r2, r2, #3
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d802      	bhi.n	8008a48 <UART_SetConfig+0x200>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d009      	beq.n	8008a5a <UART_SetConfig+0x212>
 8008a46:	e028      	b.n	8008a9a <UART_SetConfig+0x252>
 8008a48:	2280      	movs	r2, #128	; 0x80
 8008a4a:	0112      	lsls	r2, r2, #4
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00c      	beq.n	8008a6a <UART_SetConfig+0x222>
 8008a50:	22c0      	movs	r2, #192	; 0xc0
 8008a52:	0112      	lsls	r2, r2, #4
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d018      	beq.n	8008a8a <UART_SetConfig+0x242>
 8008a58:	e01f      	b.n	8008a9a <UART_SetConfig+0x252>
 8008a5a:	2313      	movs	r3, #19
 8008a5c:	2218      	movs	r2, #24
 8008a5e:	4694      	mov	ip, r2
 8008a60:	44bc      	add	ip, r7
 8008a62:	4463      	add	r3, ip
 8008a64:	2200      	movs	r2, #0
 8008a66:	701a      	strb	r2, [r3, #0]
 8008a68:	e01e      	b.n	8008aa8 <UART_SetConfig+0x260>
 8008a6a:	2313      	movs	r3, #19
 8008a6c:	2218      	movs	r2, #24
 8008a6e:	4694      	mov	ip, r2
 8008a70:	44bc      	add	ip, r7
 8008a72:	4463      	add	r3, ip
 8008a74:	2202      	movs	r2, #2
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e016      	b.n	8008aa8 <UART_SetConfig+0x260>
 8008a7a:	2313      	movs	r3, #19
 8008a7c:	2218      	movs	r2, #24
 8008a7e:	4694      	mov	ip, r2
 8008a80:	44bc      	add	ip, r7
 8008a82:	4463      	add	r3, ip
 8008a84:	2204      	movs	r2, #4
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e00e      	b.n	8008aa8 <UART_SetConfig+0x260>
 8008a8a:	2313      	movs	r3, #19
 8008a8c:	2218      	movs	r2, #24
 8008a8e:	4694      	mov	ip, r2
 8008a90:	44bc      	add	ip, r7
 8008a92:	4463      	add	r3, ip
 8008a94:	2208      	movs	r2, #8
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	e006      	b.n	8008aa8 <UART_SetConfig+0x260>
 8008a9a:	2313      	movs	r3, #19
 8008a9c:	2218      	movs	r2, #24
 8008a9e:	4694      	mov	ip, r2
 8008aa0:	44bc      	add	ip, r7
 8008aa2:	4463      	add	r3, ip
 8008aa4:	2210      	movs	r2, #16
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	46c0      	nop			; (mov r8, r8)
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8008aaa:	2002      	movs	r0, #2
 8008aac:	f7fe f868 	bl	8006b80 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ab0:	0003      	movs	r3, r0
 8008ab2:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a46      	ldr	r2, [pc, #280]	; (8008bd4 <UART_SetConfig+0x38c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d000      	beq.n	8008ac0 <UART_SetConfig+0x278>
 8008abe:	e09f      	b.n	8008c00 <UART_SetConfig+0x3b8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (clocksource)
 8008ac4:	2313      	movs	r3, #19
 8008ac6:	2218      	movs	r2, #24
 8008ac8:	4694      	mov	ip, r2
 8008aca:	44bc      	add	ip, r7
 8008acc:	4463      	add	r3, ip
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d00d      	beq.n	8008af0 <UART_SetConfig+0x2a8>
 8008ad4:	dc02      	bgt.n	8008adc <UART_SetConfig+0x294>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <UART_SetConfig+0x29e>
 8008ada:	e01d      	b.n	8008b18 <UART_SetConfig+0x2d0>
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d012      	beq.n	8008b06 <UART_SetConfig+0x2be>
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d015      	beq.n	8008b10 <UART_SetConfig+0x2c8>
 8008ae4:	e018      	b.n	8008b18 <UART_SetConfig+0x2d0>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8008ae6:	f7fd fe75 	bl	80067d4 <HAL_RCC_GetPCLK1Freq>
 8008aea:	0003      	movs	r3, r0
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008aee:	e01b      	b.n	8008b28 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008af0:	4b3b      	ldr	r3, [pc, #236]	; (8008be0 <UART_SetConfig+0x398>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2210      	movs	r2, #16
 8008af6:	4013      	ands	r3, r2
 8008af8:	d002      	beq.n	8008b00 <UART_SetConfig+0x2b8>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8008afa:	4b3d      	ldr	r3, [pc, #244]	; (8008bf0 <UART_SetConfig+0x3a8>)
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 8008afe:	e013      	b.n	8008b28 <UART_SetConfig+0x2e0>
        tmpreg = (uint32_t) HSI_VALUE;
 8008b00:	4b3c      	ldr	r3, [pc, #240]	; (8008bf4 <UART_SetConfig+0x3ac>)
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008b04:	e010      	b.n	8008b28 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8008b06:	f7fd fddd 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8008b0a:	0003      	movs	r3, r0
 8008b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008b0e:	e00b      	b.n	8008b28 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8008b10:	2380      	movs	r3, #128	; 0x80
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008b16:	e007      	b.n	8008b28 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008b18:	230f      	movs	r3, #15
 8008b1a:	2218      	movs	r2, #24
 8008b1c:	4694      	mov	ip, r2
 8008b1e:	44bc      	add	ip, r7
 8008b20:	4463      	add	r3, ip
 8008b22:	2201      	movs	r2, #1
 8008b24:	701a      	strb	r2, [r3, #0]
      break;
 8008b26:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d100      	bne.n	8008b30 <UART_SetConfig+0x2e8>
 8008b2e:	e1c0      	b.n	8008eb2 <UART_SetConfig+0x66a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	0013      	movs	r3, r2
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	189a      	adds	r2, r3, r2
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d805      	bhi.n	8008b4c <UART_SetConfig+0x304>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d207      	bcs.n	8008b5c <UART_SetConfig+0x314>
      {
        ret = HAL_ERROR;
 8008b4c:	230f      	movs	r3, #15
 8008b4e:	2218      	movs	r2, #24
 8008b50:	4694      	mov	ip, r2
 8008b52:	44bc      	add	ip, r7
 8008b54:	4463      	add	r3, ip
 8008b56:	2201      	movs	r2, #1
 8008b58:	701a      	strb	r2, [r3, #0]
 8008b5a:	e1aa      	b.n	8008eb2 <UART_SetConfig+0x66a>
      }
      else
      {
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8008b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5e:	613b      	str	r3, [r7, #16]
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	6939      	ldr	r1, [r7, #16]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	000b      	movs	r3, r1
 8008b6a:	0e1b      	lsrs	r3, r3, #24
 8008b6c:	0010      	movs	r0, r2
 8008b6e:	0205      	lsls	r5, r0, #8
 8008b70:	431d      	orrs	r5, r3
 8008b72:	000b      	movs	r3, r1
 8008b74:	021c      	lsls	r4, r3, #8
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	085b      	lsrs	r3, r3, #1
 8008b7c:	60bb      	str	r3, [r7, #8]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	68b8      	ldr	r0, [r7, #8]
 8008b84:	68f9      	ldr	r1, [r7, #12]
 8008b86:	1900      	adds	r0, r0, r4
 8008b88:	4169      	adcs	r1, r5
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	603b      	str	r3, [r7, #0]
 8008b90:	2300      	movs	r3, #0
 8008b92:	607b      	str	r3, [r7, #4]
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f7f7 fc6a 	bl	8000470 <__aeabi_uldivmod>
 8008b9c:	0003      	movs	r3, r0
 8008b9e:	000c      	movs	r4, r1
 8008ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	4a14      	ldr	r2, [pc, #80]	; (8008bf8 <UART_SetConfig+0x3b0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d908      	bls.n	8008bbc <UART_SetConfig+0x374>
 8008baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bac:	4a13      	ldr	r2, [pc, #76]	; (8008bfc <UART_SetConfig+0x3b4>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d804      	bhi.n	8008bbc <UART_SetConfig+0x374>
        {
           huart->Instance->BRR = tmpreg;
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb8:	60da      	str	r2, [r3, #12]
 8008bba:	e17a      	b.n	8008eb2 <UART_SetConfig+0x66a>
        }
        else
        {
          ret = HAL_ERROR;
 8008bbc:	230f      	movs	r3, #15
 8008bbe:	2218      	movs	r2, #24
 8008bc0:	4694      	mov	ip, r2
 8008bc2:	44bc      	add	ip, r7
 8008bc4:	4463      	add	r3, ip
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	701a      	strb	r2, [r3, #0]
 8008bca:	e172      	b.n	8008eb2 <UART_SetConfig+0x66a>
 8008bcc:	efff69f3 	.word	0xefff69f3
 8008bd0:	ffffcfff 	.word	0xffffcfff
 8008bd4:	40004800 	.word	0x40004800
 8008bd8:	fffff4ff 	.word	0xfffff4ff
 8008bdc:	40013800 	.word	0x40013800
 8008be0:	40021000 	.word	0x40021000
 8008be4:	40004400 	.word	0x40004400
 8008be8:	40004c00 	.word	0x40004c00
 8008bec:	40005000 	.word	0x40005000
 8008bf0:	003d0900 	.word	0x003d0900
 8008bf4:	00f42400 	.word	0x00f42400
 8008bf8:	000002ff 	.word	0x000002ff
 8008bfc:	000fffff 	.word	0x000fffff
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	69da      	ldr	r2, [r3, #28]
 8008c04:	2380      	movs	r3, #128	; 0x80
 8008c06:	021b      	lsls	r3, r3, #8
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d000      	beq.n	8008c0e <UART_SetConfig+0x3c6>
 8008c0c:	e0ca      	b.n	8008da4 <UART_SetConfig+0x55c>
  {
    switch (clocksource)
 8008c0e:	2313      	movs	r3, #19
 8008c10:	2218      	movs	r2, #24
 8008c12:	4694      	mov	ip, r2
 8008c14:	44bc      	add	ip, r7
 8008c16:	4463      	add	r3, ip
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	d900      	bls.n	8008c20 <UART_SetConfig+0x3d8>
 8008c1e:	e089      	b.n	8008d34 <UART_SetConfig+0x4ec>
 8008c20:	009a      	lsls	r2, r3, #2
 8008c22:	4ba9      	ldr	r3, [pc, #676]	; (8008ec8 <UART_SetConfig+0x680>)
 8008c24:	18d3      	adds	r3, r2, r3
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	005a      	lsls	r2, r3, #1
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	085b      	lsrs	r3, r3, #1
 8008c34:	18d2      	adds	r2, r2, r3
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	0019      	movs	r1, r3
 8008c3c:	0010      	movs	r0, r2
 8008c3e:	f7f7 fa63 	bl	8000108 <__udivsi3>
 8008c42:	0003      	movs	r3, r0
 8008c44:	001a      	movs	r2, r3
 8008c46:	2310      	movs	r3, #16
 8008c48:	2118      	movs	r1, #24
 8008c4a:	468c      	mov	ip, r1
 8008c4c:	44bc      	add	ip, r7
 8008c4e:	4463      	add	r3, ip
 8008c50:	801a      	strh	r2, [r3, #0]
      break;
 8008c52:	e077      	b.n	8008d44 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008c54:	f7fd fdd4 	bl	8006800 <HAL_RCC_GetPCLK2Freq>
 8008c58:	0003      	movs	r3, r0
 8008c5a:	005a      	lsls	r2, r3, #1
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	18d2      	adds	r2, r2, r3
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	0019      	movs	r1, r3
 8008c6a:	0010      	movs	r0, r2
 8008c6c:	f7f7 fa4c 	bl	8000108 <__udivsi3>
 8008c70:	0003      	movs	r3, r0
 8008c72:	001a      	movs	r2, r3
 8008c74:	2310      	movs	r3, #16
 8008c76:	2118      	movs	r1, #24
 8008c78:	468c      	mov	ip, r1
 8008c7a:	44bc      	add	ip, r7
 8008c7c:	4463      	add	r3, ip
 8008c7e:	801a      	strh	r2, [r3, #0]
      break;
 8008c80:	e060      	b.n	8008d44 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c82:	4b92      	ldr	r3, [pc, #584]	; (8008ecc <UART_SetConfig+0x684>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2210      	movs	r2, #16
 8008c88:	4013      	ands	r3, r2
 8008c8a:	d013      	beq.n	8008cb4 <UART_SetConfig+0x46c>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	4a8f      	ldr	r2, [pc, #572]	; (8008ed0 <UART_SetConfig+0x688>)
 8008c94:	189a      	adds	r2, r3, r2
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	0019      	movs	r1, r3
 8008c9c:	0010      	movs	r0, r2
 8008c9e:	f7f7 fa33 	bl	8000108 <__udivsi3>
 8008ca2:	0003      	movs	r3, r0
 8008ca4:	001a      	movs	r2, r3
 8008ca6:	2310      	movs	r3, #16
 8008ca8:	2118      	movs	r1, #24
 8008caa:	468c      	mov	ip, r1
 8008cac:	44bc      	add	ip, r7
 8008cae:	4463      	add	r3, ip
 8008cb0:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      }
      break;
 8008cb2:	e047      	b.n	8008d44 <UART_SetConfig+0x4fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	085b      	lsrs	r3, r3, #1
 8008cba:	4a86      	ldr	r2, [pc, #536]	; (8008ed4 <UART_SetConfig+0x68c>)
 8008cbc:	189a      	adds	r2, r3, r2
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	0019      	movs	r1, r3
 8008cc4:	0010      	movs	r0, r2
 8008cc6:	f7f7 fa1f 	bl	8000108 <__udivsi3>
 8008cca:	0003      	movs	r3, r0
 8008ccc:	001a      	movs	r2, r3
 8008cce:	2310      	movs	r3, #16
 8008cd0:	2118      	movs	r1, #24
 8008cd2:	468c      	mov	ip, r1
 8008cd4:	44bc      	add	ip, r7
 8008cd6:	4463      	add	r3, ip
 8008cd8:	801a      	strh	r2, [r3, #0]
      break;
 8008cda:	e033      	b.n	8008d44 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008cdc:	f7fd fcf2 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8008ce0:	0003      	movs	r3, r0
 8008ce2:	005a      	lsls	r2, r3, #1
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	085b      	lsrs	r3, r3, #1
 8008cea:	18d2      	adds	r2, r2, r3
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	0019      	movs	r1, r3
 8008cf2:	0010      	movs	r0, r2
 8008cf4:	f7f7 fa08 	bl	8000108 <__udivsi3>
 8008cf8:	0003      	movs	r3, r0
 8008cfa:	001a      	movs	r2, r3
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	2118      	movs	r1, #24
 8008d00:	468c      	mov	ip, r1
 8008d02:	44bc      	add	ip, r7
 8008d04:	4463      	add	r3, ip
 8008d06:	801a      	strh	r2, [r3, #0]
      break;
 8008d08:	e01c      	b.n	8008d44 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	2280      	movs	r2, #128	; 0x80
 8008d12:	0252      	lsls	r2, r2, #9
 8008d14:	189a      	adds	r2, r3, r2
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	0019      	movs	r1, r3
 8008d1c:	0010      	movs	r0, r2
 8008d1e:	f7f7 f9f3 	bl	8000108 <__udivsi3>
 8008d22:	0003      	movs	r3, r0
 8008d24:	001a      	movs	r2, r3
 8008d26:	2310      	movs	r3, #16
 8008d28:	2118      	movs	r1, #24
 8008d2a:	468c      	mov	ip, r1
 8008d2c:	44bc      	add	ip, r7
 8008d2e:	4463      	add	r3, ip
 8008d30:	801a      	strh	r2, [r3, #0]
      break;
 8008d32:	e007      	b.n	8008d44 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008d34:	230f      	movs	r3, #15
 8008d36:	2218      	movs	r2, #24
 8008d38:	4694      	mov	ip, r2
 8008d3a:	44bc      	add	ip, r7
 8008d3c:	4463      	add	r3, ip
 8008d3e:	2201      	movs	r2, #1
 8008d40:	701a      	strb	r2, [r3, #0]
      break;
 8008d42:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8008d44:	230c      	movs	r3, #12
 8008d46:	2218      	movs	r2, #24
 8008d48:	4694      	mov	ip, r2
 8008d4a:	44bc      	add	ip, r7
 8008d4c:	4463      	add	r3, ip
 8008d4e:	2210      	movs	r2, #16
 8008d50:	2118      	movs	r1, #24
 8008d52:	468c      	mov	ip, r1
 8008d54:	44bc      	add	ip, r7
 8008d56:	4462      	add	r2, ip
 8008d58:	8812      	ldrh	r2, [r2, #0]
 8008d5a:	210f      	movs	r1, #15
 8008d5c:	438a      	bics	r2, r1
 8008d5e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8008d60:	2310      	movs	r3, #16
 8008d62:	2218      	movs	r2, #24
 8008d64:	4694      	mov	ip, r2
 8008d66:	44bc      	add	ip, r7
 8008d68:	4463      	add	r3, ip
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	105b      	asrs	r3, r3, #1
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2207      	movs	r2, #7
 8008d72:	4013      	ands	r3, r2
 8008d74:	b299      	uxth	r1, r3
 8008d76:	230c      	movs	r3, #12
 8008d78:	2218      	movs	r2, #24
 8008d7a:	4694      	mov	ip, r2
 8008d7c:	44bc      	add	ip, r7
 8008d7e:	4463      	add	r3, ip
 8008d80:	220c      	movs	r2, #12
 8008d82:	2018      	movs	r0, #24
 8008d84:	4684      	mov	ip, r0
 8008d86:	44bc      	add	ip, r7
 8008d88:	4462      	add	r2, ip
 8008d8a:	8812      	ldrh	r2, [r2, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	220c      	movs	r2, #12
 8008d96:	2118      	movs	r1, #24
 8008d98:	468c      	mov	ip, r1
 8008d9a:	44bc      	add	ip, r7
 8008d9c:	4462      	add	r2, ip
 8008d9e:	8812      	ldrh	r2, [r2, #0]
 8008da0:	60da      	str	r2, [r3, #12]
 8008da2:	e086      	b.n	8008eb2 <UART_SetConfig+0x66a>
  }
  else
  {
    switch (clocksource)
 8008da4:	2313      	movs	r3, #19
 8008da6:	2218      	movs	r2, #24
 8008da8:	4694      	mov	ip, r2
 8008daa:	44bc      	add	ip, r7
 8008dac:	4463      	add	r3, ip
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d876      	bhi.n	8008ea2 <UART_SetConfig+0x65a>
 8008db4:	009a      	lsls	r2, r3, #2
 8008db6:	4b48      	ldr	r3, [pc, #288]	; (8008ed8 <UART_SetConfig+0x690>)
 8008db8:	18d3      	adds	r3, r2, r3
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	681c      	ldr	r4, [r3, #0]
 8008dc2:	f7fd fd07 	bl	80067d4 <HAL_RCC_GetPCLK1Freq>
 8008dc6:	0002      	movs	r2, r0
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	18d2      	adds	r2, r2, r3
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	0019      	movs	r1, r3
 8008dd6:	0010      	movs	r0, r2
 8008dd8:	f7f7 f996 	bl	8000108 <__udivsi3>
 8008ddc:	0003      	movs	r3, r0
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	60e3      	str	r3, [r4, #12]
      break;
 8008de2:	e066      	b.n	8008eb2 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	681c      	ldr	r4, [r3, #0]
 8008de8:	f7fd fd0a 	bl	8006800 <HAL_RCC_GetPCLK2Freq>
 8008dec:	0002      	movs	r2, r0
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	18d2      	adds	r2, r2, r3
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	0010      	movs	r0, r2
 8008dfe:	f7f7 f983 	bl	8000108 <__udivsi3>
 8008e02:	0003      	movs	r3, r0
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	60e3      	str	r3, [r4, #12]
      break;
 8008e08:	e053      	b.n	8008eb2 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e0a:	4b30      	ldr	r3, [pc, #192]	; (8008ecc <UART_SetConfig+0x684>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2210      	movs	r2, #16
 8008e10:	4013      	ands	r3, r2
 8008e12:	d010      	beq.n	8008e36 <UART_SetConfig+0x5ee>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	681c      	ldr	r4, [r3, #0]
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	085b      	lsrs	r3, r3, #1
 8008e1e:	4a2f      	ldr	r2, [pc, #188]	; (8008edc <UART_SetConfig+0x694>)
 8008e20:	189a      	adds	r2, r3, r2
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	0019      	movs	r1, r3
 8008e28:	0010      	movs	r0, r2
 8008e2a:	f7f7 f96d 	bl	8000108 <__udivsi3>
 8008e2e:	0003      	movs	r3, r0
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	60e3      	str	r3, [r4, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
      }
      break;
 8008e34:	e03d      	b.n	8008eb2 <UART_SetConfig+0x66a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	681c      	ldr	r4, [r3, #0]
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	085b      	lsrs	r3, r3, #1
 8008e40:	4a27      	ldr	r2, [pc, #156]	; (8008ee0 <UART_SetConfig+0x698>)
 8008e42:	189a      	adds	r2, r3, r2
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	0019      	movs	r1, r3
 8008e4a:	0010      	movs	r0, r2
 8008e4c:	f7f7 f95c 	bl	8000108 <__udivsi3>
 8008e50:	0003      	movs	r3, r0
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	60e3      	str	r3, [r4, #12]
      break;
 8008e56:	e02c      	b.n	8008eb2 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	681c      	ldr	r4, [r3, #0]
 8008e5c:	f7fd fc32 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8008e60:	0002      	movs	r2, r0
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	085b      	lsrs	r3, r3, #1
 8008e68:	18d2      	adds	r2, r2, r3
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	0019      	movs	r1, r3
 8008e70:	0010      	movs	r0, r2
 8008e72:	f7f7 f949 	bl	8000108 <__udivsi3>
 8008e76:	0003      	movs	r3, r0
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	60e3      	str	r3, [r4, #12]
      break;
 8008e7c:	e019      	b.n	8008eb2 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	681c      	ldr	r4, [r3, #0]
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	085b      	lsrs	r3, r3, #1
 8008e88:	2280      	movs	r2, #128	; 0x80
 8008e8a:	0212      	lsls	r2, r2, #8
 8008e8c:	189a      	adds	r2, r3, r2
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	0019      	movs	r1, r3
 8008e94:	0010      	movs	r0, r2
 8008e96:	f7f7 f937 	bl	8000108 <__udivsi3>
 8008e9a:	0003      	movs	r3, r0
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	60e3      	str	r3, [r4, #12]
      break;
 8008ea0:	e007      	b.n	8008eb2 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008ea2:	230f      	movs	r3, #15
 8008ea4:	2218      	movs	r2, #24
 8008ea6:	4694      	mov	ip, r2
 8008ea8:	44bc      	add	ip, r7
 8008eaa:	4463      	add	r3, ip
 8008eac:	2201      	movs	r2, #1
 8008eae:	701a      	strb	r2, [r3, #0]
      break;
 8008eb0:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8008eb2:	230f      	movs	r3, #15
 8008eb4:	2218      	movs	r2, #24
 8008eb6:	4694      	mov	ip, r2
 8008eb8:	44bc      	add	ip, r7
 8008eba:	4463      	add	r3, ip
 8008ebc:	781b      	ldrb	r3, [r3, #0]

}
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	b00c      	add	sp, #48	; 0x30
 8008ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ec6:	46c0      	nop			; (mov r8, r8)
 8008ec8:	0800c494 	.word	0x0800c494
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	007a1200 	.word	0x007a1200
 8008ed4:	01e84800 	.word	0x01e84800
 8008ed8:	0800c4b8 	.word	0x0800c4b8
 8008edc:	003d0900 	.word	0x003d0900
 8008ee0:	00f42400 	.word	0x00f42400

08008ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	d00a      	beq.n	8008f0c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	6812      	ldr	r2, [r2, #0]
 8008efe:	6852      	ldr	r2, [r2, #4]
 8008f00:	4945      	ldr	r1, [pc, #276]	; (8009018 <UART_AdvFeatureConfig+0x134>)
 8008f02:	4011      	ands	r1, r2
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	2202      	movs	r2, #2
 8008f12:	4013      	ands	r3, r2
 8008f14:	d00a      	beq.n	8008f2c <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6812      	ldr	r2, [r2, #0]
 8008f1e:	6852      	ldr	r2, [r2, #4]
 8008f20:	493e      	ldr	r1, [pc, #248]	; (800901c <UART_AdvFeatureConfig+0x138>)
 8008f22:	4011      	ands	r1, r2
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	2204      	movs	r2, #4
 8008f32:	4013      	ands	r3, r2
 8008f34:	d00a      	beq.n	8008f4c <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	6812      	ldr	r2, [r2, #0]
 8008f3e:	6852      	ldr	r2, [r2, #4]
 8008f40:	4937      	ldr	r1, [pc, #220]	; (8009020 <UART_AdvFeatureConfig+0x13c>)
 8008f42:	4011      	ands	r1, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	2208      	movs	r2, #8
 8008f52:	4013      	ands	r3, r2
 8008f54:	d00a      	beq.n	8008f6c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6812      	ldr	r2, [r2, #0]
 8008f5e:	6852      	ldr	r2, [r2, #4]
 8008f60:	4930      	ldr	r1, [pc, #192]	; (8009024 <UART_AdvFeatureConfig+0x140>)
 8008f62:	4011      	ands	r1, r2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	2210      	movs	r2, #16
 8008f72:	4013      	ands	r3, r2
 8008f74:	d00a      	beq.n	8008f8c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6812      	ldr	r2, [r2, #0]
 8008f7e:	6892      	ldr	r2, [r2, #8]
 8008f80:	4929      	ldr	r1, [pc, #164]	; (8009028 <UART_AdvFeatureConfig+0x144>)
 8008f82:	4011      	ands	r1, r2
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	2220      	movs	r2, #32
 8008f92:	4013      	ands	r3, r2
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6812      	ldr	r2, [r2, #0]
 8008f9e:	6892      	ldr	r2, [r2, #8]
 8008fa0:	4922      	ldr	r1, [pc, #136]	; (800902c <UART_AdvFeatureConfig+0x148>)
 8008fa2:	4011      	ands	r1, r2
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	2240      	movs	r2, #64	; 0x40
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	d01b      	beq.n	8008fee <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6812      	ldr	r2, [r2, #0]
 8008fbe:	6852      	ldr	r2, [r2, #4]
 8008fc0:	491b      	ldr	r1, [pc, #108]	; (8009030 <UART_AdvFeatureConfig+0x14c>)
 8008fc2:	4011      	ands	r1, r2
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fd0:	2380      	movs	r3, #128	; 0x80
 8008fd2:	035b      	lsls	r3, r3, #13
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d10a      	bne.n	8008fee <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	6852      	ldr	r2, [r2, #4]
 8008fe2:	4914      	ldr	r1, [pc, #80]	; (8009034 <UART_AdvFeatureConfig+0x150>)
 8008fe4:	4011      	ands	r1, r2
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008fea:	430a      	orrs	r2, r1
 8008fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	2280      	movs	r2, #128	; 0x80
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	d00a      	beq.n	800900e <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6812      	ldr	r2, [r2, #0]
 8009000:	6852      	ldr	r2, [r2, #4]
 8009002:	490d      	ldr	r1, [pc, #52]	; (8009038 <UART_AdvFeatureConfig+0x154>)
 8009004:	4011      	ands	r1, r2
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800900a:	430a      	orrs	r2, r1
 800900c:	605a      	str	r2, [r3, #4]
  }
}
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	46bd      	mov	sp, r7
 8009012:	b002      	add	sp, #8
 8009014:	bd80      	pop	{r7, pc}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	fffdffff 	.word	0xfffdffff
 800901c:	fffeffff 	.word	0xfffeffff
 8009020:	fffbffff 	.word	0xfffbffff
 8009024:	ffff7fff 	.word	0xffff7fff
 8009028:	ffffefff 	.word	0xffffefff
 800902c:	ffffdfff 	.word	0xffffdfff
 8009030:	ffefffff 	.word	0xffefffff
 8009034:	ff9fffff 	.word	0xff9fffff
 8009038:	fff7ffff 	.word	0xfff7ffff

0800903c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af02      	add	r7, sp, #8
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800904e:	f7fc f95b 	bl	8005308 <HAL_GetTick>
 8009052:	0003      	movs	r3, r0
 8009054:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2208      	movs	r2, #8
 800905e:	4013      	ands	r3, r2
 8009060:	2b08      	cmp	r3, #8
 8009062:	d10d      	bne.n	8009080 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	2380      	movs	r3, #128	; 0x80
 8009068:	0399      	lsls	r1, r3, #14
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4b17      	ldr	r3, [pc, #92]	; (80090cc <UART_CheckIdleState+0x90>)
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	0013      	movs	r3, r2
 8009072:	2200      	movs	r2, #0
 8009074:	f000 f82c 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 8009078:	1e03      	subs	r3, r0, #0
 800907a:	d001      	beq.n	8009080 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e021      	b.n	80090c4 <UART_CheckIdleState+0x88>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2204      	movs	r2, #4
 8009088:	4013      	ands	r3, r2
 800908a:	2b04      	cmp	r3, #4
 800908c:	d10d      	bne.n	80090aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	2380      	movs	r3, #128	; 0x80
 8009092:	03d9      	lsls	r1, r3, #15
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	4b0d      	ldr	r3, [pc, #52]	; (80090cc <UART_CheckIdleState+0x90>)
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	0013      	movs	r3, r2
 800909c:	2200      	movs	r2, #0
 800909e:	f000 f817 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 80090a2:	1e03      	subs	r3, r0, #0
 80090a4:	d001      	beq.n	80090aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e00c      	b.n	80090c4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2269      	movs	r2, #105	; 0x69
 80090ae:	2120      	movs	r1, #32
 80090b0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	226a      	movs	r2, #106	; 0x6a
 80090b6:	2120      	movs	r1, #32
 80090b8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2268      	movs	r2, #104	; 0x68
 80090be:	2100      	movs	r1, #0
 80090c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	0018      	movs	r0, r3
 80090c6:	46bd      	mov	sp, r7
 80090c8:	b004      	add	sp, #16
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	01ffffff 	.word	0x01ffffff

080090d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	603b      	str	r3, [r7, #0]
 80090dc:	1dfb      	adds	r3, r7, #7
 80090de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090e0:	e02b      	b.n	800913a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	3301      	adds	r3, #1
 80090e6:	d028      	beq.n	800913a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d007      	beq.n	80090fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80090ee:	f7fc f90b 	bl	8005308 <HAL_GetTick>
 80090f2:	0002      	movs	r2, r0
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d91d      	bls.n	800913a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	6812      	ldr	r2, [r2, #0]
 8009106:	6812      	ldr	r2, [r2, #0]
 8009108:	4916      	ldr	r1, [pc, #88]	; (8009164 <UART_WaitOnFlagUntilTimeout+0x94>)
 800910a:	400a      	ands	r2, r1
 800910c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	6812      	ldr	r2, [r2, #0]
 8009116:	6892      	ldr	r2, [r2, #8]
 8009118:	2101      	movs	r1, #1
 800911a:	438a      	bics	r2, r1
 800911c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2269      	movs	r2, #105	; 0x69
 8009122:	2120      	movs	r1, #32
 8009124:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	226a      	movs	r2, #106	; 0x6a
 800912a:	2120      	movs	r1, #32
 800912c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2268      	movs	r2, #104	; 0x68
 8009132:	2100      	movs	r1, #0
 8009134:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e00f      	b.n	800915a <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	401a      	ands	r2, r3
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	425a      	negs	r2, r3
 800914a:	4153      	adcs	r3, r2
 800914c:	b2db      	uxtb	r3, r3
 800914e:	001a      	movs	r2, r3
 8009150:	1dfb      	adds	r3, r7, #7
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d0c4      	beq.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	0018      	movs	r0, r3
 800915c:	46bd      	mov	sp, r7
 800915e:	b004      	add	sp, #16
 8009160:	bd80      	pop	{r7, pc}
 8009162:	46c0      	nop			; (mov r8, r8)
 8009164:	fffffe5f 	.word	0xfffffe5f

08009168 <DelayMs>:
/* Includes ------------------------------------------------------------------*/
#include "hw.h"
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  HW_RTC_DelayMs( ms );
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	0018      	movs	r0, r3
 8009174:	f000 fdf4 	bl	8009d60 <HW_RTC_DelayMs>

}
 8009178:	46c0      	nop			; (mov r8, r8)
 800917a:	46bd      	mov	sp, r7
 800917c:	b002      	add	sp, #8
 800917e:	bd80      	pop	{r7, pc}

08009180 <Delay>:

void Delay( float s )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
    DelayMs( (uint32_t) (s * 1000.0f) );
 8009188:	4907      	ldr	r1, [pc, #28]	; (80091a8 <Delay+0x28>)
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7f7 fa86 	bl	800069c <__aeabi_fmul>
 8009190:	1c03      	adds	r3, r0, #0
 8009192:	1c18      	adds	r0, r3, #0
 8009194:	f7f7 f98c 	bl	80004b0 <__aeabi_f2uiz>
 8009198:	0003      	movs	r3, r0
 800919a:	0018      	movs	r0, r3
 800919c:	f7ff ffe4 	bl	8009168 <DelayMs>
}
 80091a0:	46c0      	nop			; (mov r8, r8)
 80091a2:	46bd      	mov	sp, r7
 80091a4:	b002      	add	sp, #8
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	447a0000 	.word	0x447a0000

080091ac <LowPower_Disable>:
 * \brief API to set flag allowing power mode
 *
 * \param [IN] enum e_LOW_POWER_State_Id_t  
 */
void LowPower_Disable( e_LOW_POWER_State_Id_t state )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	0002      	movs	r2, r0
 80091b4:	1dfb      	adds	r3, r7, #7
 80091b6:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091b8:	f3ef 8310 	mrs	r3, PRIMASK
 80091bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80091be:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 80091c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091c2:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  LowPower_State |= state;
 80091c4:	1dfb      	adds	r3, r7, #7
 80091c6:	781a      	ldrb	r2, [r3, #0]
 80091c8:	4b06      	ldr	r3, [pc, #24]	; (80091e4 <LowPower_Disable+0x38>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	431a      	orrs	r2, r3
 80091ce:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <LowPower_Disable+0x38>)
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	613b      	str	r3, [r7, #16]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK( );
}
 80091dc:	46c0      	nop			; (mov r8, r8)
 80091de:	46bd      	mov	sp, r7
 80091e0:	b006      	add	sp, #24
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	200001c8 	.word	0x200001c8

080091e8 <LowPower_Enable>:
 * \brief API to reset flag allowing power mode
 *
 * \param [IN] enum e_LOW_POWER_State_Id_t 
 */
void LowPower_Enable( e_LOW_POWER_State_Id_t state )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	0002      	movs	r2, r0
 80091f0:	1dfb      	adds	r3, r7, #7
 80091f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091f4:	f3ef 8310 	mrs	r3, PRIMASK
 80091f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80091fa:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 80091fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091fe:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  LowPower_State &= ~state;
 8009200:	1dfb      	adds	r3, r7, #7
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	43db      	mvns	r3, r3
 8009206:	001a      	movs	r2, r3
 8009208:	4b06      	ldr	r3, [pc, #24]	; (8009224 <LowPower_Enable+0x3c>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	401a      	ands	r2, r3
 800920e:	4b05      	ldr	r3, [pc, #20]	; (8009224 <LowPower_Enable+0x3c>)
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f383 8810 	msr	PRIMASK, r3
  
  RESTORE_PRIMASK( );
}
 800921c:	46c0      	nop			; (mov r8, r8)
 800921e:	46bd      	mov	sp, r7
 8009220:	b006      	add	sp, #24
 8009222:	bd80      	pop	{r7, pc}
 8009224:	200001c8 	.word	0x200001c8

08009228 <LowPower_GetState>:
 * \note When flag is 0, low power mode is allowed
 * \param [IN] state
 * \retval flag state 
 */
uint32_t LowPower_GetState( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  return LowPower_State;
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <LowPower_GetState+0x10>)
 800922e:	681b      	ldr	r3, [r3, #0]
}
 8009230:	0018      	movs	r0, r3
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	200001c8 	.word	0x200001c8

0800923c <LowPower_Handler>:
 * @param  None
 * @retval None
 */

void LowPower_Handler( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  DBG_GPIO_RST(GPIOB, GPIO_PIN_15);
  
  DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
  
  if ( LowPower_State == 0 )
 8009240:	4b07      	ldr	r3, [pc, #28]	; (8009260 <LowPower_Handler+0x24>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d106      	bne.n	8009256 <LowPower_Handler+0x1a>
  {    
    
    DBG_PRINTF_CRITICAL("dz\n\r");
    
    HW_EnterStopMode( );
 8009248:	f001 fdfe 	bl	800ae48 <HW_EnterStopMode>
    
    /* mcu dependent. to be implemented by user*/
    HW_ExitStopMode();
 800924c:	f001 fe1c 	bl	800ae88 <HW_ExitStopMode>
    
    DBG_GPIO_SET(GPIOB, GPIO_PIN_15);
    
    HW_RTC_setMcuWakeUpTime( );
 8009250:	f000 fc7c 	bl	8009b4c <HW_RTC_setMcuWakeUpTime>
    HW_EnterSleepMode( );

    DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
  }
  
}
 8009254:	e001      	b.n	800925a <LowPower_Handler+0x1e>
    HW_EnterSleepMode( );
 8009256:	f001 fe55 	bl	800af04 <HW_EnterSleepMode>
}
 800925a:	46c0      	nop			; (mov r8, r8)
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	200001c8 	.word	0x200001c8

08009264 <TimerInit>:
static bool TimerExists( TimerEvent_t *obj );



void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	605a      	str	r2, [r3, #4]
  obj->IsRunning = false;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	721a      	strb	r2, [r3, #8]
  obj->Callback = callback;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	60da      	str	r2, [r3, #12]
  obj->Next = NULL;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	611a      	str	r2, [r3, #16]
}
 800928c:	46c0      	nop			; (mov r8, r8)
 800928e:	46bd      	mov	sp, r7
 8009290:	b002      	add	sp, #8
 8009292:	bd80      	pop	{r7, pc}

08009294 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80092a0:	f3ef 8310 	mrs	r3, PRIMASK
 80092a4:	617b      	str	r3, [r7, #20]
  return(result);
 80092a6:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 80092a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80092aa:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d005      	beq.n	80092be <TimerStart+0x2a>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	0018      	movs	r0, r3
 80092b6:	f000 f97b 	bl	80095b0 <TimerExists>
 80092ba:	1e03      	subs	r3, r0, #0
 80092bc:	d005      	beq.n	80092ca <TimerStart+0x36>
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 80092c8:	e030      	b.n	800932c <TimerStart+0x98>
  }
  obj->Timestamp = obj->ReloadValue;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	601a      	str	r2, [r3, #0]
  obj->IsRunning = false;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == NULL )
 80092d8:	4b16      	ldr	r3, [pc, #88]	; (8009334 <TimerStart+0xa0>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d106      	bne.n	80092ee <TimerStart+0x5a>
  {
    HW_RTC_SetTimerContext( );
 80092e0:	f000 fd5e 	bl	8009da0 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	0018      	movs	r0, r3
 80092e8:	f000 f854 	bl	8009394 <TimerInsertNewHeadTimer>
 80092ec:	e019      	b.n	8009322 <TimerStart+0x8e>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 80092ee:	f000 fce7 	bl	8009cc0 <HW_RTC_GetTimerElapsedTime>
 80092f2:	0003      	movs	r3, r0
 80092f4:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	18d2      	adds	r2, r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <TimerStart+0xa0>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d204      	bcs.n	800931a <TimerStart+0x86>
    {
      TimerInsertNewHeadTimer( obj);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	0018      	movs	r0, r3
 8009314:	f000 f83e 	bl	8009394 <TimerInsertNewHeadTimer>
 8009318:	e003      	b.n	8009322 <TimerStart+0x8e>
    }
    else
    {
      TimerInsertTimer( obj);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	0018      	movs	r0, r3
 800931e:	f000 f80b 	bl	8009338 <TimerInsertTimer>
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 800932c:	46bd      	mov	sp, r7
 800932e:	b008      	add	sp, #32
 8009330:	bd80      	pop	{r7, pc}
 8009332:	46c0      	nop			; (mov r8, r8)
 8009334:	200001cc 	.word	0x200001cc

08009338 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8009340:	4b13      	ldr	r3, [pc, #76]	; (8009390 <TimerInsertTimer+0x58>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 8009346:	4b12      	ldr	r3, [pc, #72]	; (8009390 <TimerInsertTimer+0x58>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800934e:	e012      	b.n	8009376 <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d905      	bls.n	8009368 <TimerInsertTimer+0x30>
    {
        cur = next;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	60bb      	str	r3, [r7, #8]
 8009366:	e006      	b.n	8009376 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	611a      	str	r2, [r3, #16]
        obj->Next = next;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	611a      	str	r2, [r3, #16]
        return;
 8009374:	e009      	b.n	800938a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e8      	bne.n	8009350 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	611a      	str	r2, [r3, #16]
}
 800938a:	46bd      	mov	sp, r7
 800938c:	b004      	add	sp, #16
 800938e:	bd80      	pop	{r7, pc}
 8009390:	200001cc 	.word	0x200001cc

08009394 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 800939c:	4b0b      	ldr	r3, [pc, #44]	; (80093cc <TimerInsertNewHeadTimer+0x38>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsRunning = false;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	721a      	strb	r2, [r3, #8]
  }

  obj->Next = cur;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	611a      	str	r2, [r3, #16]
  TimerListHead = obj;
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <TimerInsertNewHeadTimer+0x38>)
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80093ba:	4b04      	ldr	r3, [pc, #16]	; (80093cc <TimerInsertNewHeadTimer+0x38>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	0018      	movs	r0, r3
 80093c0:	f000 f937 	bl	8009632 <TimerSetTimeout>
}
 80093c4:	46c0      	nop			; (mov r8, r8)
 80093c6:	46bd      	mov	sp, r7
 80093c8:	b004      	add	sp, #16
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	200001cc 	.word	0x200001cc

080093d0 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 80093d0:	b590      	push	{r4, r7, lr}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
  TimerEvent_t* cur;
  TimerEvent_t* next;
  

  
  uint32_t old =  HW_RTC_GetTimerContext( );
 80093d6:	f000 fcf9 	bl	8009dcc <HW_RTC_GetTimerContext>
 80093da:	0003      	movs	r3, r0
 80093dc:	613b      	str	r3, [r7, #16]
  uint32_t now =  HW_RTC_SetTimerContext( );
 80093de:	f000 fcdf 	bl	8009da0 <HW_RTC_SetTimerContext>
 80093e2:	0003      	movs	r3, r0
 80093e4:	60fb      	str	r3, [r7, #12]
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	60bb      	str	r3, [r7, #8]
  
  /* update timeStamp based upon new Time Reference*/
  /* beacuse delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 80093ee:	4b33      	ldr	r3, [pc, #204]	; (80094bc <TimerIrqHandler+0xec>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01c      	beq.n	8009430 <TimerIrqHandler+0x60>
  {
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 80093f6:	4b31      	ldr	r3, [pc, #196]	; (80094bc <TimerIrqHandler+0xec>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	e014      	b.n	8009428 <TimerIrqHandler+0x58>
    {
      next =cur->Next;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	607b      	str	r3, [r7, #4]
      if (next->Timestamp > DeltaContext)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	429a      	cmp	r2, r3
 800940c:	d906      	bls.n	800941c <TimerIrqHandler+0x4c>
      {
        next->Timestamp -= DeltaContext;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	1ad2      	subs	r2, r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	e002      	b.n	8009422 <TimerIrqHandler+0x52>
      }
      else
      {
        next->Timestamp = 0 ;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e6      	bne.n	80093fe <TimerIrqHandler+0x2e>
      }
    }
  }
  
  /* execute imediately the alarm callback */
  if ( TimerListHead != NULL )
 8009430:	4b22      	ldr	r3, [pc, #136]	; (80094bc <TimerIrqHandler+0xec>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d020      	beq.n	800947a <TimerIrqHandler+0xaa>
  {
    cur = TimerListHead;
 8009438:	4b20      	ldr	r3, [pc, #128]	; (80094bc <TimerIrqHandler+0xec>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	617b      	str	r3, [r7, #20]
    TimerListHead = TimerListHead->Next;
 800943e:	4b1f      	ldr	r3, [pc, #124]	; (80094bc <TimerIrqHandler+0xec>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	691a      	ldr	r2, [r3, #16]
 8009444:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <TimerIrqHandler+0xec>)
 8009446:	601a      	str	r2, [r3, #0]
    exec_cb( cur->Callback );
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d100      	bne.n	8009452 <TimerIrqHandler+0x82>
 8009450:	e7fe      	b.n	8009450 <TimerIrqHandler+0x80>
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	4798      	blx	r3
  }


  // remove all the expired object from the list
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8009458:	e00f      	b.n	800947a <TimerIrqHandler+0xaa>
  {
   cur = TimerListHead;
 800945a:	4b18      	ldr	r3, [pc, #96]	; (80094bc <TimerIrqHandler+0xec>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	617b      	str	r3, [r7, #20]
   TimerListHead = TimerListHead->Next;
 8009460:	4b16      	ldr	r3, [pc, #88]	; (80094bc <TimerIrqHandler+0xec>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691a      	ldr	r2, [r3, #16]
 8009466:	4b15      	ldr	r3, [pc, #84]	; (80094bc <TimerIrqHandler+0xec>)
 8009468:	601a      	str	r2, [r3, #0]
   exec_cb( cur->Callback );
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d100      	bne.n	8009474 <TimerIrqHandler+0xa4>
 8009472:	e7fe      	b.n	8009472 <TimerIrqHandler+0xa2>
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800947a:	4b10      	ldr	r3, [pc, #64]	; (80094bc <TimerIrqHandler+0xec>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <TimerIrqHandler+0xc2>
 8009482:	4b0e      	ldr	r3, [pc, #56]	; (80094bc <TimerIrqHandler+0xec>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681c      	ldr	r4, [r3, #0]
 8009488:	f000 fc1a 	bl	8009cc0 <HW_RTC_GetTimerElapsedTime>
 800948c:	0003      	movs	r3, r0
 800948e:	429c      	cmp	r4, r3
 8009490:	d3e3      	bcc.n	800945a <TimerIrqHandler+0x8a>
  }

  /* start the next TimerListHead if it exists AND NOT running */
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 8009492:	4b0a      	ldr	r3, [pc, #40]	; (80094bc <TimerIrqHandler+0xec>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00c      	beq.n	80094b4 <TimerIrqHandler+0xe4>
 800949a:	4b08      	ldr	r3, [pc, #32]	; (80094bc <TimerIrqHandler+0xec>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	7a1b      	ldrb	r3, [r3, #8]
 80094a0:	2201      	movs	r2, #1
 80094a2:	4053      	eors	r3, r2
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <TimerIrqHandler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 80094aa:	4b04      	ldr	r3, [pc, #16]	; (80094bc <TimerIrqHandler+0xec>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	0018      	movs	r0, r3
 80094b0:	f000 f8bf 	bl	8009632 <TimerSetTimeout>
  }
}
 80094b4:	46c0      	nop			; (mov r8, r8)
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b007      	add	sp, #28
 80094ba:	bd90      	pop	{r4, r7, pc}
 80094bc:	200001cc 	.word	0x200001cc

080094c0 <TimerStop>:

void TimerStop( TimerEvent_t *obj ) 
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80094c8:	f3ef 8310 	mrs	r3, PRIMASK
 80094cc:	613b      	str	r3, [r7, #16]
  return(result);
 80094ce:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 80094d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094d2:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 80094d4:	4b35      	ldr	r3, [pc, #212]	; (80095ac <TimerStop+0xec>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 80094da:	4b34      	ldr	r3, [pc, #208]	; (80095ac <TimerStop+0xec>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80094e0:	4b32      	ldr	r3, [pc, #200]	; (80095ac <TimerStop+0xec>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <TimerStop+0x2e>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d105      	bne.n	80094fa <TimerStop+0x3a>
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 80094f8:	e054      	b.n	80095a4 <TimerStop+0xe4>
  }

  if( TimerListHead == obj ) // Stop the Head                  
 80094fa:	4b2c      	ldr	r3, [pc, #176]	; (80095ac <TimerStop+0xec>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d147      	bne.n	8009594 <TimerStop+0xd4>
  {
    if( TimerListHead->IsRunning == true ) // The head is already running 
 8009504:	4b29      	ldr	r3, [pc, #164]	; (80095ac <TimerStop+0xec>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	7a1b      	ldrb	r3, [r3, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d019      	beq.n	8009542 <TimerStop+0x82>
    {    
      if( TimerListHead->Next != NULL )
 800950e:	4b27      	ldr	r3, [pc, #156]	; (80095ac <TimerStop+0xec>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00e      	beq.n	8009536 <TimerStop+0x76>
      {
        TimerListHead->IsRunning = false;
 8009518:	4b24      	ldr	r3, [pc, #144]	; (80095ac <TimerStop+0xec>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2200      	movs	r2, #0
 800951e:	721a      	strb	r2, [r3, #8]
        TimerListHead = TimerListHead->Next;
 8009520:	4b22      	ldr	r3, [pc, #136]	; (80095ac <TimerStop+0xec>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	691a      	ldr	r2, [r3, #16]
 8009526:	4b21      	ldr	r3, [pc, #132]	; (80095ac <TimerStop+0xec>)
 8009528:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 800952a:	4b20      	ldr	r3, [pc, #128]	; (80095ac <TimerStop+0xec>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	0018      	movs	r0, r3
 8009530:	f000 f87f 	bl	8009632 <TimerSetTimeout>
 8009534:	e031      	b.n	800959a <TimerStop+0xda>
      }
      else
      {
        HW_RTC_StopAlarm( );
 8009536:	f000 fbeb 	bl	8009d10 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 800953a:	4b1c      	ldr	r3, [pc, #112]	; (80095ac <TimerStop+0xec>)
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	e02b      	b.n	800959a <TimerStop+0xda>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 8009542:	4b1a      	ldr	r3, [pc, #104]	; (80095ac <TimerStop+0xec>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d005      	beq.n	8009558 <TimerStop+0x98>
      {
        TimerListHead = TimerListHead->Next;
 800954c:	4b17      	ldr	r3, [pc, #92]	; (80095ac <TimerStop+0xec>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	4b16      	ldr	r3, [pc, #88]	; (80095ac <TimerStop+0xec>)
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	e020      	b.n	800959a <TimerStop+0xda>
      }
      else
      {
        TimerListHead = NULL;
 8009558:	4b14      	ldr	r3, [pc, #80]	; (80095ac <TimerStop+0xec>)
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e01c      	b.n	800959a <TimerStop+0xda>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d110      	bne.n	800958a <TimerStop+0xca>
      {
        if( cur->Next != NULL )
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d006      	beq.n	800957e <TimerStop+0xbe>
        {
          cur = cur->Next;
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	611a      	str	r2, [r3, #16]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 800957c:	e00d      	b.n	800959a <TimerStop+0xda>
          cur = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	611a      	str	r2, [r3, #16]
        break;
 8009588:	e007      	b.n	800959a <TimerStop+0xda>
      }
      else
      {
        prev = cur;
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e2      	bne.n	8009560 <TimerStop+0xa0>
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	60bb      	str	r3, [r7, #8]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 80095a4:	46bd      	mov	sp, r7
 80095a6:	b008      	add	sp, #32
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	46c0      	nop			; (mov r8, r8)
 80095ac:	200001cc 	.word	0x200001cc

080095b0 <TimerExists>:
  
static bool TimerExists( TimerEvent_t *obj )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80095b8:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <TimerExists+0x34>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80095be:	e008      	b.n	80095d2 <TimerExists+0x22>
  {
    if( cur == obj )
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d101      	bne.n	80095cc <TimerExists+0x1c>
    {
      return true;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e006      	b.n	80095da <TimerExists+0x2a>
    }
    cur = cur->Next;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1f3      	bne.n	80095c0 <TimerExists+0x10>
  }
  return false;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	0018      	movs	r0, r3
 80095dc:	46bd      	mov	sp, r7
 80095de:	b004      	add	sp, #16
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	200001cc 	.word	0x200001cc

080095e8 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	0018      	movs	r0, r3
 80095fa:	f000 fb19 	bl	8009c30 <HW_RTC_ms2Tick>
 80095fe:	0003      	movs	r3, r0
 8009600:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	0018      	movs	r0, r3
 8009606:	f7ff ff5b 	bl	80094c0 <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 800960a:	f000 fb0b 	bl	8009c24 <HW_RTC_GetMinimumTimeout>
 800960e:	0003      	movs	r3, r0
 8009610:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	429a      	cmp	r2, r3
 8009618:	d201      	bcs.n	800961e <TimerSetValue+0x36>
  {
    ticks = minValue;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	605a      	str	r2, [r3, #4]
}
 800962a:	46c0      	nop			; (mov r8, r8)
 800962c:	46bd      	mov	sp, r7
 800962e:	b004      	add	sp, #16
 8009630:	bd80      	pop	{r7, pc}

08009632 <TimerSetTimeout>:
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8009632:	b590      	push	{r4, r7, lr}
 8009634:	b085      	sub	sp, #20
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800963a:	f000 faf3 	bl	8009c24 <HW_RTC_GetMinimumTimeout>
 800963e:	0003      	movs	r3, r0
 8009640:	60fb      	str	r3, [r7, #12]
  obj->IsRunning = true; 
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	721a      	strb	r2, [r3, #8]

  //in case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681c      	ldr	r4, [r3, #0]
 800964c:	f000 fb38 	bl	8009cc0 <HW_RTC_GetTimerElapsedTime>
 8009650:	0002      	movs	r2, r0
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	18d3      	adds	r3, r2, r3
 8009656:	429c      	cmp	r4, r3
 8009658:	d206      	bcs.n	8009668 <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 800965a:	f000 fb31 	bl	8009cc0 <HW_RTC_GetTimerElapsedTime>
 800965e:	0002      	movs	r2, r0
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	18d2      	adds	r2, r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	0018      	movs	r0, r3
 800966e:	f000 faf7 	bl	8009c60 <HW_RTC_SetAlarm>
}
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	46bd      	mov	sp, r7
 8009676:	b005      	add	sp, #20
 8009678:	bd90      	pop	{r4, r7, pc}

0800967a <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	1dbb      	adds	r3, r7, #6
 8009686:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8009688:	e007      	b.n	800969a <memcpy1+0x20>
    {
        *dst++ = *src++;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	60fa      	str	r2, [r7, #12]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	1c51      	adds	r1, r2, #1
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	7812      	ldrb	r2, [r2, #0]
 8009698:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800969a:	1dbb      	adds	r3, r7, #6
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	1dba      	adds	r2, r7, #6
 80096a0:	1e59      	subs	r1, r3, #1
 80096a2:	8011      	strh	r1, [r2, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1f0      	bne.n	800968a <memcpy1+0x10>
    }
}
 80096a8:	46c0      	nop			; (mov r8, r8)
 80096aa:	46bd      	mov	sp, r7
 80096ac:	b004      	add	sp, #16
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <DBG_Init>:
  * @brief Initializes the debug
  * @param None
  * @retval None
  */
void DBG_Init( void )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
  HAL_DBGMCU_EnableDBGStandbyMode( );
  
#else /* DEBUG */
  /* sw interface off*/
  GPIO_InitTypeDef GPIO_InitStructure; 
  GPIO_InitStructure.Mode   = GPIO_MODE_ANALOG;
 80096b6:	1d3b      	adds	r3, r7, #4
 80096b8:	2203      	movs	r2, #3
 80096ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull   = GPIO_NOPULL;
 80096bc:	1d3b      	adds	r3, r7, #4
 80096be:	2200      	movs	r2, #0
 80096c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 80096c2:	1d3b      	adds	r3, r7, #4
 80096c4:	22c0      	movs	r2, #192	; 0xc0
 80096c6:	01d2      	lsls	r2, r2, #7
 80096c8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80096ca:	1d3a      	adds	r2, r7, #4
 80096cc:	23a0      	movs	r3, #160	; 0xa0
 80096ce:	05db      	lsls	r3, r3, #23
 80096d0:	0011      	movs	r1, r2
 80096d2:	0018      	movs	r0, r3
 80096d4:	f7fc f8f0 	bl	80058b8 <HAL_GPIO_Init>
  
  __HAL_RCC_DBGMCU_CLK_ENABLE( );
 80096d8:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <DBG_Init+0x58>)
 80096da:	4a0b      	ldr	r2, [pc, #44]	; (8009708 <DBG_Init+0x58>)
 80096dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80096de:	2180      	movs	r1, #128	; 0x80
 80096e0:	03c9      	lsls	r1, r1, #15
 80096e2:	430a      	orrs	r2, r1
 80096e4:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode( );
 80096e6:	f7fb fe19 	bl	800531c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode( );
 80096ea:	f7fb fe25 	bl	8005338 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode( );
 80096ee:	f7fb fe31 	bl	8005354 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE( );
 80096f2:	4b05      	ldr	r3, [pc, #20]	; (8009708 <DBG_Init+0x58>)
 80096f4:	4a04      	ldr	r2, [pc, #16]	; (8009708 <DBG_Init+0x58>)
 80096f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80096f8:	4904      	ldr	r1, [pc, #16]	; (800970c <DBG_Init+0x5c>)
 80096fa:	400a      	ands	r2, r1
 80096fc:	635a      	str	r2, [r3, #52]	; 0x34
#endif
}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	46bd      	mov	sp, r7
 8009702:	b006      	add	sp, #24
 8009704:	bd80      	pop	{r7, pc}
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	40021000 	.word	0x40021000
 800970c:	ffbfffff 	.word	0xffbfffff

08009710 <Error_Handler>:
  * @brief Error_Handler
  * @param None
  * @retval None
  */
void Error_Handler(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
  DBG_PRINTF("Error_Handler\n");
  while(1);
 8009714:	e7fe      	b.n	8009714 <Error_Handler+0x4>
	...

08009718 <SPI_Config>:
#include "hw.h"

SPI_HandleTypeDef hspi2;

void SPI_Config()
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __SPI2_CLK_ENABLE();
 800971e:	4b21      	ldr	r3, [pc, #132]	; (80097a4 <SPI_Config+0x8c>)
 8009720:	4a20      	ldr	r2, [pc, #128]	; (80097a4 <SPI_Config+0x8c>)
 8009722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009724:	2180      	movs	r1, #128	; 0x80
 8009726:	01c9      	lsls	r1, r1, #7
 8009728:	430a      	orrs	r2, r1
 800972a:	639a      	str	r2, [r3, #56]	; 0x38
	__GPIOB_CLK_ENABLE();
 800972c:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <SPI_Config+0x8c>)
 800972e:	4a1d      	ldr	r2, [pc, #116]	; (80097a4 <SPI_Config+0x8c>)
 8009730:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009732:	2102      	movs	r1, #2
 8009734:	430a      	orrs	r2, r1
 8009736:	62da      	str	r2, [r3, #44]	; 0x2c
 8009738:	4b1a      	ldr	r3, [pc, #104]	; (80097a4 <SPI_Config+0x8c>)
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	2202      	movs	r2, #2
 800973e:	4013      	ands	r3, r2
 8009740:	603b      	str	r3, [r7, #0]
 8009742:	683b      	ldr	r3, [r7, #0]
	 PB15     ------> SPI2_MOSI
	 PB14     ------> SPI2_MISO
	 PB13     ------> SPI2_SCK
	 PB12     ------> SPI2_NSS
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_14 |GPIO_PIN_13;
 8009744:	1d3b      	adds	r3, r7, #4
 8009746:	22e0      	movs	r2, #224	; 0xe0
 8009748:	0212      	lsls	r2, r2, #8
 800974a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800974c:	1d3b      	adds	r3, r7, #4
 800974e:	2202      	movs	r2, #2
 8009750:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN; //NOPULL
 8009752:	1d3b      	adds	r3, r7, #4
 8009754:	2202      	movs	r2, #2
 8009756:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8009758:	1d3b      	adds	r3, r7, #4
 800975a:	2203      	movs	r2, #3
 800975c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800975e:	1d3b      	adds	r3, r7, #4
 8009760:	2200      	movs	r2, #0
 8009762:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009764:	1d3b      	adds	r3, r7, #4
 8009766:	4a10      	ldr	r2, [pc, #64]	; (80097a8 <SPI_Config+0x90>)
 8009768:	0019      	movs	r1, r3
 800976a:	0010      	movs	r0, r2
 800976c:	f7fc f8a4 	bl	80058b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin  = GPIO_PIN_12;
 8009770:	1d3b      	adds	r3, r7, #4
 8009772:	2280      	movs	r2, #128	; 0x80
 8009774:	0152      	lsls	r2, r2, #5
 8009776:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009778:	1d3b      	adds	r3, r7, #4
 800977a:	2201      	movs	r2, #1
 800977c:	605a      	str	r2, [r3, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800977e:	1d3b      	adds	r3, r7, #4
 8009780:	4a09      	ldr	r2, [pc, #36]	; (80097a8 <SPI_Config+0x90>)
 8009782:	0019      	movs	r1, r3
 8009784:	0010      	movs	r0, r2
 8009786:	f7fc f897 	bl	80058b8 <HAL_GPIO_Init>

	/* Peripheral interrupt init*/
	HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800978a:	2200      	movs	r2, #0
 800978c:	2100      	movs	r1, #0
 800978e:	201a      	movs	r0, #26
 8009790:	f7fc f83a 	bl	8005808 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8009794:	201a      	movs	r0, #26
 8009796:	f7fc f84d 	bl	8005834 <HAL_NVIC_EnableIRQ>
}
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	46bd      	mov	sp, r7
 800979e:	b006      	add	sp, #24
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	46c0      	nop			; (mov r8, r8)
 80097a4:	40021000 	.word	0x40021000
 80097a8:	50000400 	.word	0x50000400

080097ac <SPI_Init>:


void SPI_Init(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 80097b0:	4b15      	ldr	r3, [pc, #84]	; (8009808 <SPI_Init+0x5c>)
 80097b2:	4a16      	ldr	r2, [pc, #88]	; (800980c <SPI_Init+0x60>)
 80097b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <SPI_Init+0x5c>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	605a      	str	r2, [r3, #4]

  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80097bc:	4b12      	ldr	r3, [pc, #72]	; (8009808 <SPI_Init+0x5c>)
 80097be:	2238      	movs	r2, #56	; 0x38
 80097c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80097c2:	4b11      	ldr	r3, [pc, #68]	; (8009808 <SPI_Init+0x5c>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80097c8:	4b0f      	ldr	r3, [pc, #60]	; (8009808 <SPI_Init+0x5c>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80097ce:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <SPI_Init+0x5c>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80097d4:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <SPI_Init+0x5c>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80097da:	4b0b      	ldr	r3, [pc, #44]	; (8009808 <SPI_Init+0x5c>)
 80097dc:	220a      	movs	r2, #10
 80097de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80097e0:	4b09      	ldr	r3, [pc, #36]	; (8009808 <SPI_Init+0x5c>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80097e6:	4b08      	ldr	r3, [pc, #32]	; (8009808 <SPI_Init+0x5c>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.NSS = SPI_NSS_SOFT; //SPI_NSS_HARD_OUTPUT
 80097ec:	4b06      	ldr	r3, [pc, #24]	; (8009808 <SPI_Init+0x5c>)
 80097ee:	2280      	movs	r2, #128	; 0x80
 80097f0:	0092      	lsls	r2, r2, #2
 80097f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLED;
 80097f4:	4b04      	ldr	r3, [pc, #16]	; (8009808 <SPI_Init+0x5c>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_SPI_Init(&hspi2);
 80097fa:	4b03      	ldr	r3, [pc, #12]	; (8009808 <SPI_Init+0x5c>)
 80097fc:	0018      	movs	r0, r3
 80097fe:	f7fe fa69 	bl	8007cd4 <HAL_SPI_Init>
}
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	2000058c 	.word	0x2000058c
 800980c:	40003800 	.word	0x40003800

08009810 <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b08a      	sub	sp, #40	; 0x28
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	607a      	str	r2, [r7, #4]
 800981a:	230a      	movs	r3, #10
 800981c:	18fb      	adds	r3, r7, r3
 800981e:	1c0a      	adds	r2, r1, #0
 8009820:	801a      	strh	r2, [r3, #0]

  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4a30      	ldr	r2, [pc, #192]	; (80098e8 <HW_GPIO_Init+0xd8>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d01b      	beq.n	8009862 <HW_GPIO_Init+0x52>
 800982a:	4a2f      	ldr	r2, [pc, #188]	; (80098e8 <HW_GPIO_Init+0xd8>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d804      	bhi.n	800983a <HW_GPIO_Init+0x2a>
 8009830:	22a0      	movs	r2, #160	; 0xa0
 8009832:	05d2      	lsls	r2, r2, #23
 8009834:	4293      	cmp	r3, r2
 8009836:	d007      	beq.n	8009848 <HW_GPIO_Init+0x38>
 8009838:	e03a      	b.n	80098b0 <HW_GPIO_Init+0xa0>
 800983a:	4a2c      	ldr	r2, [pc, #176]	; (80098ec <HW_GPIO_Init+0xdc>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d01d      	beq.n	800987c <HW_GPIO_Init+0x6c>
 8009840:	4a2b      	ldr	r2, [pc, #172]	; (80098f0 <HW_GPIO_Init+0xe0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d027      	beq.n	8009896 <HW_GPIO_Init+0x86>
 8009846:	e033      	b.n	80098b0 <HW_GPIO_Init+0xa0>
 8009848:	4b2a      	ldr	r3, [pc, #168]	; (80098f4 <HW_GPIO_Init+0xe4>)
 800984a:	4a2a      	ldr	r2, [pc, #168]	; (80098f4 <HW_GPIO_Init+0xe4>)
 800984c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800984e:	2101      	movs	r1, #1
 8009850:	430a      	orrs	r2, r1
 8009852:	62da      	str	r2, [r3, #44]	; 0x2c
 8009854:	4b27      	ldr	r3, [pc, #156]	; (80098f4 <HW_GPIO_Init+0xe4>)
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	2201      	movs	r2, #1
 800985a:	4013      	ands	r3, r2
 800985c:	627b      	str	r3, [r7, #36]	; 0x24
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	e032      	b.n	80098c8 <HW_GPIO_Init+0xb8>
 8009862:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <HW_GPIO_Init+0xe4>)
 8009864:	4a23      	ldr	r2, [pc, #140]	; (80098f4 <HW_GPIO_Init+0xe4>)
 8009866:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009868:	2102      	movs	r1, #2
 800986a:	430a      	orrs	r2, r1
 800986c:	62da      	str	r2, [r3, #44]	; 0x2c
 800986e:	4b21      	ldr	r3, [pc, #132]	; (80098f4 <HW_GPIO_Init+0xe4>)
 8009870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009872:	2202      	movs	r2, #2
 8009874:	4013      	ands	r3, r2
 8009876:	623b      	str	r3, [r7, #32]
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	e025      	b.n	80098c8 <HW_GPIO_Init+0xb8>
 800987c:	4b1d      	ldr	r3, [pc, #116]	; (80098f4 <HW_GPIO_Init+0xe4>)
 800987e:	4a1d      	ldr	r2, [pc, #116]	; (80098f4 <HW_GPIO_Init+0xe4>)
 8009880:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009882:	2104      	movs	r1, #4
 8009884:	430a      	orrs	r2, r1
 8009886:	62da      	str	r2, [r3, #44]	; 0x2c
 8009888:	4b1a      	ldr	r3, [pc, #104]	; (80098f4 <HW_GPIO_Init+0xe4>)
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	2204      	movs	r2, #4
 800988e:	4013      	ands	r3, r2
 8009890:	61fb      	str	r3, [r7, #28]
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	e018      	b.n	80098c8 <HW_GPIO_Init+0xb8>
 8009896:	4b17      	ldr	r3, [pc, #92]	; (80098f4 <HW_GPIO_Init+0xe4>)
 8009898:	4a16      	ldr	r2, [pc, #88]	; (80098f4 <HW_GPIO_Init+0xe4>)
 800989a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800989c:	2108      	movs	r1, #8
 800989e:	430a      	orrs	r2, r1
 80098a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80098a2:	4b14      	ldr	r3, [pc, #80]	; (80098f4 <HW_GPIO_Init+0xe4>)
 80098a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a6:	2208      	movs	r2, #8
 80098a8:	4013      	ands	r3, r2
 80098aa:	61bb      	str	r3, [r7, #24]
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	e00b      	b.n	80098c8 <HW_GPIO_Init+0xb8>
 80098b0:	4b10      	ldr	r3, [pc, #64]	; (80098f4 <HW_GPIO_Init+0xe4>)
 80098b2:	4a10      	ldr	r2, [pc, #64]	; (80098f4 <HW_GPIO_Init+0xe4>)
 80098b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80098b6:	2180      	movs	r1, #128	; 0x80
 80098b8:	430a      	orrs	r2, r1
 80098ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80098bc:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <HW_GPIO_Init+0xe4>)
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	2280      	movs	r2, #128	; 0x80
 80098c2:	4013      	ands	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 80098c8:	230a      	movs	r3, #10
 80098ca:	18fb      	adds	r3, r7, r3
 80098cc:	881a      	ldrh	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	0011      	movs	r1, r2
 80098d8:	0018      	movs	r0, r3
 80098da:	f7fb ffed 	bl	80058b8 <HAL_GPIO_Init>
}
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	46bd      	mov	sp, r7
 80098e2:	b00a      	add	sp, #40	; 0x28
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	46c0      	nop			; (mov r8, r8)
 80098e8:	50000400 	.word	0x50000400
 80098ec:	50000800 	.word	0x50000800
 80098f0:	50000c00 	.word	0x50000c00
 80098f4:	40021000 	.word	0x40021000

080098f8 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler )
{
 80098f8:	b590      	push	{r4, r7, lr}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	607a      	str	r2, [r7, #4]
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	230a      	movs	r3, #10
 8009906:	18fb      	adds	r3, r7, r3
 8009908:	1c0a      	adds	r2, r1, #0
 800990a:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;
  
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800990c:	230a      	movs	r3, #10
 800990e:	18fb      	adds	r3, r7, r3
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	0018      	movs	r0, r3
 8009914:	f000 f85e 	bl	80099d4 <HW_GPIO_GetBitPos>
 8009918:	0003      	movs	r3, r0
 800991a:	617b      	str	r3, [r7, #20]
  
  if ( irqHandler != NULL)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d01e      	beq.n	8009960 <HW_GPIO_SetIrq+0x68>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8009922:	4b11      	ldr	r3, [pc, #68]	; (8009968 <HW_GPIO_SetIrq+0x70>)
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	0092      	lsls	r2, r2, #2
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 800992c:	2313      	movs	r3, #19
 800992e:	18fc      	adds	r4, r7, r3
 8009930:	230a      	movs	r3, #10
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	0018      	movs	r0, r3
 8009938:	f001 f963 	bl	800ac02 <MSP_GetIRQn>
 800993c:	0003      	movs	r3, r0
 800993e:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8009940:	6879      	ldr	r1, [r7, #4]
 8009942:	2313      	movs	r3, #19
 8009944:	18fb      	adds	r3, r7, r3
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	b25b      	sxtb	r3, r3
 800994a:	2200      	movs	r2, #0
 800994c:	0018      	movs	r0, r3
 800994e:	f7fb ff5b 	bl	8005808 <HAL_NVIC_SetPriority>
    
    HAL_NVIC_EnableIRQ( IRQnb );
 8009952:	2313      	movs	r3, #19
 8009954:	18fb      	adds	r3, r7, r3
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	b25b      	sxtb	r3, r3
 800995a:	0018      	movs	r0, r3
 800995c:	f7fb ff6a 	bl	8005834 <HAL_NVIC_EnableIRQ>
  }
}
 8009960:	46c0      	nop			; (mov r8, r8)
 8009962:	46bd      	mov	sp, r7
 8009964:	b007      	add	sp, #28
 8009966:	bd90      	pop	{r4, r7, pc}
 8009968:	200001d0 	.word	0x200001d0

0800996c <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler( uint16_t GPIO_Pin )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	0002      	movs	r2, r0
 8009974:	1dbb      	adds	r3, r7, #6
 8009976:	801a      	strh	r2, [r3, #0]
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 8009978:	1dbb      	adds	r3, r7, #6
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	0018      	movs	r0, r3
 800997e:	f000 f829 	bl	80099d4 <HW_GPIO_GetBitPos>
 8009982:	0003      	movs	r3, r0
 8009984:	60fb      	str	r3, [r7, #12]
  
  if ( GpioIrq[ BitPos ]  != NULL)
 8009986:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <HW_GPIO_IrqHandler+0x38>)
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	0092      	lsls	r2, r2, #2
 800998c:	58d3      	ldr	r3, [r2, r3]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d004      	beq.n	800999c <HW_GPIO_IrqHandler+0x30>
  {
    GpioIrq[ BitPos ] ( );
 8009992:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <HW_GPIO_IrqHandler+0x38>)
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	0092      	lsls	r2, r2, #2
 8009998:	58d3      	ldr	r3, [r2, r3]
 800999a:	4798      	blx	r3
  }
}
 800999c:	46c0      	nop			; (mov r8, r8)
 800999e:	46bd      	mov	sp, r7
 80099a0:	b004      	add	sp, #16
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	200001d0 	.word	0x200001d0

080099a8 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	230a      	movs	r3, #10
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	1c0a      	adds	r2, r1, #0
 80099b8:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	230a      	movs	r3, #10
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	8819      	ldrh	r1, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	0018      	movs	r0, r3
 80099c8:	f7fc f8f4 	bl	8005bb4 <HAL_GPIO_WritePin>
}
 80099cc:	46c0      	nop			; (mov r8, r8)
 80099ce:	46bd      	mov	sp, r7
 80099d0:	b004      	add	sp, #16
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	0002      	movs	r2, r0
 80099dc:	1dbb      	adds	r3, r7, #6
 80099de:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos=0;
 80099e0:	230f      	movs	r3, #15
 80099e2:	18fb      	adds	r3, r7, r3
 80099e4:	2200      	movs	r2, #0
 80099e6:	701a      	strb	r2, [r3, #0]
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 80099e8:	1dbb      	adds	r3, r7, #6
 80099ea:	881a      	ldrh	r2, [r3, #0]
 80099ec:	23ff      	movs	r3, #255	; 0xff
 80099ee:	021b      	lsls	r3, r3, #8
 80099f0:	4013      	ands	r3, r2
 80099f2:	d007      	beq.n	8009a04 <HW_GPIO_GetBitPos+0x30>
 80099f4:	230f      	movs	r3, #15
 80099f6:	18fb      	adds	r3, r7, r3
 80099f8:	220f      	movs	r2, #15
 80099fa:	18ba      	adds	r2, r7, r2
 80099fc:	7812      	ldrb	r2, [r2, #0]
 80099fe:	2108      	movs	r1, #8
 8009a00:	430a      	orrs	r2, r1
 8009a02:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8009a04:	1dbb      	adds	r3, r7, #6
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	4a15      	ldr	r2, [pc, #84]	; (8009a60 <HW_GPIO_GetBitPos+0x8c>)
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	d007      	beq.n	8009a1e <HW_GPIO_GetBitPos+0x4a>
 8009a0e:	230f      	movs	r3, #15
 8009a10:	18fb      	adds	r3, r7, r3
 8009a12:	220f      	movs	r2, #15
 8009a14:	18ba      	adds	r2, r7, r2
 8009a16:	7812      	ldrb	r2, [r2, #0]
 8009a18:	2104      	movs	r1, #4
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 8009a1e:	1dbb      	adds	r3, r7, #6
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	4a10      	ldr	r2, [pc, #64]	; (8009a64 <HW_GPIO_GetBitPos+0x90>)
 8009a24:	4013      	ands	r3, r2
 8009a26:	d007      	beq.n	8009a38 <HW_GPIO_GetBitPos+0x64>
 8009a28:	230f      	movs	r3, #15
 8009a2a:	18fb      	adds	r3, r7, r3
 8009a2c:	220f      	movs	r2, #15
 8009a2e:	18ba      	adds	r2, r7, r2
 8009a30:	7812      	ldrb	r2, [r2, #0]
 8009a32:	2102      	movs	r1, #2
 8009a34:	430a      	orrs	r2, r1
 8009a36:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8009a38:	1dbb      	adds	r3, r7, #6
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	4a0a      	ldr	r2, [pc, #40]	; (8009a68 <HW_GPIO_GetBitPos+0x94>)
 8009a3e:	4013      	ands	r3, r2
 8009a40:	d007      	beq.n	8009a52 <HW_GPIO_GetBitPos+0x7e>
 8009a42:	230f      	movs	r3, #15
 8009a44:	18fb      	adds	r3, r7, r3
 8009a46:	220f      	movs	r2, #15
 8009a48:	18ba      	adds	r2, r7, r2
 8009a4a:	7812      	ldrb	r2, [r2, #0]
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	701a      	strb	r2, [r3, #0]
  
  return PinPos;
 8009a52:	230f      	movs	r3, #15
 8009a54:	18fb      	adds	r3, r7, r3
 8009a56:	781b      	ldrb	r3, [r3, #0]
}
 8009a58:	0018      	movs	r0, r3
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	b004      	add	sp, #16
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	0000f0f0 	.word	0x0000f0f0
 8009a64:	0000cccc 	.word	0x0000cccc
 8009a68:	0000aaaa 	.word	0x0000aaaa

08009a6c <HW_RTC_Init>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
void HW_RTC_Init( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  if( HW_RTC_Initalized == false )
 8009a70:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <HW_RTC_Init+0x2c>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2201      	movs	r2, #1
 8009a76:	4053      	eors	r3, r2
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d008      	beq.n	8009a90 <HW_RTC_Init+0x24>
  {
    HW_RTC_SetConfig( );
 8009a7e:	f000 f80d 	bl	8009a9c <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig( );
 8009a82:	f000 f9ad 	bl	8009de0 <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext( );
 8009a86:	f000 f98b 	bl	8009da0 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 8009a8a:	4b03      	ldr	r3, [pc, #12]	; (8009a98 <HW_RTC_Init+0x2c>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	701a      	strb	r2, [r3, #0]
  }
}
 8009a90:	46c0      	nop			; (mov r8, r8)
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	46c0      	nop			; (mov r8, r8)
 8009a98:	20000210 	.word	0x20000210

08009a9c <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig( void )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 8009aa2:	4b27      	ldr	r3, [pc, #156]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009aa4:	4a27      	ldr	r2, [pc, #156]	; (8009b44 <HW_RTC_SetConfig+0xa8>)
 8009aa6:	601a      	str	r2, [r3, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8009aa8:	4b25      	ldr	r3, [pc, #148]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8009aae:	4b24      	ldr	r3, [pc, #144]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009ab0:	221f      	movs	r2, #31
 8009ab2:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8009ab4:	4b22      	ldr	r3, [pc, #136]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009ab6:	4a24      	ldr	r2, [pc, #144]	; (8009b48 <HW_RTC_SetConfig+0xac>)
 8009ab8:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8009aba:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009ac0:	4b1f      	ldr	r3, [pc, #124]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009ac6:	4b1e      	ldr	r3, [pc, #120]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	61da      	str	r2, [r3, #28]

  HAL_RTC_Init( &RtcHandle );
 8009acc:	4b1c      	ldr	r3, [pc, #112]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009ace:	0018      	movs	r0, r3
 8009ad0:	f7fd fa46 	bl	8006f60 <HAL_RTC_Init>
  
  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 16;
 8009ad4:	003b      	movs	r3, r7
 8009ad6:	2210      	movs	r2, #16
 8009ad8:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8009ada:	003b      	movs	r3, r7
 8009adc:	2201      	movs	r2, #1
 8009ade:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct.Date = 1;
 8009ae0:	003b      	movs	r3, r7
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8009ae6:	003b      	movs	r3, r7
 8009ae8:	2201      	movs	r2, #1
 8009aea:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 8009aec:	0039      	movs	r1, r7
 8009aee:	4b14      	ldr	r3, [pc, #80]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	0018      	movs	r0, r3
 8009af4:	f7fd fbe4 	bl	80072c0 <HAL_RTC_SetDate>
  
  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8009af8:	1d3b      	adds	r3, r7, #4
 8009afa:	2200      	movs	r2, #0
 8009afc:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct.Minutes = 0;
 8009afe:	1d3b      	adds	r3, r7, #4
 8009b00:	2200      	movs	r2, #0
 8009b02:	705a      	strb	r2, [r3, #1]

  RTC_TimeStruct.Seconds = 0;
 8009b04:	1d3b      	adds	r3, r7, #4
 8009b06:	2200      	movs	r2, #0
 8009b08:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8009b0a:	1d3b      	adds	r3, r7, #4
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8009b10:	1d3b      	adds	r3, r7, #4
 8009b12:	2200      	movs	r2, #0
 8009b14:	605a      	str	r2, [r3, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8009b16:	1d3b      	adds	r3, r7, #4
 8009b18:	2200      	movs	r2, #0
 8009b1a:	611a      	str	r2, [r3, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8009b1c:	1d3b      	adds	r3, r7, #4
 8009b1e:	2200      	movs	r2, #0
 8009b20:	60da      	str	r2, [r3, #12]
  
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 8009b22:	1d39      	adds	r1, r7, #4
 8009b24:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	0018      	movs	r0, r3
 8009b2a:	f7fd fa9d 	bl	8007068 <HAL_RTC_SetTime>
  
 /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 8009b2e:	4b04      	ldr	r3, [pc, #16]	; (8009b40 <HW_RTC_SetConfig+0xa4>)
 8009b30:	0018      	movs	r0, r3
 8009b32:	f7fe f892 	bl	8007c5a <HAL_RTCEx_EnableBypassShadow>
}
 8009b36:	46c0      	nop			; (mov r8, r8)
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	b006      	add	sp, #24
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	46c0      	nop			; (mov r8, r8)
 8009b40:	20000214 	.word	0x20000214
 8009b44:	40002800 	.word	0x40002800
 8009b48:	000003ff 	.word	0x000003ff

08009b4c <HW_RTC_setMcuWakeUpTime>:
 * @note resulotion in RTC_ALARM_TIME_BASE in timer ticks
 * @param none
 * @retval none
 */
void HW_RTC_setMcuWakeUpTime( void )
{
 8009b4c:	b590      	push	{r4, r7, lr}
 8009b4e:	b08b      	sub	sp, #44	; 0x2c
 8009b50:	af00      	add	r7, sp, #0
  RTC_DateTypeDef RTC_DateStruct;
  
  TimerTime_t now, hit;
  int16_t McuWakeUpTime;
  
  if ((McuWakeUpTimeInitialized == false) &&
 8009b52:	4b2f      	ldr	r3, [pc, #188]	; (8009c10 <HW_RTC_setMcuWakeUpTime+0xc4>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2201      	movs	r2, #1
 8009b58:	4053      	eors	r3, r2
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d053      	beq.n	8009c08 <HW_RTC_setMcuWakeUpTime+0xbc>
      ( HAL_NVIC_GetPendingIRQ( RTC_Alarm_IRQn ) == 1))
 8009b60:	2002      	movs	r0, #2
 8009b62:	f7fb fe87 	bl	8005874 <HAL_NVIC_GetPendingIRQ>
 8009b66:	0003      	movs	r3, r0
  if ((McuWakeUpTimeInitialized == false) &&
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d14d      	bne.n	8009c08 <HW_RTC_setMcuWakeUpTime+0xbc>
  { /* warning: works ok if now is below 30 days
       it is ok since it's done once at first alarm wake-up*/
    McuWakeUpTimeInitialized = true;
 8009b6c:	4b28      	ldr	r3, [pc, #160]	; (8009c10 <HW_RTC_setMcuWakeUpTime+0xc4>)
 8009b6e:	2201      	movs	r2, #1
 8009b70:	701a      	strb	r2, [r3, #0]
    now = HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct );
 8009b72:	2308      	movs	r3, #8
 8009b74:	18fa      	adds	r2, r7, r3
 8009b76:	1d3b      	adds	r3, r7, #4
 8009b78:	0011      	movs	r1, r2
 8009b7a:	0018      	movs	r0, r3
 8009b7c:	f000 fabe 	bl	800a0fc <HW_RTC_GetCalendarValue>
 8009b80:	0003      	movs	r3, r0
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24

    DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
    DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
    HAL_RTC_GetAlarm(&RtcHandle, &RTC_AlarmStructure, RTC_ALARM_A, RTC_FORMAT_BIN );
 8009b84:	2380      	movs	r3, #128	; 0x80
 8009b86:	005a      	lsls	r2, r3, #1
 8009b88:	4922      	ldr	r1, [pc, #136]	; (8009c14 <HW_RTC_setMcuWakeUpTime+0xc8>)
 8009b8a:	4823      	ldr	r0, [pc, #140]	; (8009c18 <HW_RTC_setMcuWakeUpTime+0xcc>)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	f7fd feb7 	bl	8007900 <HAL_RTC_GetAlarm>
    hit = RTC_AlarmStructure.AlarmTime.Seconds+
 8009b92:	4b20      	ldr	r3, [pc, #128]	; (8009c14 <HW_RTC_setMcuWakeUpTime+0xc8>)
 8009b94:	789b      	ldrb	r3, [r3, #2]
 8009b96:	0019      	movs	r1, r3
          60*(RTC_AlarmStructure.AlarmTime.Minutes+
 8009b98:	4b1e      	ldr	r3, [pc, #120]	; (8009c14 <HW_RTC_setMcuWakeUpTime+0xc8>)
 8009b9a:	785b      	ldrb	r3, [r3, #1]
 8009b9c:	0018      	movs	r0, r3
          60*(RTC_AlarmStructure.AlarmTime.Hours+
 8009b9e:	4b1d      	ldr	r3, [pc, #116]	; (8009c14 <HW_RTC_setMcuWakeUpTime+0xc8>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	001c      	movs	r4, r3
          24*(RTC_AlarmStructure.AlarmDateWeekDay)));
 8009ba4:	4b1b      	ldr	r3, [pc, #108]	; (8009c14 <HW_RTC_setMcuWakeUpTime+0xc8>)
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	5c9b      	ldrb	r3, [r3, r2]
 8009baa:	001a      	movs	r2, r3
 8009bac:	0013      	movs	r3, r2
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	189b      	adds	r3, r3, r2
 8009bb2:	00db      	lsls	r3, r3, #3
          60*(RTC_AlarmStructure.AlarmTime.Hours+
 8009bb4:	18e2      	adds	r2, r4, r3
 8009bb6:	0013      	movs	r3, r2
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	1a9b      	subs	r3, r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
          60*(RTC_AlarmStructure.AlarmTime.Minutes+
 8009bbe:	18c2      	adds	r2, r0, r3
 8009bc0:	0013      	movs	r3, r2
 8009bc2:	011b      	lsls	r3, r3, #4
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
    hit = RTC_AlarmStructure.AlarmTime.Seconds+
 8009bc8:	18cb      	adds	r3, r1, r3
 8009bca:	623b      	str	r3, [r7, #32]
    hit = ( hit << N_PREDIV_S ) + (PREDIV_S - RTC_AlarmStructure.AlarmTime.SubSeconds);
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	029a      	lsls	r2, r3, #10
 8009bd0:	4b10      	ldr	r3, [pc, #64]	; (8009c14 <HW_RTC_setMcuWakeUpTime+0xc8>)
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	4a11      	ldr	r2, [pc, #68]	; (8009c1c <HW_RTC_setMcuWakeUpTime+0xd0>)
 8009bd8:	4694      	mov	ip, r2
 8009bda:	4463      	add	r3, ip
 8009bdc:	623b      	str	r3, [r7, #32]
      
    McuWakeUpTime = (int16_t) ((now-hit));
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	231e      	movs	r3, #30
 8009bec:	18fb      	adds	r3, r7, r3
 8009bee:	801a      	strh	r2, [r3, #0]
    McuWakeUpTimeCal += McuWakeUpTime;
 8009bf0:	4b0b      	ldr	r3, [pc, #44]	; (8009c20 <HW_RTC_setMcuWakeUpTime+0xd4>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	5e9b      	ldrsh	r3, [r3, r2]
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	231e      	movs	r3, #30
 8009bfa:	18fb      	adds	r3, r7, r3
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	18d3      	adds	r3, r2, r3
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	b21a      	sxth	r2, r3
 8009c04:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <HW_RTC_setMcuWakeUpTime+0xd4>)
 8009c06:	801a      	strh	r2, [r3, #0]
    DBG_PRINTF("Cal=%d, %d\n",McuWakeUpTimeCal, McuWakeUpTime);
  }
}
 8009c08:	46c0      	nop			; (mov r8, r8)
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	b00b      	add	sp, #44	; 0x2c
 8009c0e:	bd90      	pop	{r4, r7, pc}
 8009c10:	20000211 	.word	0x20000211
 8009c14:	20000238 	.word	0x20000238
 8009c18:	20000214 	.word	0x20000214
 8009c1c:	000003ff 	.word	0x000003ff
 8009c20:	20000212 	.word	0x20000212

08009c24 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout( void )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	af00      	add	r7, sp, #0
  return( MIN_ALARM_DELAY );
 8009c28:	2303      	movs	r3, #3
}
 8009c2a:	0018      	movs	r0, r3
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick( TimerTime_t timeMicroSec )
{
 8009c30:	b5b0      	push	{r4, r5, r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return ( uint32_t) ( ( ((uint64_t)timeMicroSec) * CONV_DENOM ) / CONV_NUMER );
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	000a      	movs	r2, r1
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	000b      	movs	r3, r1
 8009c40:	0e51      	lsrs	r1, r2, #25
 8009c42:	01dd      	lsls	r5, r3, #7
 8009c44:	430d      	orrs	r5, r1
 8009c46:	01d4      	lsls	r4, r2, #7
 8009c48:	227d      	movs	r2, #125	; 0x7d
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	0020      	movs	r0, r4
 8009c4e:	0029      	movs	r1, r5
 8009c50:	f7f6 fc0e 	bl	8000470 <__aeabi_uldivmod>
 8009c54:	0003      	movs	r3, r0
 8009c56:	000c      	movs	r4, r1
}
 8009c58:	0018      	movs	r0, r3
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	b002      	add	sp, #8
 8009c5e:	bdb0      	pop	{r4, r5, r7, pc}

08009c60 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm( uint32_t timeout )
{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 8009c68:	4b14      	ldr	r3, [pc, #80]	; (8009cbc <HW_RTC_SetAlarm+0x5c>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c6e:	3303      	adds	r3, #3
 8009c70:	001c      	movs	r4, r3
 8009c72:	f000 f825 	bl	8009cc0 <HW_RTC_GetTimerElapsedTime>
 8009c76:	0002      	movs	r2, r0
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	1a9b      	subs	r3, r3, r2
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	d203      	bcs.n	8009c88 <HW_RTC_SetAlarm+0x28>
  {
    LowPower_Enable( e_LOW_POWER_RTC );
 8009c80:	2001      	movs	r0, #1
 8009c82:	f7ff fab1 	bl	80091e8 <LowPower_Enable>
 8009c86:	e002      	b.n	8009c8e <HW_RTC_SetAlarm+0x2e>
  }
  else
  {
    LowPower_Disable( e_LOW_POWER_RTC );
 8009c88:	2001      	movs	r0, #1
 8009c8a:	f7ff fa8f 	bl	80091ac <LowPower_Disable>
  }

  if( LowPower_GetState() == 0 )
 8009c8e:	f7ff facb 	bl	8009228 <LowPower_GetState>
 8009c92:	1e03      	subs	r3, r0, #0
 8009c94:	d109      	bne.n	8009caa <HW_RTC_SetAlarm+0x4a>
  {
    LowPower_Enable( e_LOW_POWER_RTC );
 8009c96:	2001      	movs	r0, #1
 8009c98:	f7ff faa6 	bl	80091e8 <LowPower_Enable>
    timeout = timeout -  McuWakeUpTimeCal;
 8009c9c:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <HW_RTC_SetAlarm+0x5c>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	5e9b      	ldrsh	r3, [r3, r2]
 8009ca2:	001a      	movs	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	1a9b      	subs	r3, r3, r2
 8009ca8:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm( timeout );
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	0018      	movs	r0, r3
 8009cae:	f000 f8a5 	bl	8009dfc <HW_RTC_StartWakeUpAlarm>
}
 8009cb2:	46c0      	nop			; (mov r8, r8)
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	b003      	add	sp, #12
 8009cb8:	bd90      	pop	{r4, r7, pc}
 8009cba:	46c0      	nop			; (mov r8, r8)
 8009cbc:	20000212 	.word	0x20000212

08009cc0 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b088      	sub	sp, #32
 8009cc4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;
  
  TimerTime_t CalendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	18fa      	adds	r2, r7, r3
 8009cca:	1d3b      	adds	r3, r7, #4
 8009ccc:	0011      	movs	r1, r2
 8009cce:	0018      	movs	r0, r3
 8009cd0:	f000 fa14 	bl	800a0fc <HW_RTC_GetCalendarValue>
 8009cd4:	0003      	movs	r3, r0
 8009cd6:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 8009cd8:	4b03      	ldr	r3, [pc, #12]	; (8009ce8 <HW_RTC_GetTimerElapsedTime+0x28>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	69fa      	ldr	r2, [r7, #28]
 8009cde:	1ad3      	subs	r3, r2, r3
}
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b008      	add	sp, #32
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20000260 	.word	0x20000260

08009cec <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue( void )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;
  
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8009cf2:	2308      	movs	r3, #8
 8009cf4:	18fa      	adds	r2, r7, r3
 8009cf6:	1d3b      	adds	r3, r7, #4
 8009cf8:	0011      	movs	r1, r2
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	f000 f9fe 	bl	800a0fc <HW_RTC_GetCalendarValue>
 8009d00:	0003      	movs	r3, r0
 8009d02:	61fb      	str	r3, [r7, #28]

  return( CalendarValue );
 8009d04:	69fb      	ldr	r3, [r7, #28]
}
 8009d06:	0018      	movs	r0, r3
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	b008      	add	sp, #32
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm( void )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0

  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 8009d14:	4b09      	ldr	r3, [pc, #36]	; (8009d3c <HW_RTC_StopAlarm+0x2c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a08      	ldr	r2, [pc, #32]	; (8009d3c <HW_RTC_StopAlarm+0x2c>)
 8009d1a:	6812      	ldr	r2, [r2, #0]
 8009d1c:	68d2      	ldr	r2, [r2, #12]
 8009d1e:	21ff      	movs	r1, #255	; 0xff
 8009d20:	400a      	ands	r2, r1
 8009d22:	4907      	ldr	r1, [pc, #28]	; (8009d40 <HW_RTC_StopAlarm+0x30>)
 8009d24:	430a      	orrs	r2, r1
 8009d26:	60da      	str	r2, [r3, #12]

  /* Disable the Alarm A interrupt */

  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8009d28:	2380      	movs	r3, #128	; 0x80
 8009d2a:	005a      	lsls	r2, r3, #1
 8009d2c:	4b03      	ldr	r3, [pc, #12]	; (8009d3c <HW_RTC_StopAlarm+0x2c>)
 8009d2e:	0011      	movs	r1, r2
 8009d30:	0018      	movs	r0, r3
 8009d32:	f7fd fd43 	bl	80077bc <HAL_RTC_DeactivateAlarm>
}
 8009d36:	46c0      	nop			; (mov r8, r8)
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20000214 	.word	0x20000214
 8009d40:	fffffe7f 	.word	0xfffffe7f

08009d44 <HW_RTC_IrqHandler>:
 * @brief RTC IRQ Handler on the RTC Alarm
 * @param none
 * @retval none
 */
void HW_RTC_IrqHandler ( void )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
  /* enable low power at irq*/
  LowPower_Enable( e_LOW_POWER_RTC );
 8009d48:	2001      	movs	r0, #1
 8009d4a:	f7ff fa4d 	bl	80091e8 <LowPower_Enable>
  
  HAL_RTC_AlarmIRQHandler( &RtcHandle);
 8009d4e:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <HW_RTC_IrqHandler+0x18>)
 8009d50:	0018      	movs	r0, r3
 8009d52:	f7fd fe9f 	bl	8007a94 <HAL_RTC_AlarmIRQHandler>
}
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	20000214 	.word	0x20000214

08009d60 <HW_RTC_DelayMs>:
 * @brief a delay of delay ms by polling RTC
 * @param delay in ms
 * @retval none
 */
void HW_RTC_DelayMs( uint32_t delay )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  TimerTime_t delayValue = 0;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]
  TimerTime_t timeout = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60bb      	str	r3, [r7, #8]

  delayValue = HW_RTC_ms2Tick( delay );
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	0018      	movs	r0, r3
 8009d74:	f7ff ff5c 	bl	8009c30 <HW_RTC_ms2Tick>
 8009d78:	0003      	movs	r3, r0
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = HW_RTC_GetTimerValue( );
 8009d7c:	f7ff ffb6 	bl	8009cec <HW_RTC_GetTimerValue>
 8009d80:	0003      	movs	r3, r0
 8009d82:	60bb      	str	r3, [r7, #8]
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 8009d84:	e000      	b.n	8009d88 <HW_RTC_DelayMs+0x28>
  __ASM volatile ("nop");
 8009d86:	46c0      	nop			; (mov r8, r8)
 8009d88:	f7ff ffb0 	bl	8009cec <HW_RTC_GetTimerValue>
 8009d8c:	0002      	movs	r2, r0
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	1ad2      	subs	r2, r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d3f6      	bcc.n	8009d86 <HW_RTC_DelayMs+0x26>
  {
    __NOP( );
  }
}
 8009d98:	46c0      	nop			; (mov r8, r8)
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	b004      	add	sp, #16
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 8009da4:	4a06      	ldr	r2, [pc, #24]	; (8009dc0 <HW_RTC_SetTimerContext+0x20>)
 8009da6:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <HW_RTC_SetTimerContext+0x24>)
 8009da8:	0011      	movs	r1, r2
 8009daa:	0018      	movs	r0, r3
 8009dac:	f000 f9a6 	bl	800a0fc <HW_RTC_GetCalendarValue>
 8009db0:	0002      	movs	r2, r0
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <HW_RTC_SetTimerContext+0x28>)
 8009db4:	601a      	str	r2, [r3, #0]
  return ( uint32_t ) RtcTimerContext.Rtc_Time;
 8009db6:	4b04      	ldr	r3, [pc, #16]	; (8009dc8 <HW_RTC_SetTimerContext+0x28>)
 8009db8:	681b      	ldr	r3, [r3, #0]
}
 8009dba:	0018      	movs	r0, r3
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20000264 	.word	0x20000264
 8009dc4:	20000278 	.word	0x20000278
 8009dc8:	20000260 	.word	0x20000260

08009dcc <HW_RTC_GetTimerContext>:
 * @brief Get the RTC timer Reference
 * @param none
 * @retval Timer Value in  Ticks
 */
uint32_t HW_RTC_GetTimerContext( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	af00      	add	r7, sp, #0
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8009dd0:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <HW_RTC_GetTimerContext+0x10>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
}
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	20000260 	.word	0x20000260

08009de0 <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8009de4:	2380      	movs	r3, #128	; 0x80
 8009de6:	005a      	lsls	r2, r3, #1
 8009de8:	4b03      	ldr	r3, [pc, #12]	; (8009df8 <HW_RTC_SetAlarmConfig+0x18>)
 8009dea:	0011      	movs	r1, r2
 8009dec:	0018      	movs	r0, r3
 8009dee:	f7fd fce5 	bl	80077bc <HAL_RTC_DeactivateAlarm>
}
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20000214 	.word	0x20000214

08009dfc <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm( uint32_t timeoutValue )
{
 8009dfc:	b590      	push	{r4, r7, lr}
 8009dfe:	b08d      	sub	sp, #52	; 0x34
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8009e04:	232e      	movs	r3, #46	; 0x2e
 8009e06:	18fb      	adds	r3, r7, r3
 8009e08:	2200      	movs	r2, #0
 8009e0a:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8009e0c:	232c      	movs	r3, #44	; 0x2c
 8009e0e:	18fb      	adds	r3, r7, r3
 8009e10:	2200      	movs	r2, #0
 8009e12:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8009e14:	232a      	movs	r3, #42	; 0x2a
 8009e16:	18fb      	adds	r3, r7, r3
 8009e18:	2200      	movs	r2, #0
 8009e1a:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8009e1c:	2328      	movs	r3, #40	; 0x28
 8009e1e:	18fb      	adds	r3, r7, r3
 8009e20:	2200      	movs	r2, #0
 8009e22:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8009e24:	2326      	movs	r3, #38	; 0x26
 8009e26:	18fb      	adds	r3, r7, r3
 8009e28:	2200      	movs	r2, #0
 8009e2a:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	18fa      	adds	r2, r7, r3
 8009e30:	4baa      	ldr	r3, [pc, #680]	; (800a0dc <HW_RTC_StartWakeUpAlarm+0x2e0>)
 8009e32:	3304      	adds	r3, #4
 8009e34:	cb13      	ldmia	r3!, {r0, r1, r4}
 8009e36:	c213      	stmia	r2!, {r0, r1, r4}
 8009e38:	cb03      	ldmia	r3!, {r0, r1}
 8009e3a:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8009e3c:	230c      	movs	r3, #12
 8009e3e:	18fb      	adds	r3, r7, r3
 8009e40:	4aa6      	ldr	r2, [pc, #664]	; (800a0dc <HW_RTC_StartWakeUpAlarm+0x2e0>)
 8009e42:	6992      	ldr	r2, [r2, #24]
 8009e44:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm( );
 8009e46:	f7ff ff63 	bl	8009d10 <HW_RTC_StopAlarm>
  DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  
  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8009e4a:	2310      	movs	r3, #16
 8009e4c:	18fb      	adds	r3, r7, r3
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	232e      	movs	r3, #46	; 0x2e
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	49a2      	ldr	r1, [pc, #648]	; (800a0e0 <HW_RTC_StartWakeUpAlarm+0x2e4>)
 8009e58:	1a8a      	subs	r2, r1, r2
 8009e5a:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	059b      	lsls	r3, r3, #22
 8009e62:	0d9b      	lsrs	r3, r3, #22
 8009e64:	b299      	uxth	r1, r3
 8009e66:	232e      	movs	r3, #46	; 0x2e
 8009e68:	18fb      	adds	r3, r7, r3
 8009e6a:	222e      	movs	r2, #46	; 0x2e
 8009e6c:	18ba      	adds	r2, r7, r2
 8009e6e:	8812      	ldrh	r2, [r2, #0]
 8009e70:	188a      	adds	r2, r1, r2
 8009e72:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	0a9b      	lsrs	r3, r3, #10
 8009e78:	607b      	str	r3, [r7, #4]
  
  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	18fb      	adds	r3, r7, r3
 8009e7e:	789a      	ldrb	r2, [r3, #2]
 8009e80:	2326      	movs	r3, #38	; 0x26
 8009e82:	18fb      	adds	r3, r7, r3
 8009e84:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInDay)
 8009e86:	e00a      	b.n	8009e9e <HW_RTC_StartWakeUpAlarm+0xa2>
  {
    timeoutValue -= SecondsInDay;
 8009e88:	4a96      	ldr	r2, [pc, #600]	; (800a0e4 <HW_RTC_StartWakeUpAlarm+0x2e8>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	1a9b      	subs	r3, r3, r2
 8009e8e:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8009e90:	2326      	movs	r3, #38	; 0x26
 8009e92:	18fb      	adds	r3, r7, r3
 8009e94:	881a      	ldrh	r2, [r3, #0]
 8009e96:	2326      	movs	r3, #38	; 0x26
 8009e98:	18fb      	adds	r3, r7, r3
 8009e9a:	3201      	adds	r2, #1
 8009e9c:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInDay)
 8009e9e:	4a91      	ldr	r2, [pc, #580]	; (800a0e4 <HW_RTC_StartWakeUpAlarm+0x2e8>)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d2f0      	bcs.n	8009e88 <HW_RTC_StartWakeUpAlarm+0x8c>
  }
  
  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8009ea6:	2310      	movs	r3, #16
 8009ea8:	18fb      	adds	r3, r7, r3
 8009eaa:	781a      	ldrb	r2, [r3, #0]
 8009eac:	2328      	movs	r3, #40	; 0x28
 8009eae:	18fb      	adds	r3, r7, r3
 8009eb0:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInHour)
 8009eb2:	e00c      	b.n	8009ece <HW_RTC_StartWakeUpAlarm+0xd2>
  {
    timeoutValue -= SecondsInHour;
 8009eb4:	23e1      	movs	r3, #225	; 0xe1
 8009eb6:	011b      	lsls	r3, r3, #4
 8009eb8:	001a      	movs	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8009ec0:	2328      	movs	r3, #40	; 0x28
 8009ec2:	18fb      	adds	r3, r7, r3
 8009ec4:	881a      	ldrh	r2, [r3, #0]
 8009ec6:	2328      	movs	r3, #40	; 0x28
 8009ec8:	18fb      	adds	r3, r7, r3
 8009eca:	3201      	adds	r2, #1
 8009ecc:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInHour)
 8009ece:	23e1      	movs	r3, #225	; 0xe1
 8009ed0:	011b      	lsls	r3, r3, #4
 8009ed2:	001a      	movs	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d9ec      	bls.n	8009eb4 <HW_RTC_StartWakeUpAlarm+0xb8>
  }
  
  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8009eda:	2310      	movs	r3, #16
 8009edc:	18fb      	adds	r3, r7, r3
 8009ede:	785a      	ldrb	r2, [r3, #1]
 8009ee0:	232a      	movs	r3, #42	; 0x2a
 8009ee2:	18fb      	adds	r3, r7, r3
 8009ee4:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInMinute)
 8009ee6:	e00b      	b.n	8009f00 <HW_RTC_StartWakeUpAlarm+0x104>
  {
    timeoutValue -= SecondsInMinute;
 8009ee8:	233c      	movs	r3, #60	; 0x3c
 8009eea:	001a      	movs	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8009ef2:	232a      	movs	r3, #42	; 0x2a
 8009ef4:	18fb      	adds	r3, r7, r3
 8009ef6:	881a      	ldrh	r2, [r3, #0]
 8009ef8:	232a      	movs	r3, #42	; 0x2a
 8009efa:	18fb      	adds	r3, r7, r3
 8009efc:	3201      	adds	r2, #1
 8009efe:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInMinute)
 8009f00:	233c      	movs	r3, #60	; 0x3c
 8009f02:	001a      	movs	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d9ee      	bls.n	8009ee8 <HW_RTC_StartWakeUpAlarm+0xec>
  }
   
  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8009f0a:	2310      	movs	r3, #16
 8009f0c:	18fb      	adds	r3, r7, r3
 8009f0e:	789b      	ldrb	r3, [r3, #2]
 8009f10:	b299      	uxth	r1, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	232c      	movs	r3, #44	; 0x2c
 8009f18:	18fb      	adds	r3, r7, r3
 8009f1a:	188a      	adds	r2, r1, r2
 8009f1c:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8009f1e:	e00f      	b.n	8009f40 <HW_RTC_StartWakeUpAlarm+0x144>
  {
    rtcAlarmSubSeconds -= (PREDIV_S+1);
 8009f20:	232e      	movs	r3, #46	; 0x2e
 8009f22:	18fb      	adds	r3, r7, r3
 8009f24:	222e      	movs	r2, #46	; 0x2e
 8009f26:	18ba      	adds	r2, r7, r2
 8009f28:	8812      	ldrh	r2, [r2, #0]
 8009f2a:	496f      	ldr	r1, [pc, #444]	; (800a0e8 <HW_RTC_StartWakeUpAlarm+0x2ec>)
 8009f2c:	468c      	mov	ip, r1
 8009f2e:	4462      	add	r2, ip
 8009f30:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8009f32:	232c      	movs	r3, #44	; 0x2c
 8009f34:	18fb      	adds	r3, r7, r3
 8009f36:	881a      	ldrh	r2, [r3, #0]
 8009f38:	232c      	movs	r3, #44	; 0x2c
 8009f3a:	18fb      	adds	r3, r7, r3
 8009f3c:	3201      	adds	r2, #1
 8009f3e:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8009f40:	232e      	movs	r3, #46	; 0x2e
 8009f42:	18fb      	adds	r3, r7, r3
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	4a66      	ldr	r2, [pc, #408]	; (800a0e0 <HW_RTC_StartWakeUpAlarm+0x2e4>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d8e9      	bhi.n	8009f20 <HW_RTC_StartWakeUpAlarm+0x124>
  }
  
  while (rtcAlarmSeconds >= 60)
 8009f4c:	e00d      	b.n	8009f6a <HW_RTC_StartWakeUpAlarm+0x16e>
  { 
    rtcAlarmSeconds -= 60;
 8009f4e:	232c      	movs	r3, #44	; 0x2c
 8009f50:	18fb      	adds	r3, r7, r3
 8009f52:	222c      	movs	r2, #44	; 0x2c
 8009f54:	18ba      	adds	r2, r7, r2
 8009f56:	8812      	ldrh	r2, [r2, #0]
 8009f58:	3a3c      	subs	r2, #60	; 0x3c
 8009f5a:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8009f5c:	232a      	movs	r3, #42	; 0x2a
 8009f5e:	18fb      	adds	r3, r7, r3
 8009f60:	881a      	ldrh	r2, [r3, #0]
 8009f62:	232a      	movs	r3, #42	; 0x2a
 8009f64:	18fb      	adds	r3, r7, r3
 8009f66:	3201      	adds	r2, #1
 8009f68:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= 60)
 8009f6a:	232c      	movs	r3, #44	; 0x2c
 8009f6c:	18fb      	adds	r3, r7, r3
 8009f6e:	881b      	ldrh	r3, [r3, #0]
 8009f70:	2b3b      	cmp	r3, #59	; 0x3b
 8009f72:	d8ec      	bhi.n	8009f4e <HW_RTC_StartWakeUpAlarm+0x152>
  }

  while (rtcAlarmMinutes >= 60)
 8009f74:	e00d      	b.n	8009f92 <HW_RTC_StartWakeUpAlarm+0x196>
  {
    rtcAlarmMinutes -= 60;
 8009f76:	232a      	movs	r3, #42	; 0x2a
 8009f78:	18fb      	adds	r3, r7, r3
 8009f7a:	222a      	movs	r2, #42	; 0x2a
 8009f7c:	18ba      	adds	r2, r7, r2
 8009f7e:	8812      	ldrh	r2, [r2, #0]
 8009f80:	3a3c      	subs	r2, #60	; 0x3c
 8009f82:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8009f84:	2328      	movs	r3, #40	; 0x28
 8009f86:	18fb      	adds	r3, r7, r3
 8009f88:	881a      	ldrh	r2, [r3, #0]
 8009f8a:	2328      	movs	r3, #40	; 0x28
 8009f8c:	18fb      	adds	r3, r7, r3
 8009f8e:	3201      	adds	r2, #1
 8009f90:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= 60)
 8009f92:	232a      	movs	r3, #42	; 0x2a
 8009f94:	18fb      	adds	r3, r7, r3
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	2b3b      	cmp	r3, #59	; 0x3b
 8009f9a:	d8ec      	bhi.n	8009f76 <HW_RTC_StartWakeUpAlarm+0x17a>
  }
  
  while (rtcAlarmHours >= HoursInDay)
 8009f9c:	e00f      	b.n	8009fbe <HW_RTC_StartWakeUpAlarm+0x1c2>
  {
    rtcAlarmHours -= HoursInDay;
 8009f9e:	2318      	movs	r3, #24
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	2328      	movs	r3, #40	; 0x28
 8009fa4:	18fb      	adds	r3, r7, r3
 8009fa6:	2128      	movs	r1, #40	; 0x28
 8009fa8:	1879      	adds	r1, r7, r1
 8009faa:	8809      	ldrh	r1, [r1, #0]
 8009fac:	1a8a      	subs	r2, r1, r2
 8009fae:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8009fb0:	2326      	movs	r3, #38	; 0x26
 8009fb2:	18fb      	adds	r3, r7, r3
 8009fb4:	881a      	ldrh	r2, [r3, #0]
 8009fb6:	2326      	movs	r3, #38	; 0x26
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	3201      	adds	r2, #1
 8009fbc:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HoursInDay)
 8009fbe:	2318      	movs	r3, #24
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	2228      	movs	r2, #40	; 0x28
 8009fc4:	18ba      	adds	r2, r7, r2
 8009fc6:	8812      	ldrh	r2, [r2, #0]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d2e8      	bcs.n	8009f9e <HW_RTC_StartWakeUpAlarm+0x1a2>
  }

  if( RTC_DateStruct.Year % 4 == 0 ) 
 8009fcc:	230c      	movs	r3, #12
 8009fce:	18fb      	adds	r3, r7, r3
 8009fd0:	78db      	ldrb	r3, [r3, #3]
 8009fd2:	2203      	movs	r2, #3
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d11d      	bne.n	800a018 <HW_RTC_StartWakeUpAlarm+0x21c>
  {
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 8009fdc:	230c      	movs	r3, #12
 8009fde:	18fb      	adds	r3, r7, r3
 8009fe0:	785b      	ldrb	r3, [r3, #1]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	4a41      	ldr	r2, [pc, #260]	; (800a0ec <HW_RTC_StartWakeUpAlarm+0x2f0>)
 8009fe6:	5cd3      	ldrb	r3, [r2, r3]
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	2226      	movs	r2, #38	; 0x26
 8009fec:	18ba      	adds	r2, r7, r2
 8009fee:	8812      	ldrh	r2, [r2, #0]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d92e      	bls.n	800a052 <HW_RTC_StartWakeUpAlarm+0x256>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8009ff4:	2326      	movs	r3, #38	; 0x26
 8009ff6:	18fb      	adds	r3, r7, r3
 8009ff8:	8818      	ldrh	r0, [r3, #0]
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	18fb      	adds	r3, r7, r3
 8009ffe:	785b      	ldrb	r3, [r3, #1]
 800a000:	3b01      	subs	r3, #1
 800a002:	4a3a      	ldr	r2, [pc, #232]	; (800a0ec <HW_RTC_StartWakeUpAlarm+0x2f0>)
 800a004:	5cd3      	ldrb	r3, [r2, r3]
 800a006:	0019      	movs	r1, r3
 800a008:	f7f6 f9ee 	bl	80003e8 <__aeabi_idivmod>
 800a00c:	000b      	movs	r3, r1
 800a00e:	001a      	movs	r2, r3
 800a010:	2326      	movs	r3, #38	; 0x26
 800a012:	18fb      	adds	r3, r7, r3
 800a014:	801a      	strh	r2, [r3, #0]
 800a016:	e01c      	b.n	800a052 <HW_RTC_StartWakeUpAlarm+0x256>
    }
  }
  else
  {
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 800a018:	230c      	movs	r3, #12
 800a01a:	18fb      	adds	r3, r7, r3
 800a01c:	785b      	ldrb	r3, [r3, #1]
 800a01e:	3b01      	subs	r3, #1
 800a020:	4a33      	ldr	r2, [pc, #204]	; (800a0f0 <HW_RTC_StartWakeUpAlarm+0x2f4>)
 800a022:	5cd3      	ldrb	r3, [r2, r3]
 800a024:	b29b      	uxth	r3, r3
 800a026:	2226      	movs	r2, #38	; 0x26
 800a028:	18ba      	adds	r2, r7, r2
 800a02a:	8812      	ldrh	r2, [r2, #0]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d910      	bls.n	800a052 <HW_RTC_StartWakeUpAlarm+0x256>
    {   
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800a030:	2326      	movs	r3, #38	; 0x26
 800a032:	18fb      	adds	r3, r7, r3
 800a034:	8818      	ldrh	r0, [r3, #0]
 800a036:	230c      	movs	r3, #12
 800a038:	18fb      	adds	r3, r7, r3
 800a03a:	785b      	ldrb	r3, [r3, #1]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	4a2c      	ldr	r2, [pc, #176]	; (800a0f0 <HW_RTC_StartWakeUpAlarm+0x2f4>)
 800a040:	5cd3      	ldrb	r3, [r2, r3]
 800a042:	0019      	movs	r1, r3
 800a044:	f7f6 f9d0 	bl	80003e8 <__aeabi_idivmod>
 800a048:	000b      	movs	r3, r1
 800a04a:	001a      	movs	r2, r3
 800a04c:	2326      	movs	r3, #38	; 0x26
 800a04e:	18fb      	adds	r3, r7, r3
 800a050:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 800a052:	232e      	movs	r3, #46	; 0x2e
 800a054:	18fb      	adds	r3, r7, r3
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	4a21      	ldr	r2, [pc, #132]	; (800a0e0 <HW_RTC_StartWakeUpAlarm+0x2e4>)
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	001a      	movs	r2, r3
 800a05e:	4b25      	ldr	r3, [pc, #148]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a060:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 800a062:	4b24      	ldr	r3, [pc, #144]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a064:	22a0      	movs	r2, #160	; 0xa0
 800a066:	0512      	lsls	r2, r2, #20
 800a068:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800a06a:	232c      	movs	r3, #44	; 0x2c
 800a06c:	18fb      	adds	r3, r7, r3
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	b2da      	uxtb	r2, r3
 800a072:	4b20      	ldr	r3, [pc, #128]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a074:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800a076:	232a      	movs	r3, #42	; 0x2a
 800a078:	18fb      	adds	r3, r7, r3
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	4b1d      	ldr	r3, [pc, #116]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a080:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800a082:	2328      	movs	r3, #40	; 0x28
 800a084:	18fb      	adds	r3, r7, r3
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	4b1a      	ldr	r3, [pc, #104]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a08c:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 800a08e:	2326      	movs	r3, #38	; 0x26
 800a090:	18fb      	adds	r3, r7, r3
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	b2d9      	uxtb	r1, r3
 800a096:	4b17      	ldr	r3, [pc, #92]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a098:	2220      	movs	r2, #32
 800a09a:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800a09c:	2310      	movs	r3, #16
 800a09e:	18fb      	adds	r3, r7, r3
 800a0a0:	78da      	ldrb	r2, [r3, #3]
 800a0a2:	4b14      	ldr	r3, [pc, #80]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a0a4:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800a0a6:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800a0ac:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800a0b2:	4b10      	ldr	r3, [pc, #64]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a0b4:	2280      	movs	r2, #128	; 0x80
 800a0b6:	0052      	lsls	r2, r2, #1
 800a0b8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a0ba:	4b0e      	ldr	r3, [pc, #56]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a0c0:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	611a      	str	r2, [r3, #16]
  
  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 800a0c6:	490b      	ldr	r1, [pc, #44]	; (800a0f4 <HW_RTC_StartWakeUpAlarm+0x2f8>)
 800a0c8:	4b0b      	ldr	r3, [pc, #44]	; (800a0f8 <HW_RTC_StartWakeUpAlarm+0x2fc>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f7fd fa05 	bl	80074dc <HAL_RTC_SetAlarm_IT>
  DBG( HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct ); );
  DBG_PRINTF("it's %d:%d:%d:%d ", RTC_TimeStruct.Hours, RTC_TimeStruct.Minutes, RTC_TimeStruct.Seconds, ((PREDIV_S - RTC_TimeStruct.SubSeconds)*1000)>>N_PREDIV_S);
  DBG_PRINTF("WU@ %d:%d:%d:%d\n", rtcAlarmHours, rtcAlarmMinutes, rtcAlarmSeconds, (rtcAlarmSubSeconds*1000)>>N_PREDIV_S );
  
  DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
}
 800a0d2:	46c0      	nop			; (mov r8, r8)
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	b00d      	add	sp, #52	; 0x34
 800a0d8:	bd90      	pop	{r4, r7, pc}
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	20000260 	.word	0x20000260
 800a0e0:	000003ff 	.word	0x000003ff
 800a0e4:	00015180 	.word	0x00015180
 800a0e8:	fffffc00 	.word	0xfffffc00
 800a0ec:	0800c4e8 	.word	0x0800c4e8
 800a0f0:	0800c4dc 	.word	0x0800c4dc
 800a0f4:	20000238 	.word	0x20000238
 800a0f8:	20000214 	.word	0x20000214

0800a0fc <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static TimerTime_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  TimerTime_t calendarValue = 0;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	613b      	str	r3, [r7, #16]
  uint32_t first_read;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	4b4a      	ldr	r3, [pc, #296]	; (800a23c <HW_RTC_GetCalendarValue+0x140>)
 800a112:	2200      	movs	r2, #0
 800a114:	0018      	movs	r0, r3
 800a116:	f7fd f875 	bl	8007204 <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
    first_read = RTC_TimeStruct->SubSeconds;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	60fb      	str	r3, [r7, #12]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	4b46      	ldr	r3, [pc, #280]	; (800a23c <HW_RTC_GetCalendarValue+0x140>)
 800a124:	2200      	movs	r2, #0
 800a126:	0018      	movs	r0, r3
 800a128:	f7fd f988 	bl	800743c <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	4b43      	ldr	r3, [pc, #268]	; (800a23c <HW_RTC_GetCalendarValue+0x140>)
 800a130:	2200      	movs	r2, #0
 800a132:	0018      	movs	r0, r3
 800a134:	f7fd f866 	bl	8007204 <HAL_RTC_GetTime>
  } while (first_read != RTC_TimeStruct->SubSeconds);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d1eb      	bne.n	800a11a <HW_RTC_GetCalendarValue+0x1e>
 
  /* years (calc valid up to year 2099)*/
  for( i = 0; i < RTC_DateStruct->Year; i++ )
 800a142:	2300      	movs	r3, #0
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	e017      	b.n	800a178 <HW_RTC_GetCalendarValue+0x7c>
  {
    if( (i % 4) == 0 )
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	2203      	movs	r2, #3
 800a14c:	4013      	ands	r3, r2
 800a14e:	d108      	bne.n	800a162 <HW_RTC_GetCalendarValue+0x66>
    {
      calendarValue += DaysInLeapYear * SecondsInDay;
 800a150:	23b7      	movs	r3, #183	; 0xb7
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	001a      	movs	r2, r3
 800a156:	4b3a      	ldr	r3, [pc, #232]	; (800a240 <HW_RTC_GetCalendarValue+0x144>)
 800a158:	4353      	muls	r3, r2
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	18d3      	adds	r3, r2, r3
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	e007      	b.n	800a172 <HW_RTC_GetCalendarValue+0x76>
    }
    else
    {
      calendarValue += DaysInYear * SecondsInDay;
 800a162:	236e      	movs	r3, #110	; 0x6e
 800a164:	33ff      	adds	r3, #255	; 0xff
 800a166:	001a      	movs	r2, r3
 800a168:	4b35      	ldr	r3, [pc, #212]	; (800a240 <HW_RTC_GetCalendarValue+0x144>)
 800a16a:	4353      	muls	r3, r2
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	18d3      	adds	r3, r2, r3
 800a170:	617b      	str	r3, [r7, #20]
  for( i = 0; i < RTC_DateStruct->Year; i++ )
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	3301      	adds	r3, #1
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	78db      	ldrb	r3, [r3, #3]
 800a17c:	001a      	movs	r2, r3
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	429a      	cmp	r2, r3
 800a182:	d8e1      	bhi.n	800a148 <HW_RTC_GetCalendarValue+0x4c>
    }
  }

  /* months (calc valid up to year 2099)*/
  if(( (RTC_DateStruct->Year % 4) == 0 ) )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	78db      	ldrb	r3, [r3, #3]
 800a188:	2203      	movs	r2, #3
 800a18a:	4013      	ands	r3, r2
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d117      	bne.n	800a1c2 <HW_RTC_GetCalendarValue+0xc6>
  {
    for( i = 0; i < ( RTC_DateStruct->Month - 1 ); i++ )
 800a192:	2300      	movs	r3, #0
 800a194:	613b      	str	r3, [r7, #16]
 800a196:	e00c      	b.n	800a1b2 <HW_RTC_GetCalendarValue+0xb6>
    {
      calendarValue += DaysInMonthLeapYear[i] * SecondsInDay;
 800a198:	4a2a      	ldr	r2, [pc, #168]	; (800a244 <HW_RTC_GetCalendarValue+0x148>)
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	18d3      	adds	r3, r2, r3
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	001a      	movs	r2, r3
 800a1a2:	4b27      	ldr	r3, [pc, #156]	; (800a240 <HW_RTC_GetCalendarValue+0x144>)
 800a1a4:	4353      	muls	r3, r2
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	18d3      	adds	r3, r2, r3
 800a1aa:	617b      	str	r3, [r7, #20]
    for( i = 0; i < ( RTC_DateStruct->Month - 1 ); i++ )
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	613b      	str	r3, [r7, #16]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	785b      	ldrb	r3, [r3, #1]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	001a      	movs	r2, r3
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d8eb      	bhi.n	800a198 <HW_RTC_GetCalendarValue+0x9c>
 800a1c0:	e016      	b.n	800a1f0 <HW_RTC_GetCalendarValue+0xf4>
    }
  }
  else
  {
    for( i = 0;  i < ( RTC_DateStruct->Month - 1 ); i++ )
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	613b      	str	r3, [r7, #16]
 800a1c6:	e00c      	b.n	800a1e2 <HW_RTC_GetCalendarValue+0xe6>
    {
      calendarValue += DaysInMonth[i] * SecondsInDay;
 800a1c8:	4a1f      	ldr	r2, [pc, #124]	; (800a248 <HW_RTC_GetCalendarValue+0x14c>)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	18d3      	adds	r3, r2, r3
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	001a      	movs	r2, r3
 800a1d2:	4b1b      	ldr	r3, [pc, #108]	; (800a240 <HW_RTC_GetCalendarValue+0x144>)
 800a1d4:	4353      	muls	r3, r2
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	18d3      	adds	r3, r2, r3
 800a1da:	617b      	str	r3, [r7, #20]
    for( i = 0;  i < ( RTC_DateStruct->Month - 1 ); i++ )
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	613b      	str	r3, [r7, #16]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	001a      	movs	r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d8eb      	bhi.n	800a1c8 <HW_RTC_GetCalendarValue+0xcc>
    }
  }

  /* days */
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	789b      	ldrb	r3, [r3, #2]
 800a1f4:	0019      	movs	r1, r3
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SecondsInMinute ) +
                     ( ( uint32_t )RTC_TimeStruct->Hours * SecondsInHour ) + 
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	001a      	movs	r2, r3
 800a1fc:	23e1      	movs	r3, #225	; 0xe1
 800a1fe:	011b      	lsls	r3, r3, #4
 800a200:	435a      	muls	r2, r3
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SecondsInMinute ) +
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	203c      	movs	r0, #60	; 0x3c
 800a208:	4343      	muls	r3, r0
 800a20a:	18d3      	adds	r3, r2, r3
 800a20c:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( RTC_DateStruct->Date * SecondsInDay ) ) );
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	789b      	ldrb	r3, [r3, #2]
 800a212:	0019      	movs	r1, r3
 800a214:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <HW_RTC_GetCalendarValue+0x144>)
 800a216:	434b      	muls	r3, r1
                     ( ( uint32_t )RTC_TimeStruct->Hours * SecondsInHour ) + 
 800a218:	18d3      	adds	r3, r2, r3
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	18d3      	adds	r3, r2, r3
 800a21e:	617b      	str	r3, [r7, #20]
  
  calendarValue = (calendarValue<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	029a      	lsls	r2, r3, #10
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	4a08      	ldr	r2, [pc, #32]	; (800a24c <HW_RTC_GetCalendarValue+0x150>)
 800a22c:	4694      	mov	ip, r2
 800a22e:	4463      	add	r3, ip
 800a230:	617b      	str	r3, [r7, #20]

  return( calendarValue );
 800a232:	697b      	ldr	r3, [r7, #20]
}
 800a234:	0018      	movs	r0, r3
 800a236:	46bd      	mov	sp, r7
 800a238:	b006      	add	sp, #24
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000214 	.word	0x20000214
 800a240:	00015180 	.word	0x00015180
 800a244:	0800c4e8 	.word	0x0800c4e8
 800a248:	0800c4dc 	.word	0x0800c4dc
 800a24c:	000003ff 	.word	0x000003ff

0800a250 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800a256:	1d3b      	adds	r3, r7, #4
 800a258:	0018      	movs	r0, r3
 800a25a:	2314      	movs	r3, #20
 800a25c:	001a      	movs	r2, r3
 800a25e:	2100      	movs	r1, #0
 800a260:	f001 fa1b 	bl	800b69a <memset>
  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 800a264:	4b37      	ldr	r3, [pc, #220]	; (800a344 <HW_SPI_Init+0xf4>)
 800a266:	4a38      	ldr	r2, [pc, #224]	; (800a348 <HW_SPI_Init+0xf8>)
 800a268:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 800a26a:	4b38      	ldr	r3, [pc, #224]	; (800a34c <HW_SPI_Init+0xfc>)
 800a26c:	0018      	movs	r0, r3
 800a26e:	f000 f8fb 	bl	800a468 <SpiFrequency>
 800a272:	0002      	movs	r2, r0
 800a274:	4b33      	ldr	r3, [pc, #204]	; (800a344 <HW_SPI_Init+0xf4>)
 800a276:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800a278:	4b32      	ldr	r3, [pc, #200]	; (800a344 <HW_SPI_Init+0xf4>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800a27e:	4b31      	ldr	r3, [pc, #196]	; (800a344 <HW_SPI_Init+0xf4>)
 800a280:	2282      	movs	r2, #130	; 0x82
 800a282:	0052      	lsls	r2, r2, #1
 800a284:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800a286:	4b2f      	ldr	r3, [pc, #188]	; (800a344 <HW_SPI_Init+0xf4>)
 800a288:	2200      	movs	r2, #0
 800a28a:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800a28c:	4b2d      	ldr	r3, [pc, #180]	; (800a344 <HW_SPI_Init+0xf4>)
 800a28e:	2200      	movs	r2, #0
 800a290:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800a292:	4b2c      	ldr	r3, [pc, #176]	; (800a344 <HW_SPI_Init+0xf4>)
 800a294:	2200      	movs	r2, #0
 800a296:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 800a298:	4b2a      	ldr	r3, [pc, #168]	; (800a344 <HW_SPI_Init+0xf4>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800a29e:	4b29      	ldr	r3, [pc, #164]	; (800a344 <HW_SPI_Init+0xf4>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 800a2a4:	4b27      	ldr	r3, [pc, #156]	; (800a344 <HW_SPI_Init+0xf4>)
 800a2a6:	2280      	movs	r2, #128	; 0x80
 800a2a8:	0092      	lsls	r2, r2, #2
 800a2aa:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800a2ac:	4b25      	ldr	r3, [pc, #148]	; (800a344 <HW_SPI_Init+0xf4>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE(); 
 800a2b2:	4b27      	ldr	r3, [pc, #156]	; (800a350 <HW_SPI_Init+0x100>)
 800a2b4:	4a26      	ldr	r2, [pc, #152]	; (800a350 <HW_SPI_Init+0x100>)
 800a2b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a2b8:	2180      	movs	r1, #128	; 0x80
 800a2ba:	0149      	lsls	r1, r1, #5
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	635a      	str	r2, [r3, #52]	; 0x34


  if(HAL_SPI_Init( &hspi) != HAL_OK)
 800a2c0:	4b20      	ldr	r3, [pc, #128]	; (800a344 <HW_SPI_Init+0xf4>)
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f7fd fd06 	bl	8007cd4 <HAL_SPI_Init>
 800a2c8:	1e03      	subs	r3, r0, #0
 800a2ca:	d001      	beq.n	800a2d0 <HW_SPI_Init+0x80>
  {
    /* Initialization Error */
     Error_Handler();
 800a2cc:	f7ff fa20 	bl	8009710 <Error_Handler>
  }

  /*##-2- Configure the SPI GPIOs */
  initStruct.Mode =GPIO_MODE_AF_PP;
 800a2d0:	1d3b      	adds	r3, r7, #4
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 800a2d6:	1d3b      	adds	r3, r7, #4
 800a2d8:	2202      	movs	r2, #2
 800a2da:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800a2dc:	1d3b      	adds	r3, r7, #4
 800a2de:	2203      	movs	r2, #3
 800a2e0:	60da      	str	r2, [r3, #12]
  initStruct.Alternate= SPI1_AF ;
 800a2e2:	1d3b      	adds	r3, r7, #4
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	611a      	str	r2, [r3, #16]

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct); 
 800a2e8:	1d3b      	adds	r3, r7, #4
 800a2ea:	481a      	ldr	r0, [pc, #104]	; (800a354 <HW_SPI_Init+0x104>)
 800a2ec:	001a      	movs	r2, r3
 800a2ee:	2108      	movs	r1, #8
 800a2f0:	f7ff fa8e 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct); 
 800a2f4:	1d3a      	adds	r2, r7, #4
 800a2f6:	23a0      	movs	r3, #160	; 0xa0
 800a2f8:	05db      	lsls	r3, r3, #23
 800a2fa:	2140      	movs	r1, #64	; 0x40
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f7ff fa87 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct); 
 800a302:	1d3a      	adds	r2, r7, #4
 800a304:	23a0      	movs	r3, #160	; 0xa0
 800a306:	05db      	lsls	r3, r3, #23
 800a308:	2180      	movs	r1, #128	; 0x80
 800a30a:	0018      	movs	r0, r3
 800a30c:	f7ff fa80 	bl	8009810 <HW_GPIO_Init>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800a310:	1d3b      	adds	r3, r7, #4
 800a312:	2201      	movs	r2, #1
 800a314:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 800a316:	1d3b      	adds	r3, r7, #4
 800a318:	2201      	movs	r2, #1
 800a31a:	609a      	str	r2, [r3, #8]

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800a31c:	1d3a      	adds	r2, r7, #4
 800a31e:	2380      	movs	r3, #128	; 0x80
 800a320:	0219      	lsls	r1, r3, #8
 800a322:	23a0      	movs	r3, #160	; 0xa0
 800a324:	05db      	lsls	r3, r3, #23
 800a326:	0018      	movs	r0, r3
 800a328:	f7ff fa72 	bl	8009810 <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800a32c:	2380      	movs	r3, #128	; 0x80
 800a32e:	0219      	lsls	r1, r3, #8
 800a330:	23a0      	movs	r3, #160	; 0xa0
 800a332:	05db      	lsls	r3, r3, #23
 800a334:	2201      	movs	r2, #1
 800a336:	0018      	movs	r0, r3
 800a338:	f7ff fb36 	bl	80099a8 <HW_GPIO_Write>
}
 800a33c:	46c0      	nop			; (mov r8, r8)
 800a33e:	46bd      	mov	sp, r7
 800a340:	b006      	add	sp, #24
 800a342:	bd80      	pop	{r7, pc}
 800a344:	2000027c 	.word	0x2000027c
 800a348:	40013000 	.word	0x40013000
 800a34c:	00989680 	.word	0x00989680
 800a350:	40021000 	.word	0x40021000
 800a354:	50000400 	.word	0x50000400

0800a358 <HW_SPI_DeInit>:
 * @brief De-initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_DeInit( void )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800a35e:	1d3b      	adds	r3, r7, #4
 800a360:	0018      	movs	r0, r3
 800a362:	2314      	movs	r3, #20
 800a364:	001a      	movs	r2, r3
 800a366:	2100      	movs	r1, #0
 800a368:	f001 f997 	bl	800b69a <memset>

  HAL_SPI_DeInit( &hspi);
 800a36c:	4b2d      	ldr	r3, [pc, #180]	; (800a424 <HW_SPI_DeInit+0xcc>)
 800a36e:	0018      	movs	r0, r3
 800a370:	f7fd fd1a 	bl	8007da8 <HAL_SPI_DeInit>

    /*##-1- Reset peripherals ####*/
  __HAL_RCC_SPI1_FORCE_RESET();
 800a374:	4b2c      	ldr	r3, [pc, #176]	; (800a428 <HW_SPI_DeInit+0xd0>)
 800a376:	4a2c      	ldr	r2, [pc, #176]	; (800a428 <HW_SPI_DeInit+0xd0>)
 800a378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a37a:	2180      	movs	r1, #128	; 0x80
 800a37c:	0149      	lsls	r1, r1, #5
 800a37e:	430a      	orrs	r2, r1
 800a380:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_SPI1_RELEASE_RESET();
 800a382:	4b29      	ldr	r3, [pc, #164]	; (800a428 <HW_SPI_DeInit+0xd0>)
 800a384:	4a28      	ldr	r2, [pc, #160]	; (800a428 <HW_SPI_DeInit+0xd0>)
 800a386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a388:	4928      	ldr	r1, [pc, #160]	; (800a42c <HW_SPI_DeInit+0xd4>)
 800a38a:	400a      	ands	r2, r1
 800a38c:	625a      	str	r2, [r3, #36]	; 0x24
    
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800a38e:	1d3b      	adds	r3, r7, #4
 800a390:	2201      	movs	r2, #1
 800a392:	605a      	str	r2, [r3, #4]

  initStruct.Pull =GPIO_NOPULL  ; 
 800a394:	1d3b      	adds	r3, r7, #4
 800a396:	2200      	movs	r2, #0
 800a398:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 800a39a:	1d3a      	adds	r2, r7, #4
 800a39c:	23a0      	movs	r3, #160	; 0xa0
 800a39e:	05db      	lsls	r3, r3, #23
 800a3a0:	2180      	movs	r1, #128	; 0x80
 800a3a2:	0018      	movs	r0, r3
 800a3a4:	f7ff fa34 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MOSI_PORT, RADIO_MOSI_PIN, 0 );
 800a3a8:	23a0      	movs	r3, #160	; 0xa0
 800a3aa:	05db      	lsls	r3, r3, #23
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	2180      	movs	r1, #128	; 0x80
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	f7ff faf9 	bl	80099a8 <HW_GPIO_Write>
  
  initStruct.Pull =GPIO_PULLDOWN; 
 800a3b6:	1d3b      	adds	r3, r7, #4
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init ( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct ); 
 800a3bc:	1d3a      	adds	r2, r7, #4
 800a3be:	23a0      	movs	r3, #160	; 0xa0
 800a3c0:	05db      	lsls	r3, r3, #23
 800a3c2:	2140      	movs	r1, #64	; 0x40
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f7ff fa23 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MISO_PORT, RADIO_MISO_PIN, 0 );
 800a3ca:	23a0      	movs	r3, #160	; 0xa0
 800a3cc:	05db      	lsls	r3, r3, #23
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2140      	movs	r1, #64	; 0x40
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f7ff fae8 	bl	80099a8 <HW_GPIO_Write>
  
  initStruct.Pull =GPIO_NOPULL  ; 
 800a3d8:	1d3b      	adds	r3, r7, #4
 800a3da:	2200      	movs	r2, #0
 800a3dc:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init ( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct ); 
 800a3de:	1d3b      	adds	r3, r7, #4
 800a3e0:	4813      	ldr	r0, [pc, #76]	; (800a430 <HW_SPI_DeInit+0xd8>)
 800a3e2:	001a      	movs	r2, r3
 800a3e4:	2108      	movs	r1, #8
 800a3e6:	f7ff fa13 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write(  RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0 );
 800a3ea:	4b11      	ldr	r3, [pc, #68]	; (800a430 <HW_SPI_DeInit+0xd8>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2108      	movs	r1, #8
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f7ff fad9 	bl	80099a8 <HW_GPIO_Write>
  
  initStruct.Pull =GPIO_PULLUP  ; 
 800a3f6:	1d3b      	adds	r3, r7, #4
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 800a3fc:	1d3a      	adds	r2, r7, #4
 800a3fe:	2380      	movs	r3, #128	; 0x80
 800a400:	0219      	lsls	r1, r3, #8
 800a402:	23a0      	movs	r3, #160	; 0xa0
 800a404:	05db      	lsls	r3, r3, #23
 800a406:	0018      	movs	r0, r3
 800a408:	f7ff fa02 	bl	8009810 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN , 1 );
 800a40c:	2380      	movs	r3, #128	; 0x80
 800a40e:	0219      	lsls	r1, r3, #8
 800a410:	23a0      	movs	r3, #160	; 0xa0
 800a412:	05db      	lsls	r3, r3, #23
 800a414:	2201      	movs	r2, #1
 800a416:	0018      	movs	r0, r3
 800a418:	f7ff fac6 	bl	80099a8 <HW_GPIO_Write>
}
 800a41c:	46c0      	nop			; (mov r8, r8)
 800a41e:	46bd      	mov	sp, r7
 800a420:	b006      	add	sp, #24
 800a422:	bd80      	pop	{r7, pc}
 800a424:	2000027c 	.word	0x2000027c
 800a428:	40021000 	.word	0x40021000
 800a42c:	ffffefff 	.word	0xffffefff
 800a430:	50000400 	.word	0x50000400

0800a434 <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut( uint16_t txData )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af02      	add	r7, sp, #8
 800a43a:	0002      	movs	r2, r0
 800a43c:	1dbb      	adds	r3, r7, #6
 800a43e:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800a440:	230e      	movs	r3, #14
 800a442:	18fa      	adds	r2, r7, r3
 800a444:	1db9      	adds	r1, r7, #6
 800a446:	4807      	ldr	r0, [pc, #28]	; (800a464 <HW_SPI_InOut+0x30>)
 800a448:	2301      	movs	r3, #1
 800a44a:	425b      	negs	r3, r3
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	2301      	movs	r3, #1
 800a450:	f7fd fce4 	bl	8007e1c <HAL_SPI_TransmitReceive>

  return rxData;
 800a454:	230e      	movs	r3, #14
 800a456:	18fb      	adds	r3, r7, r3
 800a458:	881b      	ldrh	r3, [r3, #0]
}
 800a45a:	0018      	movs	r0, r3
 800a45c:	46bd      	mov	sp, r7
 800a45e:	b004      	add	sp, #16
 800a460:	bd80      	pop	{r7, pc}
 800a462:	46c0      	nop			; (mov r8, r8)
 800a464:	2000027c 	.word	0x2000027c

0800a468 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 800a474:	4b17      	ldr	r3, [pc, #92]	; (800a4d4 <SpiFrequency+0x6c>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 800a47a:	e008      	b.n	800a48e <SpiFrequency+0x26>
  {
    divisor++;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	3301      	adds	r3, #1
 800a480:	617b      	str	r3, [r7, #20]
    SysClkTmp= ( SysClkTmp >> 1);
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	085b      	lsrs	r3, r3, #1
 800a486:	613b      	str	r3, [r7, #16]
    
    if (divisor >= 7)
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2b06      	cmp	r3, #6
 800a48c:	d804      	bhi.n	800a498 <SpiFrequency+0x30>
  while( SysClkTmp > hz)
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	429a      	cmp	r2, r3
 800a494:	d8f2      	bhi.n	800a47c <SpiFrequency+0x14>
 800a496:	e000      	b.n	800a49a <SpiFrequency+0x32>
      break;
 800a498:	46c0      	nop			; (mov r8, r8)
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2204      	movs	r2, #4
 800a49e:	4013      	ands	r3, r2
 800a4a0:	d101      	bne.n	800a4a6 <SpiFrequency+0x3e>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	e000      	b.n	800a4a8 <SpiFrequency+0x40>
 800a4a6:	2220      	movs	r2, #32
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2102      	movs	r1, #2
 800a4ac:	400b      	ands	r3, r1
 800a4ae:	d101      	bne.n	800a4b4 <SpiFrequency+0x4c>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	e000      	b.n	800a4b6 <SpiFrequency+0x4e>
 800a4b4:	2310      	movs	r3, #16
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a4b6:	431a      	orrs	r2, r3
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	400b      	ands	r3, r1
 800a4be:	d101      	bne.n	800a4c4 <SpiFrequency+0x5c>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	e000      	b.n	800a4c6 <SpiFrequency+0x5e>
 800a4c4:	2308      	movs	r3, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
  
  return baudRate;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
}
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	b006      	add	sp, #24
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	20000028 	.word	0x20000028

0800a4d8 <main>:
};

struct datosMicro misDat[150];
int dat = 0;

int main(void) {
 800a4d8:	b590      	push	{r4, r7, lr}
 800a4da:	b08d      	sub	sp, #52	; 0x34
 800a4dc:	af0a      	add	r7, sp, #40	; 0x28

	HAL_Init();
 800a4de:	f7fa fef3 	bl	80052c8 <HAL_Init>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	425b      	negs	r3, r3
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	f7fb f98c 	bl	8005808 <HAL_NVIC_SetPriority>

	SystemClock_Config();
 800a4f0:	f000 fbd4 	bl	800ac9c <SystemClock_Config>

	DBG_Init();
 800a4f4:	f7ff f8dc 	bl	80096b0 <DBG_Init>
	HW_Init();
 800a4f8:	f000 fb9e 	bl	800ac38 <HW_Init>

//	LCD_Config();
//	LCD_Init();
//	LCD_Command(LCD_CLEAR_DISPLAY);

	SPI_Config();
 800a4fc:	f7ff f90c 	bl	8009718 <SPI_Config>
	SPI_Init();
 800a500:	f7ff f954 	bl	80097ac <SPI_Init>

	PRINTF("VERSION: %X\n\r", VERSION);
 800a504:	4ace      	ldr	r2, [pc, #824]	; (800a840 <main+0x368>)
 800a506:	4bcf      	ldr	r3, [pc, #828]	; (800a844 <main+0x36c>)
 800a508:	0011      	movs	r1, r2
 800a50a:	0018      	movs	r0, r3
 800a50c:	f000 fefc 	bl	800b308 <vcom_Send>

//	 Radio initialization
	RadioEvents.TxDone = OnTxDone;
 800a510:	4bcd      	ldr	r3, [pc, #820]	; (800a848 <main+0x370>)
 800a512:	4ace      	ldr	r2, [pc, #824]	; (800a84c <main+0x374>)
 800a514:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 800a516:	4bcc      	ldr	r3, [pc, #816]	; (800a848 <main+0x370>)
 800a518:	4acd      	ldr	r2, [pc, #820]	; (800a850 <main+0x378>)
 800a51a:	609a      	str	r2, [r3, #8]
	RadioEvents.TxTimeout = OnTxTimeout;
 800a51c:	4bca      	ldr	r3, [pc, #808]	; (800a848 <main+0x370>)
 800a51e:	4acd      	ldr	r2, [pc, #820]	; (800a854 <main+0x37c>)
 800a520:	605a      	str	r2, [r3, #4]
	RadioEvents.RxTimeout = OnRxTimeout;
 800a522:	4bc9      	ldr	r3, [pc, #804]	; (800a848 <main+0x370>)
 800a524:	4acc      	ldr	r2, [pc, #816]	; (800a858 <main+0x380>)
 800a526:	60da      	str	r2, [r3, #12]
	RadioEvents.RxError = OnRxError;
 800a528:	4bc7      	ldr	r3, [pc, #796]	; (800a848 <main+0x370>)
 800a52a:	4acc      	ldr	r2, [pc, #816]	; (800a85c <main+0x384>)
 800a52c:	611a      	str	r2, [r3, #16]

	Radio.Init(&RadioEvents);
 800a52e:	4bcc      	ldr	r3, [pc, #816]	; (800a860 <main+0x388>)
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	4ac5      	ldr	r2, [pc, #788]	; (800a848 <main+0x370>)
 800a534:	0010      	movs	r0, r2
 800a536:	4798      	blx	r3

	Radio.SetChannel( RF_FREQUENCY);
 800a538:	4bc9      	ldr	r3, [pc, #804]	; (800a860 <main+0x388>)
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	4ac9      	ldr	r2, [pc, #804]	; (800a864 <main+0x38c>)
 800a53e:	0010      	movs	r0, r2
 800a540:	4798      	blx	r3

#if defined( USE_MODEM_LORA )

	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800a542:	4bc7      	ldr	r3, [pc, #796]	; (800a860 <main+0x388>)
 800a544:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a546:	4bc8      	ldr	r3, [pc, #800]	; (800a868 <main+0x390>)
 800a548:	9308      	str	r3, [sp, #32]
 800a54a:	2300      	movs	r3, #0
 800a54c:	9307      	str	r3, [sp, #28]
 800a54e:	2300      	movs	r3, #0
 800a550:	9306      	str	r3, [sp, #24]
 800a552:	2300      	movs	r3, #0
 800a554:	9305      	str	r3, [sp, #20]
 800a556:	2301      	movs	r3, #1
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	2300      	movs	r3, #0
 800a55c:	9303      	str	r3, [sp, #12]
 800a55e:	2308      	movs	r3, #8
 800a560:	9302      	str	r3, [sp, #8]
 800a562:	2301      	movs	r3, #1
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	2307      	movs	r3, #7
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	2300      	movs	r3, #0
 800a56c:	2200      	movs	r2, #0
 800a56e:	210e      	movs	r1, #14
 800a570:	2001      	movs	r0, #1
 800a572:	47a0      	blx	r4
	LORA_SPREADING_FACTOR, LORA_CODINGRATE,
	LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
	true, 0, 0, LORA_IQ_INVERSION_ON, 3000000);

	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800a574:	4bba      	ldr	r3, [pc, #744]	; (800a860 <main+0x388>)
 800a576:	6a1c      	ldr	r4, [r3, #32]
 800a578:	2301      	movs	r3, #1
 800a57a:	9309      	str	r3, [sp, #36]	; 0x24
 800a57c:	2300      	movs	r3, #0
 800a57e:	9308      	str	r3, [sp, #32]
 800a580:	2300      	movs	r3, #0
 800a582:	9307      	str	r3, [sp, #28]
 800a584:	2300      	movs	r3, #0
 800a586:	9306      	str	r3, [sp, #24]
 800a588:	2301      	movs	r3, #1
 800a58a:	9305      	str	r3, [sp, #20]
 800a58c:	2300      	movs	r3, #0
 800a58e:	9304      	str	r3, [sp, #16]
 800a590:	2300      	movs	r3, #0
 800a592:	9303      	str	r3, [sp, #12]
 800a594:	2305      	movs	r3, #5
 800a596:	9302      	str	r3, [sp, #8]
 800a598:	2308      	movs	r3, #8
 800a59a:	9301      	str	r3, [sp, #4]
 800a59c:	2300      	movs	r3, #0
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	2207      	movs	r2, #7
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	47a0      	blx	r4
	LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON, 0, true, 0, 0,
	LORA_IQ_INVERSION_ON, true);
#endif

	//Establece la radio en modo de recepcion durante un tiempo
	Radio.Rx( RX_TIMEOUT_VALUE);
 800a5aa:	4bad      	ldr	r3, [pc, #692]	; (800a860 <main+0x388>)
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ae:	22fa      	movs	r2, #250	; 0xfa
 800a5b0:	0092      	lsls	r2, r2, #2
 800a5b2:	0010      	movs	r0, r2
 800a5b4:	4798      	blx	r3

	/* Master */
	bool isMaster = false;
 800a5b6:	1dfb      	adds	r3, r7, #7
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	701a      	strb	r2, [r3, #0]

	ID = 2;
 800a5bc:	4bab      	ldr	r3, [pc, #684]	; (800a86c <main+0x394>)
 800a5be:	2202      	movs	r2, #2
 800a5c0:	601a      	str	r2, [r3, #0]
	sprintf(IDLora,"%d", ID);
 800a5c2:	4baa      	ldr	r3, [pc, #680]	; (800a86c <main+0x394>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	49aa      	ldr	r1, [pc, #680]	; (800a870 <main+0x398>)
 800a5c8:	4baa      	ldr	r3, [pc, #680]	; (800a874 <main+0x39c>)
 800a5ca:	0018      	movs	r0, r3
 800a5cc:	f000 fe48 	bl	800b260 <siprintf>
	IDSlave = ID+1;
 800a5d0:	4ba6      	ldr	r3, [pc, #664]	; (800a86c <main+0x394>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	4ba8      	ldr	r3, [pc, #672]	; (800a878 <main+0x3a0>)
 800a5d8:	601a      	str	r2, [r3, #0]
	sprintf(IDSlaveLora,"%d", IDSlave);
 800a5da:	4ba7      	ldr	r3, [pc, #668]	; (800a878 <main+0x3a0>)
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	49a4      	ldr	r1, [pc, #656]	; (800a870 <main+0x398>)
 800a5e0:	4ba6      	ldr	r3, [pc, #664]	; (800a87c <main+0x3a4>)
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f000 fe3c 	bl	800b260 <siprintf>

	while (1) {
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) ReadyMsg, (uint8_t *) RxReady, 80, 2000);
 800a5e8:	4aa5      	ldr	r2, [pc, #660]	; (800a880 <main+0x3a8>)
 800a5ea:	49a6      	ldr	r1, [pc, #664]	; (800a884 <main+0x3ac>)
 800a5ec:	48a6      	ldr	r0, [pc, #664]	; (800a888 <main+0x3b0>)
 800a5ee:	23fa      	movs	r3, #250	; 0xfa
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	2350      	movs	r3, #80	; 0x50
 800a5f6:	f7fd fc11 	bl	8007e1c <HAL_SPI_TransmitReceive>
		PRINTF((char*)RxReady);
 800a5fa:	4ba1      	ldr	r3, [pc, #644]	; (800a880 <main+0x3a8>)
 800a5fc:	0018      	movs	r0, r3
 800a5fe:	f000 fe83 	bl	800b308 <vcom_Send>
		Delay(500);
 800a602:	4ba2      	ldr	r3, [pc, #648]	; (800a88c <main+0x3b4>)
 800a604:	1c18      	adds	r0, r3, #0
 800a606:	f7fe fdbb 	bl	8009180 <Delay>
		if (recibidoReady == 0) {
 800a60a:	4ba1      	ldr	r3, [pc, #644]	; (800a890 <main+0x3b8>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d134      	bne.n	800a67c <main+0x1a4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800a612:	2380      	movs	r3, #128	; 0x80
 800a614:	015b      	lsls	r3, r3, #5
 800a616:	489f      	ldr	r0, [pc, #636]	; (800a894 <main+0x3bc>)
 800a618:	2200      	movs	r2, #0
 800a61a:	0019      	movs	r1, r3
 800a61c:	f7fb faca 	bl	8005bb4 <HAL_GPIO_WritePin>
			if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) ReadyMsg, (uint8_t *) RxReady, 5, 2000) == HAL_OK) {
 800a620:	4a97      	ldr	r2, [pc, #604]	; (800a880 <main+0x3a8>)
 800a622:	4998      	ldr	r1, [pc, #608]	; (800a884 <main+0x3ac>)
 800a624:	4898      	ldr	r0, [pc, #608]	; (800a888 <main+0x3b0>)
 800a626:	23fa      	movs	r3, #250	; 0xfa
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	2305      	movs	r3, #5
 800a62e:	f7fd fbf5 	bl	8007e1c <HAL_SPI_TransmitReceive>
 800a632:	1e03      	subs	r3, r0, #0
 800a634:	d11a      	bne.n	800a66c <main+0x194>
				PRINTF(RxReady);
 800a636:	4b92      	ldr	r3, [pc, #584]	; (800a880 <main+0x3a8>)
 800a638:	0018      	movs	r0, r3
 800a63a:	f000 fe65 	bl	800b308 <vcom_Send>
				while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 800a63e:	46c0      	nop			; (mov r8, r8)
 800a640:	4b91      	ldr	r3, [pc, #580]	; (800a888 <main+0x3b0>)
 800a642:	0018      	movs	r0, r3
 800a644:	f7fd ff18 	bl	8008478 <HAL_SPI_GetState>
 800a648:	0003      	movs	r3, r0
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d1f8      	bne.n	800a640 <main+0x168>
				}
				if (strncmp((const char*) RxReady, (const char*) ReadyMsg, 5) == 0) {
 800a64e:	498d      	ldr	r1, [pc, #564]	; (800a884 <main+0x3ac>)
 800a650:	4b8b      	ldr	r3, [pc, #556]	; (800a880 <main+0x3a8>)
 800a652:	2205      	movs	r2, #5
 800a654:	0018      	movs	r0, r3
 800a656:	f001 f830 	bl	800b6ba <strncmp>
 800a65a:	1e03      	subs	r3, r0, #0
 800a65c:	d106      	bne.n	800a66c <main+0x194>
					recibidoReady = 1;
 800a65e:	4b8c      	ldr	r3, [pc, #560]	; (800a890 <main+0x3b8>)
 800a660:	2201      	movs	r2, #1
 800a662:	601a      	str	r2, [r3, #0]
					PRINTF("Recibido Ready\r\n");
 800a664:	4b8c      	ldr	r3, [pc, #560]	; (800a898 <main+0x3c0>)
 800a666:	0018      	movs	r0, r3
 800a668:	f000 fe4e 	bl	800b308 <vcom_Send>
				}
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a66c:	2380      	movs	r3, #128	; 0x80
 800a66e:	015b      	lsls	r3, r3, #5
 800a670:	4888      	ldr	r0, [pc, #544]	; (800a894 <main+0x3bc>)
 800a672:	2201      	movs	r2, #1
 800a674:	0019      	movs	r1, r3
 800a676:	f7fb fa9d 	bl	8005bb4 <HAL_GPIO_WritePin>
 800a67a:	e05e      	b.n	800a73a <main+0x262>
		} else if (recibidoReady == 1) {
 800a67c:	4b84      	ldr	r3, [pc, #528]	; (800a890 <main+0x3b8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d15a      	bne.n	800a73a <main+0x262>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800a684:	2380      	movs	r3, #128	; 0x80
 800a686:	015b      	lsls	r3, r3, #5
 800a688:	4882      	ldr	r0, [pc, #520]	; (800a894 <main+0x3bc>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	0019      	movs	r1, r3
 800a68e:	f7fb fa91 	bl	8005bb4 <HAL_GPIO_WritePin>
			if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) OKMsg, (uint8_t *) parsingBuff, 40, 2000) == HAL_OK) {
 800a692:	4a82      	ldr	r2, [pc, #520]	; (800a89c <main+0x3c4>)
 800a694:	4982      	ldr	r1, [pc, #520]	; (800a8a0 <main+0x3c8>)
 800a696:	487c      	ldr	r0, [pc, #496]	; (800a888 <main+0x3b0>)
 800a698:	23fa      	movs	r3, #250	; 0xfa
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	2328      	movs	r3, #40	; 0x28
 800a6a0:	f7fd fbbc 	bl	8007e1c <HAL_SPI_TransmitReceive>
 800a6a4:	1e03      	subs	r3, r0, #0
 800a6a6:	d141      	bne.n	800a72c <main+0x254>
				while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 800a6a8:	46c0      	nop			; (mov r8, r8)
 800a6aa:	4b77      	ldr	r3, [pc, #476]	; (800a888 <main+0x3b0>)
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	f7fd fee3 	bl	8008478 <HAL_SPI_GetState>
 800a6b2:	0003      	movs	r3, r0
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d1f8      	bne.n	800a6aa <main+0x1d2>
				}
				strncpy(BuffDatos, parsingBuff + 1, 38);
 800a6b8:	497a      	ldr	r1, [pc, #488]	; (800a8a4 <main+0x3cc>)
 800a6ba:	4b7b      	ldr	r3, [pc, #492]	; (800a8a8 <main+0x3d0>)
 800a6bc:	2226      	movs	r2, #38	; 0x26
 800a6be:	0018      	movs	r0, r3
 800a6c0:	f001 f80c 	bl	800b6dc <strncpy>
				strcpy(misDat[i].datos, BuffDatos);
 800a6c4:	4b79      	ldr	r3, [pc, #484]	; (800a8ac <main+0x3d4>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2264      	movs	r2, #100	; 0x64
 800a6ca:	435a      	muls	r2, r3
 800a6cc:	4b78      	ldr	r3, [pc, #480]	; (800a8b0 <main+0x3d8>)
 800a6ce:	18d3      	adds	r3, r2, r3
 800a6d0:	4a75      	ldr	r2, [pc, #468]	; (800a8a8 <main+0x3d0>)
 800a6d2:	0011      	movs	r1, r2
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	f000 ffe8 	bl	800b6aa <strcpy>
//				strcpy(misDat[i].datos, parsingBuff);
				if (strncmp((const char*) BuffDatos, (const char*) "\nGPS", 4)	== 0) {
 800a6da:	4976      	ldr	r1, [pc, #472]	; (800a8b4 <main+0x3dc>)
 800a6dc:	4b72      	ldr	r3, [pc, #456]	; (800a8a8 <main+0x3d0>)
 800a6de:	2204      	movs	r2, #4
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f000 ffea 	bl	800b6ba <strncmp>
 800a6e6:	1e03      	subs	r3, r0, #0
 800a6e8:	d120      	bne.n	800a72c <main+0x254>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a6ea:	2380      	movs	r3, #128	; 0x80
 800a6ec:	015b      	lsls	r3, r3, #5
 800a6ee:	4869      	ldr	r0, [pc, #420]	; (800a894 <main+0x3bc>)
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	0019      	movs	r1, r3
 800a6f4:	f7fb fa5e 	bl	8005bb4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800a6f8:	2380      	movs	r3, #128	; 0x80
 800a6fa:	015b      	lsls	r3, r3, #5
 800a6fc:	4865      	ldr	r0, [pc, #404]	; (800a894 <main+0x3bc>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	0019      	movs	r1, r3
 800a702:	f7fb fa57 	bl	8005bb4 <HAL_GPIO_WritePin>
					if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) BuffDatos,(uint8_t *) OKMsg, 40, 2000) == HAL_OK) {
 800a706:	4a66      	ldr	r2, [pc, #408]	; (800a8a0 <main+0x3c8>)
 800a708:	4967      	ldr	r1, [pc, #412]	; (800a8a8 <main+0x3d0>)
 800a70a:	485f      	ldr	r0, [pc, #380]	; (800a888 <main+0x3b0>)
 800a70c:	23fa      	movs	r3, #250	; 0xfa
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	2328      	movs	r3, #40	; 0x28
 800a714:	f7fd fb82 	bl	8007e1c <HAL_SPI_TransmitReceive>
 800a718:	1e03      	subs	r3, r0, #0
 800a71a:	d107      	bne.n	800a72c <main+0x254>
						while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 800a71c:	46c0      	nop			; (mov r8, r8)
 800a71e:	4b5a      	ldr	r3, [pc, #360]	; (800a888 <main+0x3b0>)
 800a720:	0018      	movs	r0, r3
 800a722:	f7fd fea9 	bl	8008478 <HAL_SPI_GetState>
 800a726:	0003      	movs	r3, r0
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d1f8      	bne.n	800a71e <main+0x246>
						}
					}
				}
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a72c:	2380      	movs	r3, #128	; 0x80
 800a72e:	015b      	lsls	r3, r3, #5
 800a730:	4858      	ldr	r0, [pc, #352]	; (800a894 <main+0x3bc>)
 800a732:	2201      	movs	r2, #1
 800a734:	0019      	movs	r1, r3
 800a736:	f7fb fa3d 	bl	8005bb4 <HAL_GPIO_WritePin>
		}

		switch (State) {
 800a73a:	4b5f      	ldr	r3, [pc, #380]	; (800a8b8 <main+0x3e0>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b05      	cmp	r3, #5
 800a740:	d900      	bls.n	800a744 <main+0x26c>
 800a742:	e10c      	b.n	800a95e <main+0x486>
 800a744:	009a      	lsls	r2, r3, #2
 800a746:	4b5d      	ldr	r3, [pc, #372]	; (800a8bc <main+0x3e4>)
 800a748:	18d3      	adds	r3, r2, r3
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	469f      	mov	pc, r3
		case RX:
			if (isMaster == true) {
 800a74e:	1dfb      	adds	r3, r7, #7
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d066      	beq.n	800a824 <main+0x34c>
				if (BufferSize > 0) {
 800a756:	4b5a      	ldr	r3, [pc, #360]	; (800a8c0 <main+0x3e8>)
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d062      	beq.n	800a824 <main+0x34c>
					PRINTF(" Master: %s\r\n", Buffer);
 800a75e:	4a59      	ldr	r2, [pc, #356]	; (800a8c4 <main+0x3ec>)
 800a760:	4b59      	ldr	r3, [pc, #356]	; (800a8c8 <main+0x3f0>)
 800a762:	0011      	movs	r1, r2
 800a764:	0018      	movs	r0, r3
 800a766:	f000 fdcf 	bl	800b308 <vcom_Send>
					if ((strncmp((const char*) Buffer, (const char*) ReadyMsg, 5) == 0) && Buffer[5] == IDSlaveLora[0]) {
 800a76a:	4946      	ldr	r1, [pc, #280]	; (800a884 <main+0x3ac>)
 800a76c:	4b55      	ldr	r3, [pc, #340]	; (800a8c4 <main+0x3ec>)
 800a76e:	2205      	movs	r2, #5
 800a770:	0018      	movs	r0, r3
 800a772:	f000 ffa2 	bl	800b6ba <strncmp>
 800a776:	1e03      	subs	r3, r0, #0
 800a778:	d122      	bne.n	800a7c0 <main+0x2e8>
 800a77a:	4b52      	ldr	r3, [pc, #328]	; (800a8c4 <main+0x3ec>)
 800a77c:	795a      	ldrb	r2, [r3, #5]
 800a77e:	4b3f      	ldr	r3, [pc, #252]	; (800a87c <main+0x3a4>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d11c      	bne.n	800a7c0 <main+0x2e8>
						DelayMs(1);
 800a786:	2001      	movs	r0, #1
 800a788:	f7fe fcee 	bl	8009168 <DelayMs>
						PRINTF(" Master: %s\r\n", Buffer);
 800a78c:	4a4d      	ldr	r2, [pc, #308]	; (800a8c4 <main+0x3ec>)
 800a78e:	4b4e      	ldr	r3, [pc, #312]	; (800a8c8 <main+0x3f0>)
 800a790:	0011      	movs	r1, r2
 800a792:	0018      	movs	r0, r3
 800a794:	f000 fdb8 	bl	800b308 <vcom_Send>
						Radio.Send(misDat[i].datos, BUFFERSIZE);
 800a798:	4b31      	ldr	r3, [pc, #196]	; (800a860 <main+0x388>)
 800a79a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a79c:	4b43      	ldr	r3, [pc, #268]	; (800a8ac <main+0x3d4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2164      	movs	r1, #100	; 0x64
 800a7a2:	4359      	muls	r1, r3
 800a7a4:	4b42      	ldr	r3, [pc, #264]	; (800a8b0 <main+0x3d8>)
 800a7a6:	18cb      	adds	r3, r1, r3
 800a7a8:	2128      	movs	r1, #40	; 0x28
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	4790      	blx	r2
						enviadoReady = 1;
 800a7ae:	4b47      	ldr	r3, [pc, #284]	; (800a8cc <main+0x3f4>)
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	601a      	str	r2, [r3, #0]
						recibidoMaster = 1;
 800a7b4:	4b46      	ldr	r3, [pc, #280]	; (800a8d0 <main+0x3f8>)
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	601a      	str	r2, [r3, #0]
						errorReady = 1;
 800a7ba:	4b46      	ldr	r3, [pc, #280]	; (800a8d4 <main+0x3fc>)
 800a7bc:	2201      	movs	r2, #1
 800a7be:	601a      	str	r2, [r3, #0]
					}
					if ((recibidoMaster == 1) && (strncmp((const char*) Buffer,(const char*) OKMsg, 2) == 0) && Buffer[2] == IDSlaveLora[0]) {
 800a7c0:	4b43      	ldr	r3, [pc, #268]	; (800a8d0 <main+0x3f8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d121      	bne.n	800a80c <main+0x334>
 800a7c8:	4935      	ldr	r1, [pc, #212]	; (800a8a0 <main+0x3c8>)
 800a7ca:	4b3e      	ldr	r3, [pc, #248]	; (800a8c4 <main+0x3ec>)
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f000 ff73 	bl	800b6ba <strncmp>
 800a7d4:	1e03      	subs	r3, r0, #0
 800a7d6:	d119      	bne.n	800a80c <main+0x334>
 800a7d8:	4b3a      	ldr	r3, [pc, #232]	; (800a8c4 <main+0x3ec>)
 800a7da:	789a      	ldrb	r2, [r3, #2]
 800a7dc:	4b27      	ldr	r3, [pc, #156]	; (800a87c <main+0x3a4>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d113      	bne.n	800a80c <main+0x334>
						DelayMs(1);
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	f7fe fcbf 	bl	8009168 <DelayMs>
						PRINTF(" Master: %s\r\n", Buffer);
 800a7ea:	4a36      	ldr	r2, [pc, #216]	; (800a8c4 <main+0x3ec>)
 800a7ec:	4b36      	ldr	r3, [pc, #216]	; (800a8c8 <main+0x3f0>)
 800a7ee:	0011      	movs	r1, r2
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	f000 fd89 	bl	800b308 <vcom_Send>
						Radio.Send(misDat[i].datos, BUFFERSIZE);
 800a7f6:	4b1a      	ldr	r3, [pc, #104]	; (800a860 <main+0x388>)
 800a7f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7fa:	4b2c      	ldr	r3, [pc, #176]	; (800a8ac <main+0x3d4>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2164      	movs	r1, #100	; 0x64
 800a800:	4359      	muls	r1, r3
 800a802:	4b2b      	ldr	r3, [pc, #172]	; (800a8b0 <main+0x3d8>)
 800a804:	18cb      	adds	r3, r1, r3
 800a806:	2128      	movs	r1, #40	; 0x28
 800a808:	0018      	movs	r0, r3
 800a80a:	4790      	blx	r2
					}
					Radio.Rx( RX_TIMEOUT_VALUE);
 800a80c:	4b14      	ldr	r3, [pc, #80]	; (800a860 <main+0x388>)
 800a80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a810:	22fa      	movs	r2, #250	; 0xfa
 800a812:	0092      	lsls	r2, r2, #2
 800a814:	0010      	movs	r0, r2
 800a816:	4798      	blx	r3
					memset(Buffer, '\0', BUFFER_SIZE);
 800a818:	4b2a      	ldr	r3, [pc, #168]	; (800a8c4 <main+0x3ec>)
 800a81a:	2240      	movs	r2, #64	; 0x40
 800a81c:	2100      	movs	r1, #0
 800a81e:	0018      	movs	r0, r3
 800a820:	f000 ff3b 	bl	800b69a <memset>
				}
			}
			State = LOWPOWER;
 800a824:	4b24      	ldr	r3, [pc, #144]	; (800a8b8 <main+0x3e0>)
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
			break;
 800a82a:	e099      	b.n	800a960 <main+0x488>
		case TX:
			Radio.Rx( RX_TIMEOUT_VALUE);
 800a82c:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <main+0x388>)
 800a82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a830:	22fa      	movs	r2, #250	; 0xfa
 800a832:	0092      	lsls	r2, r2, #2
 800a834:	0010      	movs	r0, r2
 800a836:	4798      	blx	r3
			State = LOWPOWER;
 800a838:	4b1f      	ldr	r3, [pc, #124]	; (800a8b8 <main+0x3e0>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	701a      	strb	r2, [r3, #0]
			break;
 800a83e:	e08f      	b.n	800a960 <main+0x488>
 800a840:	44011000 	.word	0x44011000
 800a844:	0800c214 	.word	0x0800c214
 800a848:	200002d8 	.word	0x200002d8
 800a84c:	0800a9c1 	.word	0x0800a9c1
 800a850:	0800a9e1 	.word	0x0800a9e1
 800a854:	0800aa61 	.word	0x0800aa61
 800a858:	0800aa81 	.word	0x0800aa81
 800a85c:	0800aaa1 	.word	0x0800aaa1
 800a860:	0800c430 	.word	0x0800c430
 800a864:	33bca100 	.word	0x33bca100
 800a868:	002dc6c0 	.word	0x002dc6c0
 800a86c:	20000614 	.word	0x20000614
 800a870:	0800c224 	.word	0x0800c224
 800a874:	200041ec 	.word	0x200041ec
 800a878:	200040b0 	.word	0x200040b0
 800a87c:	20004138 	.word	0x20004138
 800a880:	200040e8 	.word	0x200040e8
 800a884:	2000001c 	.word	0x2000001c
 800a888:	2000058c 	.word	0x2000058c
 800a88c:	43fa0000 	.word	0x43fa0000
 800a890:	200002f8 	.word	0x200002f8
 800a894:	50000400 	.word	0x50000400
 800a898:	0800c228 	.word	0x0800c228
 800a89c:	20004140 	.word	0x20004140
 800a8a0:	20000024 	.word	0x20000024
 800a8a4:	20004141 	.word	0x20004141
 800a8a8:	200005ec 	.word	0x200005ec
 800a8ac:	20000304 	.word	0x20000304
 800a8b0:	20000618 	.word	0x20000618
 800a8b4:	0800c23c 	.word	0x0800c23c
 800a8b8:	200002d4 	.word	0x200002d4
 800a8bc:	0800c4f4 	.word	0x0800c4f4
 800a8c0:	20000018 	.word	0x20000018
 800a8c4:	2000416c 	.word	0x2000416c
 800a8c8:	0800c244 	.word	0x0800c244
 800a8cc:	200002fc 	.word	0x200002fc
 800a8d0:	200002f4 	.word	0x200002f4
 800a8d4:	20000300 	.word	0x20000300
		case RX_TIMEOUT:
		case RX_ERROR:
			if (isMaster == true) {
 800a8d8:	1dfb      	adds	r3, r7, #7
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d02d      	beq.n	800a93c <main+0x464>
				if (enviadoReady == 0) {
 800a8e0:	4b2c      	ldr	r3, [pc, #176]	; (800a994 <main+0x4bc>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d110      	bne.n	800a90a <main+0x432>
					sprintf(ReadyID, "%s%d", ReadyMsg, ID);
 800a8e8:	4b2b      	ldr	r3, [pc, #172]	; (800a998 <main+0x4c0>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a2b      	ldr	r2, [pc, #172]	; (800a99c <main+0x4c4>)
 800a8ee:	492c      	ldr	r1, [pc, #176]	; (800a9a0 <main+0x4c8>)
 800a8f0:	482c      	ldr	r0, [pc, #176]	; (800a9a4 <main+0x4cc>)
 800a8f2:	f000 fcb5 	bl	800b260 <siprintf>
					Radio.Send(ReadyID, 6);
 800a8f6:	4b2c      	ldr	r3, [pc, #176]	; (800a9a8 <main+0x4d0>)
 800a8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fa:	4a2a      	ldr	r2, [pc, #168]	; (800a9a4 <main+0x4cc>)
 800a8fc:	2106      	movs	r1, #6
 800a8fe:	0010      	movs	r0, r2
 800a900:	4798      	blx	r3
					PRINTF("Master Ready\r\n");
 800a902:	4b2a      	ldr	r3, [pc, #168]	; (800a9ac <main+0x4d4>)
 800a904:	0018      	movs	r0, r3
 800a906:	f000 fcff 	bl	800b308 <vcom_Send>
				}
				if (errorReady == 1) {
 800a90a:	4b29      	ldr	r3, [pc, #164]	; (800a9b0 <main+0x4d8>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d10a      	bne.n	800a928 <main+0x450>
					Radio.Send(misDat[i].datos, BUFFERSIZE);
 800a912:	4b25      	ldr	r3, [pc, #148]	; (800a9a8 <main+0x4d0>)
 800a914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a916:	4b27      	ldr	r3, [pc, #156]	; (800a9b4 <main+0x4dc>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2164      	movs	r1, #100	; 0x64
 800a91c:	4359      	muls	r1, r3
 800a91e:	4b26      	ldr	r3, [pc, #152]	; (800a9b8 <main+0x4e0>)
 800a920:	18cb      	adds	r3, r1, r3
 800a922:	2128      	movs	r1, #40	; 0x28
 800a924:	0018      	movs	r0, r3
 800a926:	4790      	blx	r2
				}
				// Send the next PING frame
				DelayMs(1);
 800a928:	2001      	movs	r0, #1
 800a92a:	f7fe fc1d 	bl	8009168 <DelayMs>
				Radio.Rx( RX_TIMEOUT_VALUE);
 800a92e:	4b1e      	ldr	r3, [pc, #120]	; (800a9a8 <main+0x4d0>)
 800a930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a932:	22fa      	movs	r2, #250	; 0xfa
 800a934:	0092      	lsls	r2, r2, #2
 800a936:	0010      	movs	r0, r2
 800a938:	4798      	blx	r3
 800a93a:	e005      	b.n	800a948 <main+0x470>
			} else {
				Radio.Rx( RX_TIMEOUT_VALUE);
 800a93c:	4b1a      	ldr	r3, [pc, #104]	; (800a9a8 <main+0x4d0>)
 800a93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a940:	22fa      	movs	r2, #250	; 0xfa
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	0010      	movs	r0, r2
 800a946:	4798      	blx	r3
			}
			State = LOWPOWER;
 800a948:	4b1c      	ldr	r3, [pc, #112]	; (800a9bc <main+0x4e4>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	701a      	strb	r2, [r3, #0]
			break;
 800a94e:	e007      	b.n	800a960 <main+0x488>
		case TX_TIMEOUT:
			Radio.Rx( RX_TIMEOUT_VALUE);
 800a950:	4b15      	ldr	r3, [pc, #84]	; (800a9a8 <main+0x4d0>)
 800a952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a954:	22fa      	movs	r2, #250	; 0xfa
 800a956:	0092      	lsls	r2, r2, #2
 800a958:	0010      	movs	r0, r2
 800a95a:	4798      	blx	r3
			break;
 800a95c:	e000      	b.n	800a960 <main+0x488>
		case LOWPOWER:
		default:
			// Set low power
			break;
 800a95e:	46c0      	nop			; (mov r8, r8)
		}
		i++;
 800a960:	4b14      	ldr	r3, [pc, #80]	; (800a9b4 <main+0x4dc>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	4b13      	ldr	r3, [pc, #76]	; (800a9b4 <main+0x4dc>)
 800a968:	601a      	str	r2, [r3, #0]
		if (i == 149){
 800a96a:	4b12      	ldr	r3, [pc, #72]	; (800a9b4 <main+0x4dc>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b95      	cmp	r3, #149	; 0x95
 800a970:	d102      	bne.n	800a978 <main+0x4a0>
			i = 0;
 800a972:	4b10      	ldr	r3, [pc, #64]	; (800a9b4 <main+0x4dc>)
 800a974:	2200      	movs	r2, #0
 800a976:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a978:	b672      	cpsid	i
		}

		DISABLE_IRQ( );
		/* if an interupt has occured after __disable_irq, it is kept pending
		 * and cortex will not enter low power anyway  */
		if (State == LOWPOWER) {
 800a97a:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <main+0x4e4>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <main+0x4ae>
#ifndef LOW_POWER_DISABLE
			LowPower_Handler();
 800a982:	f7fe fc5b 	bl	800923c <LowPower_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 800a986:	b662      	cpsie	i
#endif
		}
		ENABLE_IRQ( );
		DelayMs(500);
 800a988:	23fa      	movs	r3, #250	; 0xfa
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	0018      	movs	r0, r3
 800a98e:	f7fe fbeb 	bl	8009168 <DelayMs>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) ReadyMsg, (uint8_t *) RxReady, 80, 2000);
 800a992:	e629      	b.n	800a5e8 <main+0x110>
 800a994:	200002fc 	.word	0x200002fc
 800a998:	20000614 	.word	0x20000614
 800a99c:	2000001c 	.word	0x2000001c
 800a9a0:	0800c254 	.word	0x0800c254
 800a9a4:	200041ac 	.word	0x200041ac
 800a9a8:	0800c430 	.word	0x0800c430
 800a9ac:	0800c25c 	.word	0x0800c25c
 800a9b0:	20000300 	.word	0x20000300
 800a9b4:	20000304 	.word	0x20000304
 800a9b8:	20000618 	.word	0x20000618
 800a9bc:	200002d4 	.word	0x200002d4

0800a9c0 <OnTxDone>:
	}
}

//La llamada  PRINTF("txDone\n\r"); esta en sx1276.c, funcion SX1276OnDio0Irq
void OnTxDone(void) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
	Radio.Sleep();
 800a9c4:	4b04      	ldr	r3, [pc, #16]	; (800a9d8 <OnTxDone+0x18>)
 800a9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c8:	4798      	blx	r3
	State = TX;
 800a9ca:	4b04      	ldr	r3, [pc, #16]	; (800a9dc <OnTxDone+0x1c>)
 800a9cc:	2204      	movs	r2, #4
 800a9ce:	701a      	strb	r2, [r3, #0]
}
 800a9d0:	46c0      	nop			; (mov r8, r8)
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	46c0      	nop			; (mov r8, r8)
 800a9d8:	0800c430 	.word	0x0800c430
 800a9dc:	200002d4 	.word	0x200002d4

0800a9e0 <OnRxDone>:

//La llamada PRINTF("rxDone\n\r"); esta en sx1276.c, funcion SX1276OnDio0Irq
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr) {
 800a9e0:	b590      	push	{r4, r7, lr}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	000c      	movs	r4, r1
 800a9ea:	0010      	movs	r0, r2
 800a9ec:	0019      	movs	r1, r3
 800a9ee:	230a      	movs	r3, #10
 800a9f0:	18fb      	adds	r3, r7, r3
 800a9f2:	1c22      	adds	r2, r4, #0
 800a9f4:	801a      	strh	r2, [r3, #0]
 800a9f6:	2308      	movs	r3, #8
 800a9f8:	18fb      	adds	r3, r7, r3
 800a9fa:	1c02      	adds	r2, r0, #0
 800a9fc:	801a      	strh	r2, [r3, #0]
 800a9fe:	1dfb      	adds	r3, r7, #7
 800aa00:	1c0a      	adds	r2, r1, #0
 800aa02:	701a      	strb	r2, [r3, #0]
	Radio.Sleep();
 800aa04:	4b10      	ldr	r3, [pc, #64]	; (800aa48 <OnRxDone+0x68>)
 800aa06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa08:	4798      	blx	r3
	BufferSize = size;
 800aa0a:	4b10      	ldr	r3, [pc, #64]	; (800aa4c <OnRxDone+0x6c>)
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	18ba      	adds	r2, r7, r2
 800aa10:	8812      	ldrh	r2, [r2, #0]
 800aa12:	801a      	strh	r2, [r3, #0]
	memcpy(Buffer, payload, BufferSize);
 800aa14:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <OnRxDone+0x6c>)
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	001a      	movs	r2, r3
 800aa1a:	68f9      	ldr	r1, [r7, #12]
 800aa1c:	4b0c      	ldr	r3, [pc, #48]	; (800aa50 <OnRxDone+0x70>)
 800aa1e:	0018      	movs	r0, r3
 800aa20:	f000 fe32 	bl	800b688 <memcpy>
	RssiValue = rssi;
 800aa24:	2308      	movs	r3, #8
 800aa26:	18fb      	adds	r3, r7, r3
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	b25a      	sxtb	r2, r3
 800aa2c:	4b09      	ldr	r3, [pc, #36]	; (800aa54 <OnRxDone+0x74>)
 800aa2e:	701a      	strb	r2, [r3, #0]
	SnrValue = snr;
 800aa30:	4b09      	ldr	r3, [pc, #36]	; (800aa58 <OnRxDone+0x78>)
 800aa32:	1dfa      	adds	r2, r7, #7
 800aa34:	7812      	ldrb	r2, [r2, #0]
 800aa36:	701a      	strb	r2, [r3, #0]
	State = RX;
 800aa38:	4b08      	ldr	r3, [pc, #32]	; (800aa5c <OnRxDone+0x7c>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	701a      	strb	r2, [r3, #0]
}
 800aa3e:	46c0      	nop			; (mov r8, r8)
 800aa40:	46bd      	mov	sp, r7
 800aa42:	b005      	add	sp, #20
 800aa44:	bd90      	pop	{r4, r7, pc}
 800aa46:	46c0      	nop			; (mov r8, r8)
 800aa48:	0800c430 	.word	0x0800c430
 800aa4c:	20000018 	.word	0x20000018
 800aa50:	2000416c 	.word	0x2000416c
 800aa54:	200002d5 	.word	0x200002d5
 800aa58:	200002d6 	.word	0x200002d6
 800aa5c:	200002d4 	.word	0x200002d4

0800aa60 <OnTxTimeout>:

void OnTxTimeout(void) {
 800aa60:	b580      	push	{r7, lr}
 800aa62:	af00      	add	r7, sp, #0
	Radio.Sleep();
 800aa64:	4b04      	ldr	r3, [pc, #16]	; (800aa78 <OnTxTimeout+0x18>)
 800aa66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa68:	4798      	blx	r3
	State = TX_TIMEOUT;
 800aa6a:	4b04      	ldr	r3, [pc, #16]	; (800aa7c <OnTxTimeout+0x1c>)
 800aa6c:	2205      	movs	r2, #5
 800aa6e:	701a      	strb	r2, [r3, #0]

//	PRINTF("OnTxTimeout\n");
}
 800aa70:	46c0      	nop			; (mov r8, r8)
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	0800c430 	.word	0x0800c430
 800aa7c:	200002d4 	.word	0x200002d4

0800aa80 <OnRxTimeout>:

void OnRxTimeout(void) {
 800aa80:	b580      	push	{r7, lr}
 800aa82:	af00      	add	r7, sp, #0
	Radio.Sleep();
 800aa84:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <OnRxTimeout+0x18>)
 800aa86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa88:	4798      	blx	r3
	State = RX_TIMEOUT;
 800aa8a:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <OnRxTimeout+0x1c>)
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	701a      	strb	r2, [r3, #0]
//	PRINTF("OnRxTimeout\n");
}
 800aa90:	46c0      	nop			; (mov r8, r8)
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	0800c430 	.word	0x0800c430
 800aa9c:	200002d4 	.word	0x200002d4

0800aaa0 <OnRxError>:

void OnRxError(void) {
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
	Radio.Sleep();
 800aaa4:	4b04      	ldr	r3, [pc, #16]	; (800aab8 <OnRxError+0x18>)
 800aaa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa8:	4798      	blx	r3
	State = RX_ERROR;
 800aaaa:	4b04      	ldr	r3, [pc, #16]	; (800aabc <OnRxError+0x1c>)
 800aaac:	2203      	movs	r2, #3
 800aaae:	701a      	strb	r2, [r3, #0]
//	PRINTF("OnRxError\n");
}
 800aab0:	46c0      	nop			; (mov r8, r8)
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	46c0      	nop			; (mov r8, r8)
 800aab8:	0800c430 	.word	0x0800c430
 800aabc:	200002d4 	.word	0x200002d4

0800aac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800aac0:	480d      	ldr	r0, [pc, #52]	; (800aaf8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800aac2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800aac4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800aac6:	e003      	b.n	800aad0 <LoopCopyDataInit>

0800aac8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800aac8:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800aaca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800aacc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800aace:	3104      	adds	r1, #4

0800aad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800aad0:	480b      	ldr	r0, [pc, #44]	; (800ab00 <LoopForever+0xa>)
  ldr  r3, =_edata
 800aad2:	4b0c      	ldr	r3, [pc, #48]	; (800ab04 <LoopForever+0xe>)
  adds  r2, r0, r1
 800aad4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800aad6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800aad8:	d3f6      	bcc.n	800aac8 <CopyDataInit>
  ldr  r2, =_sbss
 800aada:	4a0b      	ldr	r2, [pc, #44]	; (800ab08 <LoopForever+0x12>)
  b  LoopFillZerobss
 800aadc:	e002      	b.n	800aae4 <LoopFillZerobss>

0800aade <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800aade:	2300      	movs	r3, #0
  str  r3, [r2]
 800aae0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aae2:	3204      	adds	r2, #4

0800aae4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800aae4:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <LoopForever+0x16>)
  cmp  r2, r3
 800aae6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800aae8:	d3f9      	bcc.n	800aade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800aaea:	f000 fa99 	bl	800b020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aaee:	f000 fda7 	bl	800b640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800aaf2:	f7ff fcf1 	bl	800a4d8 <main>

0800aaf6 <LoopForever>:

LoopForever:
    b LoopForever
 800aaf6:	e7fe      	b.n	800aaf6 <LoopForever>
   ldr   r0, =_estack
 800aaf8:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800aafc:	0800c570 	.word	0x0800c570
  ldr  r0, =_sdata
 800ab00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ab04:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800ab08:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800ab0c:	200041f4 	.word	0x200041f4

0800ab10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ab10:	e7fe      	b.n	800ab10 <ADC1_COMP_IRQHandler>

0800ab12 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
   /* Return function status */
  return HAL_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	0018      	movs	r0, r3
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	b002      	add	sp, #8
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 800ab28:	f7fb f87e 	bl	8005c28 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 800ab2c:	f7fb f8fa 	bl	8005d24 <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800ab30:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <HAL_MspInit+0x24>)
 800ab32:	4a05      	ldr	r2, [pc, #20]	; (800ab48 <HAL_MspInit+0x24>)
 800ab34:	6812      	ldr	r2, [r2, #0]
 800ab36:	2108      	movs	r1, #8
 800ab38:	430a      	orrs	r2, r1
 800ab3a:	601a      	str	r2, [r3, #0]
   */
  DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 800ab3c:	f7fb f8e4 	bl	8005d08 <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif
}
 800ab40:	46c0      	nop			; (mov r8, r8)
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	40022000 	.word	0x40022000

0800ab4c <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including 
  *        the backup registers) and RCC_CSR register are set to their reset values.  
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b09a      	sub	sp, #104	; 0x68
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800ab54:	2330      	movs	r3, #48	; 0x30
 800ab56:	18fb      	adds	r3, r7, r3
 800ab58:	2204      	movs	r2, #4
 800ab5a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800ab5c:	2330      	movs	r3, #48	; 0x30
 800ab5e:	18fb      	adds	r3, r7, r3
 800ab60:	2200      	movs	r2, #0
 800ab62:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ab64:	2330      	movs	r3, #48	; 0x30
 800ab66:	18fb      	adds	r3, r7, r3
 800ab68:	2280      	movs	r2, #128	; 0x80
 800ab6a:	0052      	lsls	r2, r2, #1
 800ab6c:	609a      	str	r2, [r3, #8]
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ab6e:	2330      	movs	r3, #48	; 0x30
 800ab70:	18fb      	adds	r3, r7, r3
 800ab72:	0018      	movs	r0, r3
 800ab74:	f7fb f8e4 	bl	8005d40 <HAL_RCC_OscConfig>
 800ab78:	1e03      	subs	r3, r0, #0
 800ab7a:	d001      	beq.n	800ab80 <HAL_RTC_MspInit+0x34>
  {
    Error_Handler();
 800ab7c:	f7fe fdc8 	bl	8009710 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ab80:	230c      	movs	r3, #12
 800ab82:	18fb      	adds	r3, r7, r3
 800ab84:	2220      	movs	r2, #32
 800ab86:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800ab88:	230c      	movs	r3, #12
 800ab8a:	18fb      	adds	r3, r7, r3
 800ab8c:	2280      	movs	r2, #128	; 0x80
 800ab8e:	0252      	lsls	r2, r2, #9
 800ab90:	605a      	str	r2, [r3, #4]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ab92:	230c      	movs	r3, #12
 800ab94:	18fb      	adds	r3, r7, r3
 800ab96:	0018      	movs	r0, r3
 800ab98:	f7fb fea0 	bl	80068dc <HAL_RCCEx_PeriphCLKConfig>
 800ab9c:	1e03      	subs	r3, r0, #0
 800ab9e:	d001      	beq.n	800aba4 <HAL_RTC_MspInit+0x58>
  { 
    Error_Handler();
 800aba0:	f7fe fdb6 	bl	8009710 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800aba4:	4b09      	ldr	r3, [pc, #36]	; (800abcc <HAL_RTC_MspInit+0x80>)
 800aba6:	4a09      	ldr	r2, [pc, #36]	; (800abcc <HAL_RTC_MspInit+0x80>)
 800aba8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800abaa:	2180      	movs	r1, #128	; 0x80
 800abac:	02c9      	lsls	r1, r1, #11
 800abae:	430a      	orrs	r2, r1
 800abb0:	651a      	str	r2, [r3, #80]	; 0x50
  
  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800abb2:	2200      	movs	r2, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	2002      	movs	r0, #2
 800abb8:	f7fa fe26 	bl	8005808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800abbc:	2002      	movs	r0, #2
 800abbe:	f7fa fe39 	bl	8005834 <HAL_NVIC_EnableIRQ>
}
 800abc2:	46c0      	nop			; (mov r8, r8)
 800abc4:	46bd      	mov	sp, r7
 800abc6:	b01a      	add	sp, #104	; 0x68
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	46c0      	nop			; (mov r8, r8)
 800abcc:	40021000 	.word	0x40021000

0800abd0 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  TimerIrqHandler( );
 800abd8:	f7fe fbfa 	bl	80093d0 <TimerIrqHandler>
}
 800abdc:	46c0      	nop			; (mov r8, r8)
 800abde:	46bd      	mov	sp, r7
 800abe0:	b002      	add	sp, #8
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	0002      	movs	r2, r0
 800abec:	1dbb      	adds	r3, r7, #6
 800abee:	801a      	strh	r2, [r3, #0]
  HW_GPIO_IrqHandler( GPIO_Pin );
 800abf0:	1dbb      	adds	r3, r7, #6
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	0018      	movs	r0, r3
 800abf6:	f7fe feb9 	bl	800996c <HW_GPIO_IrqHandler>
}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	46bd      	mov	sp, r7
 800abfe:	b002      	add	sp, #8
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a finction of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	0002      	movs	r2, r0
 800ac0a:	1dbb      	adds	r3, r7, #6
 800ac0c:	801a      	strh	r2, [r3, #0]
  switch( GPIO_Pin )
 800ac0e:	1dbb      	adds	r3, r7, #6
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d009      	beq.n	800ac2a <MSP_GetIRQn+0x28>
 800ac16:	dc03      	bgt.n	800ac20 <MSP_GetIRQn+0x1e>
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d807      	bhi.n	800ac2e <MSP_GetIRQn+0x2c>
 800ac1e:	e002      	b.n	800ac26 <MSP_GetIRQn+0x24>
 800ac20:	2b08      	cmp	r3, #8
 800ac22:	d002      	beq.n	800ac2a <MSP_GetIRQn+0x28>
 800ac24:	e003      	b.n	800ac2e <MSP_GetIRQn+0x2c>
  {
    case GPIO_PIN_0:  
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 800ac26:	2305      	movs	r3, #5
 800ac28:	e002      	b.n	800ac30 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_2: 
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 800ac2a:	2306      	movs	r3, #6
 800ac2c:	e000      	b.n	800ac30 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15: 
    default: return EXTI4_15_IRQn;
 800ac2e:	2307      	movs	r3, #7
  }
}
 800ac30:	0018      	movs	r0, r3
 800ac32:	46bd      	mov	sp, r7
 800ac34:	b002      	add	sp, #8
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init( void )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	af00      	add	r7, sp, #0
  if( McuInitialized == false )
 800ac3c:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <HW_Init+0x34>)
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	2201      	movs	r2, #1
 800ac42:	4053      	eors	r3, r2
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00d      	beq.n	800ac66 <HW_Init+0x2e>
#if defined( USE_BOOTLOADER )
    /* Set the Vector Table base location at 0x3000 */
    NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x3000 );
#endif

    HW_AdcInit( );
 800ac4a:	f000 f89b 	bl	800ad84 <HW_AdcInit>

    Radio.IoInit( );
 800ac4e:	4b08      	ldr	r3, [pc, #32]	; (800ac70 <HW_Init+0x38>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4798      	blx	r3

    HW_SPI_Init( );
 800ac54:	f7ff fafc 	bl	800a250 <HW_SPI_Init>

    HW_RTC_Init( );
 800ac58:	f7fe ff08 	bl	8009a6c <HW_RTC_Init>
    
    vcom_Init( );
 800ac5c:	f000 fb18 	bl	800b290 <vcom_Init>

    McuInitialized = true;
 800ac60:	4b02      	ldr	r3, [pc, #8]	; (800ac6c <HW_Init+0x34>)
 800ac62:	2201      	movs	r2, #1
 800ac64:	701a      	strb	r2, [r3, #0]
  }
}
 800ac66:	46c0      	nop			; (mov r8, r8)
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	20000369 	.word	0x20000369
 800ac70:	0800c430 	.word	0x0800c430

0800ac74 <HW_DeInit>:
  * @brief This function Deinitializes the hardware
  * @param None
  * @retval None
  */
void HW_DeInit( void )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
  HW_SPI_DeInit( );
 800ac78:	f7ff fb6e 	bl	800a358 <HW_SPI_DeInit>
  
  Radio.IoDeInit( );
 800ac7c:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <HW_DeInit+0x20>)
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	4798      	blx	r3
  
  vcom_DeInit( );
 800ac82:	f000 fb35 	bl	800b2f0 <vcom_DeInit>
 
  McuInitialized = false;
 800ac86:	4b04      	ldr	r3, [pc, #16]	; (800ac98 <HW_DeInit+0x24>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	701a      	strb	r2, [r3, #0]
}
 800ac8c:	46c0      	nop			; (mov r8, r8)
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	0800c430 	.word	0x0800c430
 800ac98:	20000369 	.word	0x20000369

0800ac9c <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config( void )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b094      	sub	sp, #80	; 0x50
 800aca0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aca2:	233c      	movs	r3, #60	; 0x3c
 800aca4:	18fb      	adds	r3, r7, r3
 800aca6:	0018      	movs	r0, r3
 800aca8:	2314      	movs	r3, #20
 800acaa:	001a      	movs	r2, r3
 800acac:	2100      	movs	r1, #0
 800acae:	f000 fcf4 	bl	800b69a <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800acb2:	1d3b      	adds	r3, r7, #4
 800acb4:	0018      	movs	r0, r3
 800acb6:	2338      	movs	r3, #56	; 0x38
 800acb8:	001a      	movs	r2, r3
 800acba:	2100      	movs	r1, #0
 800acbc:	f000 fced 	bl	800b69a <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800acc0:	1d3b      	adds	r3, r7, #4
 800acc2:	2202      	movs	r2, #2
 800acc4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800acc6:	1d3b      	adds	r3, r7, #4
 800acc8:	2200      	movs	r2, #0
 800acca:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800accc:	1d3b      	adds	r3, r7, #4
 800acce:	2201      	movs	r2, #1
 800acd0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800acd2:	1d3b      	adds	r3, r7, #4
 800acd4:	2210      	movs	r2, #16
 800acd6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800acd8:	1d3b      	adds	r3, r7, #4
 800acda:	2202      	movs	r2, #2
 800acdc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800acde:	1d3b      	adds	r3, r7, #4
 800ace0:	2200      	movs	r2, #0
 800ace2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800ace4:	1d3b      	adds	r3, r7, #4
 800ace6:	2280      	movs	r2, #128	; 0x80
 800ace8:	0312      	lsls	r2, r2, #12
 800acea:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800acec:	1d3b      	adds	r3, r7, #4
 800acee:	2280      	movs	r2, #128	; 0x80
 800acf0:	0412      	lsls	r2, r2, #16
 800acf2:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800acf4:	1d3b      	adds	r3, r7, #4
 800acf6:	0018      	movs	r0, r3
 800acf8:	f7fb f822 	bl	8005d40 <HAL_RCC_OscConfig>
 800acfc:	1e03      	subs	r3, r0, #0
 800acfe:	d001      	beq.n	800ad04 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800ad00:	f7fe fd06 	bl	8009710 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad04:	4b1c      	ldr	r3, [pc, #112]	; (800ad78 <SystemClock_Config+0xdc>)
 800ad06:	4a1c      	ldr	r2, [pc, #112]	; (800ad78 <SystemClock_Config+0xdc>)
 800ad08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ad0a:	2180      	movs	r1, #128	; 0x80
 800ad0c:	0549      	lsls	r1, r1, #21
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ad12:	4b1a      	ldr	r3, [pc, #104]	; (800ad7c <SystemClock_Config+0xe0>)
 800ad14:	4a19      	ldr	r2, [pc, #100]	; (800ad7c <SystemClock_Config+0xe0>)
 800ad16:	6812      	ldr	r2, [r2, #0]
 800ad18:	4919      	ldr	r1, [pc, #100]	; (800ad80 <SystemClock_Config+0xe4>)
 800ad1a:	400a      	ands	r2, r1
 800ad1c:	2180      	movs	r1, #128	; 0x80
 800ad1e:	0109      	lsls	r1, r1, #4
 800ad20:	430a      	orrs	r2, r1
 800ad22:	601a      	str	r2, [r3, #0]
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800ad24:	46c0      	nop			; (mov r8, r8)
 800ad26:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <SystemClock_Config+0xe0>)
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	2210      	movs	r2, #16
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	2b10      	cmp	r3, #16
 800ad30:	d0f9      	beq.n	800ad26 <SystemClock_Config+0x8a>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800ad32:	233c      	movs	r3, #60	; 0x3c
 800ad34:	18fb      	adds	r3, r7, r3
 800ad36:	220f      	movs	r2, #15
 800ad38:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ad3a:	233c      	movs	r3, #60	; 0x3c
 800ad3c:	18fb      	adds	r3, r7, r3
 800ad3e:	2203      	movs	r2, #3
 800ad40:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ad42:	233c      	movs	r3, #60	; 0x3c
 800ad44:	18fb      	adds	r3, r7, r3
 800ad46:	2200      	movs	r2, #0
 800ad48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800ad4a:	233c      	movs	r3, #60	; 0x3c
 800ad4c:	18fb      	adds	r3, r7, r3
 800ad4e:	2200      	movs	r2, #0
 800ad50:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ad52:	233c      	movs	r3, #60	; 0x3c
 800ad54:	18fb      	adds	r3, r7, r3
 800ad56:	2200      	movs	r2, #0
 800ad58:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800ad5a:	233c      	movs	r3, #60	; 0x3c
 800ad5c:	18fb      	adds	r3, r7, r3
 800ad5e:	2101      	movs	r1, #1
 800ad60:	0018      	movs	r0, r3
 800ad62:	f7fb fb95 	bl	8006490 <HAL_RCC_ClockConfig>
 800ad66:	1e03      	subs	r3, r0, #0
 800ad68:	d001      	beq.n	800ad6e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800ad6a:	f7fe fcd1 	bl	8009710 <Error_Handler>
  }
}
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	46bd      	mov	sp, r7
 800ad72:	b014      	add	sp, #80	; 0x50
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	46c0      	nop			; (mov r8, r8)
 800ad78:	40021000 	.word	0x40021000
 800ad7c:	40007000 	.word	0x40007000
 800ad80:	ffffe7ff 	.word	0xffffe7ff

0800ad84 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit( void )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
  if( AdcInitialized == false )
 800ad8a:	4b2b      	ldr	r3, [pc, #172]	; (800ae38 <HW_AdcInit+0xb4>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	4053      	eors	r3, r2
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d04b      	beq.n	800ae30 <HW_AdcInit+0xac>
  {
    AdcInitialized = true;
 800ad98:	4b27      	ldr	r3, [pc, #156]	; (800ae38 <HW_AdcInit+0xb4>)
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef initStruct;
    
    hadc.Instance  = ADC1;
 800ad9e:	4b27      	ldr	r3, [pc, #156]	; (800ae3c <HW_AdcInit+0xb8>)
 800ada0:	4a27      	ldr	r2, [pc, #156]	; (800ae40 <HW_AdcInit+0xbc>)
 800ada2:	601a      	str	r2, [r3, #0]
    
    hadc.Init.OversamplingMode      = DISABLE;
 800ada4:	4b25      	ldr	r3, [pc, #148]	; (800ae3c <HW_AdcInit+0xb8>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	641a      	str	r2, [r3, #64]	; 0x40
  
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 800adaa:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <HW_AdcInit+0xb8>)
 800adac:	22c0      	movs	r2, #192	; 0xc0
 800adae:	0612      	lsls	r2, r2, #24
 800adb0:	605a      	str	r2, [r3, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 800adb2:	4b22      	ldr	r3, [pc, #136]	; (800ae3c <HW_AdcInit+0xb8>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	61da      	str	r2, [r3, #28]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800adb8:	4b20      	ldr	r3, [pc, #128]	; (800ae3c <HW_AdcInit+0xb8>)
 800adba:	2201      	movs	r2, #1
 800adbc:	639a      	str	r2, [r3, #56]	; 0x38
    hadc.Init.LowPowerAutoWait      = DISABLE;
 800adbe:	4b1f      	ldr	r3, [pc, #124]	; (800ae3c <HW_AdcInit+0xb8>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	619a      	str	r2, [r3, #24]
    
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800adc4:	4b1d      	ldr	r3, [pc, #116]	; (800ae3c <HW_AdcInit+0xb8>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	609a      	str	r2, [r3, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_7CYCLES_5;
 800adca:	4b1c      	ldr	r3, [pc, #112]	; (800ae3c <HW_AdcInit+0xb8>)
 800adcc:	2202      	movs	r2, #2
 800adce:	63da      	str	r2, [r3, #60]	; 0x3c
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800add0:	4b1a      	ldr	r3, [pc, #104]	; (800ae3c <HW_AdcInit+0xb8>)
 800add2:	2201      	movs	r2, #1
 800add4:	611a      	str	r2, [r3, #16]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800add6:	4b19      	ldr	r3, [pc, #100]	; (800ae3c <HW_AdcInit+0xb8>)
 800add8:	2200      	movs	r2, #0
 800adda:	60da      	str	r2, [r3, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 800addc:	4b17      	ldr	r3, [pc, #92]	; (800ae3c <HW_AdcInit+0xb8>)
 800adde:	2200      	movs	r2, #0
 800ade0:	621a      	str	r2, [r3, #32]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 800ade2:	4b16      	ldr	r3, [pc, #88]	; (800ae3c <HW_AdcInit+0xb8>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	625a      	str	r2, [r3, #36]	; 0x24
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ade8:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <HW_AdcInit+0xb8>)
 800adea:	2200      	movs	r2, #0
 800adec:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800adee:	4b13      	ldr	r3, [pc, #76]	; (800ae3c <HW_AdcInit+0xb8>)
 800adf0:	2204      	movs	r2, #4
 800adf2:	615a      	str	r2, [r3, #20]
    hadc.Init.DMAContinuousRequests = DISABLE;
 800adf4:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <HW_AdcInit+0xb8>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	631a      	str	r2, [r3, #48]	; 0x30

    ADCCLK_ENABLE();
 800adfa:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <HW_AdcInit+0xc0>)
 800adfc:	4a11      	ldr	r2, [pc, #68]	; (800ae44 <HW_AdcInit+0xc0>)
 800adfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ae00:	2180      	movs	r1, #128	; 0x80
 800ae02:	0089      	lsls	r1, r1, #2
 800ae04:	430a      	orrs	r2, r1
 800ae06:	635a      	str	r2, [r3, #52]	; 0x34
    

    HAL_ADC_Init( &hadc );
 800ae08:	4b0c      	ldr	r3, [pc, #48]	; (800ae3c <HW_AdcInit+0xb8>)
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	f7fa fab0 	bl	8005370 <HAL_ADC_Init>

    initStruct.Mode =GPIO_MODE_ANALOG;
 800ae10:	1d3b      	adds	r3, r7, #4
 800ae12:	2203      	movs	r2, #3
 800ae14:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 800ae16:	1d3b      	adds	r3, r7, #4
 800ae18:	2200      	movs	r2, #0
 800ae1a:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800ae1c:	1d3b      	adds	r3, r7, #4
 800ae1e:	2203      	movs	r2, #3
 800ae20:	60da      	str	r2, [r3, #12]

    HW_GPIO_Init( BAT_LEVEL_PORT, BAT_LEVEL_PIN, &initStruct );
 800ae22:	1d3a      	adds	r2, r7, #4
 800ae24:	23a0      	movs	r3, #160	; 0xa0
 800ae26:	05db      	lsls	r3, r3, #23
 800ae28:	2110      	movs	r1, #16
 800ae2a:	0018      	movs	r0, r3
 800ae2c:	f7fe fcf0 	bl	8009810 <HW_GPIO_Init>
  }
}
 800ae30:	46c0      	nop			; (mov r8, r8)
 800ae32:	46bd      	mov	sp, r7
 800ae34:	b006      	add	sp, #24
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20000368 	.word	0x20000368
 800ae3c:	20000308 	.word	0x20000308
 800ae40:	40012400 	.word	0x40012400
 800ae44:	40021000 	.word	0x40021000

0800ae48 <HW_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void HW_EnterStopMode( void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ae4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae52:	607b      	str	r3, [r7, #4]
  return(result);
 800ae54:	687b      	ldr	r3, [r7, #4]
  BACKUP_PRIMASK();
 800ae56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae58:	b672      	cpsid	i

  DISABLE_IRQ( );

  HW_DeInit( );
 800ae5a:	f7ff ff0b 	bl	800ac74 <HW_DeInit>
  
  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800ae5e:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <HW_EnterStopMode+0x3c>)
 800ae60:	4a08      	ldr	r2, [pc, #32]	; (800ae84 <HW_EnterStopMode+0x3c>)
 800ae62:	6812      	ldr	r2, [r2, #0]
 800ae64:	2104      	movs	r1, #4
 800ae66:	430a      	orrs	r2, r1
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	f383 8810 	msr	PRIMASK, r3
  
  RESTORE_PRIMASK( );

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 800ae74:	2101      	movs	r1, #1
 800ae76:	2001      	movs	r0, #1
 800ae78:	f7fa ff12 	bl	8005ca0 <HAL_PWR_EnterSTOPMode>
}
 800ae7c:	46c0      	nop			; (mov r8, r8)
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	b004      	add	sp, #16
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	40007000 	.word	0x40007000

0800ae88 <HW_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void HW_ExitStopMode( void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ae8e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae92:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae94:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  BACKUP_PRIMASK();
 800ae96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae98:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800ae9a:	4b19      	ldr	r3, [pc, #100]	; (800af00 <HW_ExitStopMode+0x78>)
 800ae9c:	4a18      	ldr	r2, [pc, #96]	; (800af00 <HW_ExitStopMode+0x78>)
 800ae9e:	6812      	ldr	r2, [r2, #0]
 800aea0:	2101      	movs	r1, #1
 800aea2:	430a      	orrs	r2, r1
 800aea4:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while( __HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET ) {}
 800aea6:	46c0      	nop			; (mov r8, r8)
 800aea8:	4b15      	ldr	r3, [pc, #84]	; (800af00 <HW_ExitStopMode+0x78>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2204      	movs	r2, #4
 800aeae:	4013      	ands	r3, r2
 800aeb0:	d0fa      	beq.n	800aea8 <HW_ExitStopMode+0x20>
  
  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 800aeb2:	4b13      	ldr	r3, [pc, #76]	; (800af00 <HW_ExitStopMode+0x78>)
 800aeb4:	4a12      	ldr	r2, [pc, #72]	; (800af00 <HW_ExitStopMode+0x78>)
 800aeb6:	6812      	ldr	r2, [r2, #0]
 800aeb8:	2180      	movs	r1, #128	; 0x80
 800aeba:	0449      	lsls	r1, r1, #17
 800aebc:	430a      	orrs	r2, r1
 800aebe:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET ) {}
 800aec0:	46c0      	nop			; (mov r8, r8)
 800aec2:	4b0f      	ldr	r3, [pc, #60]	; (800af00 <HW_ExitStopMode+0x78>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	2380      	movs	r3, #128	; 0x80
 800aec8:	049b      	lsls	r3, r3, #18
 800aeca:	4013      	ands	r3, r2
 800aecc:	d0f9      	beq.n	800aec2 <HW_ExitStopMode+0x3a>
  
  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
 800aece:	4b0c      	ldr	r3, [pc, #48]	; (800af00 <HW_ExitStopMode+0x78>)
 800aed0:	4a0b      	ldr	r2, [pc, #44]	; (800af00 <HW_ExitStopMode+0x78>)
 800aed2:	68d2      	ldr	r2, [r2, #12]
 800aed4:	2103      	movs	r1, #3
 800aed6:	430a      	orrs	r2, r1
 800aed8:	60da      	str	r2, [r3, #12]
  
  /* Wait till PLL is used as system clock source */ 
  while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK ) {}
 800aeda:	46c0      	nop			; (mov r8, r8)
 800aedc:	4b08      	ldr	r3, [pc, #32]	; (800af00 <HW_ExitStopMode+0x78>)
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	220c      	movs	r2, #12
 800aee2:	4013      	ands	r3, r2
 800aee4:	2b0c      	cmp	r3, #12
 800aee6:	d1f9      	bne.n	800aedc <HW_ExitStopMode+0x54>
    
  /*initilizes the peripherals*/
  HW_Init( );
 800aee8:	f7ff fea6 	bl	800ac38 <HW_Init>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK( );
}
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	46bd      	mov	sp, r7
 800aefa:	b004      	add	sp, #16
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	46c0      	nop			; (mov r8, r8)
 800af00:	40021000 	.word	0x40021000

0800af04 <HW_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void HW_EnterSleepMode( void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800af08:	2101      	movs	r1, #1
 800af0a:	2000      	movs	r0, #0
 800af0c:	f7fa fe9a 	bl	8005c44 <HAL_PWR_EnterSLEEPMode>
}
 800af10:	46c0      	nop			; (mov r8, r8)
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	af00      	add	r7, sp, #0
}
 800af1a:	46c0      	nop			; (mov r8, r8)
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <HardFault_Handler>:
  * @retval None
  */


void HardFault_Handler(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
 800af24:	46c0      	nop			; (mov r8, r8)
  while(1)
  {
    __NOP();
 800af26:	e7fd      	b.n	800af24 <HardFault_Handler+0x4>

0800af28 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
}
 800af2c:	46c0      	nop			; (mov r8, r8)
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	af00      	add	r7, sp, #0
}
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800af40:	f7fa f9d6 	bl	80052f0 <HAL_IncTick>
}
 800af44:	46c0      	nop			; (mov r8, r8)
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
	...

0800af4c <SPI2_IRQHandler>:
{
}*/
extern SPI_HandleTypeDef hspi2;

void SPI2_IRQHandler(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi2);
 800af50:	4b03      	ldr	r3, [pc, #12]	; (800af60 <SPI2_IRQHandler+0x14>)
 800af52:	0018      	movs	r0, r3
 800af54:	f7fd f9da 	bl	800830c <HAL_SPI_IRQHandler>
}
 800af58:	46c0      	nop			; (mov r8, r8)
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	46c0      	nop			; (mov r8, r8)
 800af60:	2000058c 	.word	0x2000058c

0800af64 <USART2_IRQHandler>:

void USART2_IRQHandler( void )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	af00      	add	r7, sp, #0
   vcom_Print( );
 800af68:	f000 fa5e 	bl	800b428 <vcom_Print>
}
 800af6c:	46c0      	nop			; (mov r8, r8)
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <RTC_IRQHandler>:

void RTC_IRQHandler( void )
{
 800af72:	b580      	push	{r7, lr}
 800af74:	af00      	add	r7, sp, #0
  HW_RTC_IrqHandler ( );
 800af76:	f7fe fee5 	bl	8009d44 <HW_RTC_IrqHandler>
}
 800af7a:	46c0      	nop			; (mov r8, r8)
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800af84:	2001      	movs	r0, #1
 800af86:	f7fa fe33 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800af8a:	2002      	movs	r0, #2
 800af8c:	f7fa fe30 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>
}
 800af90:	46c0      	nop			; (mov r8, r8)
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler( void )
{
 800af96:	b580      	push	{r7, lr}
 800af98:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800af9a:	2004      	movs	r0, #4
 800af9c:	f7fa fe28 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800afa0:	2008      	movs	r0, #8
 800afa2:	f7fa fe25 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>
}
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler( void )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800afb0:	2010      	movs	r0, #16
 800afb2:	f7fa fe1d 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800afb6:	2020      	movs	r0, #32
 800afb8:	f7fa fe1a 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800afbc:	2040      	movs	r0, #64	; 0x40
 800afbe:	f7fa fe17 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800afc2:	2080      	movs	r0, #128	; 0x80
 800afc4:	f7fa fe14 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 800afc8:	2380      	movs	r3, #128	; 0x80
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	0018      	movs	r0, r3
 800afce:	f7fa fe0f 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800afd2:	2380      	movs	r3, #128	; 0x80
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	0018      	movs	r0, r3
 800afd8:	f7fa fe0a 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800afdc:	2380      	movs	r3, #128	; 0x80
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	0018      	movs	r0, r3
 800afe2:	f7fa fe05 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800afe6:	2380      	movs	r3, #128	; 0x80
 800afe8:	011b      	lsls	r3, r3, #4
 800afea:	0018      	movs	r0, r3
 800afec:	f7fa fe00 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800aff0:	2380      	movs	r3, #128	; 0x80
 800aff2:	015b      	lsls	r3, r3, #5
 800aff4:	0018      	movs	r0, r3
 800aff6:	f7fa fdfb 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800affa:	2380      	movs	r3, #128	; 0x80
 800affc:	019b      	lsls	r3, r3, #6
 800affe:	0018      	movs	r0, r3
 800b000:	f7fa fdf6 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800b004:	2380      	movs	r3, #128	; 0x80
 800b006:	01db      	lsls	r3, r3, #7
 800b008:	0018      	movs	r0, r3
 800b00a:	f7fa fdf1 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800b00e:	2380      	movs	r3, #128	; 0x80
 800b010:	021b      	lsls	r3, r3, #8
 800b012:	0018      	movs	r0, r3
 800b014:	f7fa fdec 	bl	8005bf0 <HAL_GPIO_EXTI_IRQHandler>
}
 800b018:	46c0      	nop			; (mov r8, r8)
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800b024:	4b17      	ldr	r3, [pc, #92]	; (800b084 <SystemInit+0x64>)
 800b026:	4a17      	ldr	r2, [pc, #92]	; (800b084 <SystemInit+0x64>)
 800b028:	6812      	ldr	r2, [r2, #0]
 800b02a:	2180      	movs	r1, #128	; 0x80
 800b02c:	0049      	lsls	r1, r1, #1
 800b02e:	430a      	orrs	r2, r1
 800b030:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800b032:	4b14      	ldr	r3, [pc, #80]	; (800b084 <SystemInit+0x64>)
 800b034:	4a13      	ldr	r2, [pc, #76]	; (800b084 <SystemInit+0x64>)
 800b036:	68d2      	ldr	r2, [r2, #12]
 800b038:	4913      	ldr	r1, [pc, #76]	; (800b088 <SystemInit+0x68>)
 800b03a:	400a      	ands	r2, r1
 800b03c:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800b03e:	4b11      	ldr	r3, [pc, #68]	; (800b084 <SystemInit+0x64>)
 800b040:	4a10      	ldr	r2, [pc, #64]	; (800b084 <SystemInit+0x64>)
 800b042:	6812      	ldr	r2, [r2, #0]
 800b044:	4911      	ldr	r1, [pc, #68]	; (800b08c <SystemInit+0x6c>)
 800b046:	400a      	ands	r2, r1
 800b048:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800b04a:	4b0e      	ldr	r3, [pc, #56]	; (800b084 <SystemInit+0x64>)
 800b04c:	4a0d      	ldr	r2, [pc, #52]	; (800b084 <SystemInit+0x64>)
 800b04e:	6892      	ldr	r2, [r2, #8]
 800b050:	2101      	movs	r1, #1
 800b052:	438a      	bics	r2, r1
 800b054:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800b056:	4b0b      	ldr	r3, [pc, #44]	; (800b084 <SystemInit+0x64>)
 800b058:	4a0a      	ldr	r2, [pc, #40]	; (800b084 <SystemInit+0x64>)
 800b05a:	6812      	ldr	r2, [r2, #0]
 800b05c:	490c      	ldr	r1, [pc, #48]	; (800b090 <SystemInit+0x70>)
 800b05e:	400a      	ands	r2, r1
 800b060:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800b062:	4b08      	ldr	r3, [pc, #32]	; (800b084 <SystemInit+0x64>)
 800b064:	4a07      	ldr	r2, [pc, #28]	; (800b084 <SystemInit+0x64>)
 800b066:	68d2      	ldr	r2, [r2, #12]
 800b068:	490a      	ldr	r1, [pc, #40]	; (800b094 <SystemInit+0x74>)
 800b06a:	400a      	ands	r2, r1
 800b06c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800b06e:	4b05      	ldr	r3, [pc, #20]	; (800b084 <SystemInit+0x64>)
 800b070:	2200      	movs	r2, #0
 800b072:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b074:	4b08      	ldr	r3, [pc, #32]	; (800b098 <SystemInit+0x78>)
 800b076:	2280      	movs	r2, #128	; 0x80
 800b078:	0512      	lsls	r2, r2, #20
 800b07a:	609a      	str	r2, [r3, #8]
#endif
}
 800b07c:	46c0      	nop			; (mov r8, r8)
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	46c0      	nop			; (mov r8, r8)
 800b084:	40021000 	.word	0x40021000
 800b088:	88ff400c 	.word	0x88ff400c
 800b08c:	fef6fff6 	.word	0xfef6fff6
 800b090:	fffbffff 	.word	0xfffbffff
 800b094:	ff02ffff 	.word	0xff02ffff
 800b098:	e000ed00 	.word	0xe000ed00

0800b09c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
	int div = 1;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800b0ac:	e003      	b.n	800b0b6 <ts_itoa+0x1a>
		div *= base;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	4353      	muls	r3, r2
 800b0b4:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	0019      	movs	r1, r3
 800b0ba:	68b8      	ldr	r0, [r7, #8]
 800b0bc:	f7f5 f824 	bl	8000108 <__udivsi3>
 800b0c0:	0003      	movs	r3, r0
 800b0c2:	001a      	movs	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d2f1      	bcs.n	800b0ae <ts_itoa+0x12>

	while (div != 0)
 800b0ca:	e02c      	b.n	800b126 <ts_itoa+0x8a>
	{
		int num = d/div;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	0019      	movs	r1, r3
 800b0d0:	68b8      	ldr	r0, [r7, #8]
 800b0d2:	f7f5 f819 	bl	8000108 <__udivsi3>
 800b0d6:	0003      	movs	r3, r0
 800b0d8:	613b      	str	r3, [r7, #16]
		d = d%div;
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	0011      	movs	r1, r2
 800b0e0:	0018      	movs	r0, r3
 800b0e2:	f7f5 f897 	bl	8000214 <__aeabi_uidivmod>
 800b0e6:	000b      	movs	r3, r1
 800b0e8:	60bb      	str	r3, [r7, #8]
		div /= base;
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	6978      	ldr	r0, [r7, #20]
 800b0ee:	f7f5 f895 	bl	800021c <__divsi3>
 800b0f2:	0003      	movs	r3, r0
 800b0f4:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	2b09      	cmp	r3, #9
 800b0fa:	dd0a      	ble.n	800b112 <ts_itoa+0x76>
			*((*buf)++) = (num-10) + 'A';
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	1c59      	adds	r1, r3, #1
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	6011      	str	r1, [r2, #0]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	b2d2      	uxtb	r2, r2
 800b10a:	3237      	adds	r2, #55	; 0x37
 800b10c:	b2d2      	uxtb	r2, r2
 800b10e:	701a      	strb	r2, [r3, #0]
 800b110:	e009      	b.n	800b126 <ts_itoa+0x8a>
		else
			*((*buf)++) = num + '0';
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	1c59      	adds	r1, r3, #1
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	6011      	str	r1, [r2, #0]
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	b2d2      	uxtb	r2, r2
 800b120:	3230      	adds	r2, #48	; 0x30
 800b122:	b2d2      	uxtb	r2, r2
 800b124:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1cf      	bne.n	800b0cc <ts_itoa+0x30>
	}
}
 800b12c:	46c0      	nop			; (mov r8, r8)
 800b12e:	46bd      	mov	sp, r7
 800b130:	b006      	add	sp, #24
 800b132:	bd80      	pop	{r7, pc}

0800b134 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800b144:	e07c      	b.n	800b240 <ts_formatstring+0x10c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b25      	cmp	r3, #37	; 0x25
 800b14c:	d000      	beq.n	800b150 <ts_formatstring+0x1c>
 800b14e:	e06f      	b.n	800b230 <ts_formatstring+0xfc>
		{
			switch (*(++fmt))
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	3301      	adds	r3, #1
 800b154:	60bb      	str	r3, [r7, #8]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	2b64      	cmp	r3, #100	; 0x64
 800b15c:	d01c      	beq.n	800b198 <ts_formatstring+0x64>
 800b15e:	dc06      	bgt.n	800b16e <ts_formatstring+0x3a>
 800b160:	2b58      	cmp	r3, #88	; 0x58
 800b162:	d04f      	beq.n	800b204 <ts_formatstring+0xd0>
 800b164:	2b63      	cmp	r3, #99	; 0x63
 800b166:	d00d      	beq.n	800b184 <ts_formatstring+0x50>
 800b168:	2b25      	cmp	r3, #37	; 0x25
 800b16a:	d057      	beq.n	800b21c <ts_formatstring+0xe8>
 800b16c:	e05c      	b.n	800b228 <ts_formatstring+0xf4>
 800b16e:	2b73      	cmp	r3, #115	; 0x73
 800b170:	d02a      	beq.n	800b1c8 <ts_formatstring+0x94>
 800b172:	dc02      	bgt.n	800b17a <ts_formatstring+0x46>
 800b174:	2b69      	cmp	r3, #105	; 0x69
 800b176:	d00f      	beq.n	800b198 <ts_formatstring+0x64>
 800b178:	e056      	b.n	800b228 <ts_formatstring+0xf4>
 800b17a:	2b75      	cmp	r3, #117	; 0x75
 800b17c:	d037      	beq.n	800b1ee <ts_formatstring+0xba>
 800b17e:	2b78      	cmp	r3, #120	; 0x78
 800b180:	d040      	beq.n	800b204 <ts_formatstring+0xd0>
 800b182:	e051      	b.n	800b228 <ts_formatstring+0xf4>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	1c53      	adds	r3, r2, #1
 800b188:	60fb      	str	r3, [r7, #12]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	1d19      	adds	r1, r3, #4
 800b18e:	6079      	str	r1, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	b2db      	uxtb	r3, r3
 800b194:	7013      	strb	r3, [r2, #0]
				break;
 800b196:	e047      	b.n	800b228 <ts_formatstring+0xf4>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	1d1a      	adds	r2, r3, #4
 800b19c:	607a      	str	r2, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	da07      	bge.n	800b1b8 <ts_formatstring+0x84>
					{
						val *= -1;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	425b      	negs	r3, r3
 800b1ac:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	1c5a      	adds	r2, r3, #1
 800b1b2:	60fa      	str	r2, [r7, #12]
 800b1b4:	222d      	movs	r2, #45	; 0x2d
 800b1b6:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800b1b8:	69f9      	ldr	r1, [r7, #28]
 800b1ba:	230c      	movs	r3, #12
 800b1bc:	18fb      	adds	r3, r7, r3
 800b1be:	220a      	movs	r2, #10
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	f7ff ff6b 	bl	800b09c <ts_itoa>
				}
				break;
 800b1c6:	e02f      	b.n	800b228 <ts_formatstring+0xf4>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	1d1a      	adds	r2, r3, #4
 800b1cc:	607a      	str	r2, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800b1d2:	e007      	b.n	800b1e4 <ts_formatstring+0xb0>
					{
						*buf++ = *arg++;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	60fa      	str	r2, [r7, #12]
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	1c51      	adds	r1, r2, #1
 800b1de:	61b9      	str	r1, [r7, #24]
 800b1e0:	7812      	ldrb	r2, [r2, #0]
 800b1e2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1f3      	bne.n	800b1d4 <ts_formatstring+0xa0>
					}
				}
				break;
 800b1ec:	e01c      	b.n	800b228 <ts_formatstring+0xf4>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	1d1a      	adds	r2, r3, #4
 800b1f2:	607a      	str	r2, [r7, #4]
 800b1f4:	6819      	ldr	r1, [r3, #0]
 800b1f6:	230c      	movs	r3, #12
 800b1f8:	18fb      	adds	r3, r7, r3
 800b1fa:	220a      	movs	r2, #10
 800b1fc:	0018      	movs	r0, r3
 800b1fe:	f7ff ff4d 	bl	800b09c <ts_itoa>
				break;
 800b202:	e011      	b.n	800b228 <ts_formatstring+0xf4>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	1d1a      	adds	r2, r3, #4
 800b208:	607a      	str	r2, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	0019      	movs	r1, r3
 800b20e:	230c      	movs	r3, #12
 800b210:	18fb      	adds	r3, r7, r3
 800b212:	2210      	movs	r2, #16
 800b214:	0018      	movs	r0, r3
 800b216:	f7ff ff41 	bl	800b09c <ts_itoa>
				break;
 800b21a:	e005      	b.n	800b228 <ts_formatstring+0xf4>
			  case '%':
				  *buf++ = '%';
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	60fa      	str	r2, [r7, #12]
 800b222:	2225      	movs	r2, #37	; 0x25
 800b224:	701a      	strb	r2, [r3, #0]
				  break;
 800b226:	46c0      	nop			; (mov r8, r8)
			}
			fmt++;
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	3301      	adds	r3, #1
 800b22c:	60bb      	str	r3, [r7, #8]
 800b22e:	e007      	b.n	800b240 <ts_formatstring+0x10c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	1c5a      	adds	r2, r3, #1
 800b234:	60fa      	str	r2, [r7, #12]
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	1c51      	adds	r1, r2, #1
 800b23a:	60b9      	str	r1, [r7, #8]
 800b23c:	7812      	ldrb	r2, [r2, #0]
 800b23e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d000      	beq.n	800b24a <ts_formatstring+0x116>
 800b248:	e77d      	b.n	800b146 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	001a      	movs	r2, r3
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	1ad3      	subs	r3, r2, r3
}
 800b258:	0018      	movs	r0, r3
 800b25a:	46bd      	mov	sp, r7
 800b25c:	b008      	add	sp, #32
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800b260:	b40e      	push	{r1, r2, r3}
 800b262:	b580      	push	{r7, lr}
 800b264:	b085      	sub	sp, #20
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800b26a:	2320      	movs	r3, #32
 800b26c:	18fb      	adds	r3, r7, r3
 800b26e:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	69f9      	ldr	r1, [r7, #28]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	0018      	movs	r0, r3
 800b278:	f7ff ff5c 	bl	800b134 <ts_formatstring>
 800b27c:	0003      	movs	r3, r0
 800b27e:	60fb      	str	r3, [r7, #12]
	va_end(va);
	return length;
 800b280:	68fb      	ldr	r3, [r7, #12]
}
 800b282:	0018      	movs	r0, r3
 800b284:	46bd      	mov	sp, r7
 800b286:	b005      	add	sp, #20
 800b288:	bc80      	pop	{r7}
 800b28a:	bc08      	pop	{r3}
 800b28c:	b003      	add	sp, #12
 800b28e:	4718      	bx	r3

0800b290 <vcom_Init>:

/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void vcom_Init(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTX;
 800b294:	4b14      	ldr	r3, [pc, #80]	; (800b2e8 <vcom_Init+0x58>)
 800b296:	4a15      	ldr	r2, [pc, #84]	; (800b2ec <vcom_Init+0x5c>)
 800b298:	601a      	str	r2, [r3, #0]
  
  UartHandle.Init.BaudRate   = 115200;
 800b29a:	4b13      	ldr	r3, [pc, #76]	; (800b2e8 <vcom_Init+0x58>)
 800b29c:	22e1      	movs	r2, #225	; 0xe1
 800b29e:	0252      	lsls	r2, r2, #9
 800b2a0:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800b2a2:	4b11      	ldr	r3, [pc, #68]	; (800b2e8 <vcom_Init+0x58>)
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800b2a8:	4b0f      	ldr	r3, [pc, #60]	; (800b2e8 <vcom_Init+0x58>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800b2ae:	4b0e      	ldr	r3, [pc, #56]	; (800b2e8 <vcom_Init+0x58>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800b2b4:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <vcom_Init+0x58>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800b2ba:	4b0b      	ldr	r3, [pc, #44]	; (800b2e8 <vcom_Init+0x58>)
 800b2bc:	220c      	movs	r2, #12
 800b2be:	615a      	str	r2, [r3, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800b2c0:	4b09      	ldr	r3, [pc, #36]	; (800b2e8 <vcom_Init+0x58>)
 800b2c2:	0018      	movs	r0, r3
 800b2c4:	f7fd f98e 	bl	80085e4 <HAL_UART_Init>
 800b2c8:	1e03      	subs	r3, r0, #0
 800b2ca:	d001      	beq.n	800b2d0 <vcom_Init+0x40>
  {
    /* Initialization Error */
    Error_Handler(); 
 800b2cc:	f7fe fa20 	bl	8009710 <Error_Handler>
  }
  
  HAL_NVIC_SetPriority(USARTX_IRQn, 0x1, 0);
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2101      	movs	r1, #1
 800b2d4:	201c      	movs	r0, #28
 800b2d6:	f7fa fa97 	bl	8005808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTX_IRQn);
 800b2da:	201c      	movs	r0, #28
 800b2dc:	f7fa faaa 	bl	8005834 <HAL_NVIC_EnableIRQ>
}
 800b2e0:	46c0      	nop			; (mov r8, r8)
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	46c0      	nop			; (mov r8, r8)
 800b2e8:	20000470 	.word	0x20000470
 800b2ec:	40004400 	.word	0x40004400

0800b2f0 <vcom_DeInit>:


void vcom_DeInit(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
#if 1
  HAL_UART_DeInit(&UartHandle);
 800b2f4:	4b03      	ldr	r3, [pc, #12]	; (800b304 <vcom_DeInit+0x14>)
 800b2f6:	0018      	movs	r0, r3
 800b2f8:	f7fd f9cc 	bl	8008694 <HAL_UART_DeInit>
#endif
}
 800b2fc:	46c0      	nop			; (mov r8, r8)
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	20000470 	.word	0x20000470

0800b308 <vcom_Send>:

void vcom_Send( char *format, ... )
{
 800b308:	b40f      	push	{r0, r1, r2, r3}
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b0a6      	sub	sp, #152	; 0x98
 800b30e:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800b310:	23a4      	movs	r3, #164	; 0xa4
 800b312:	18fb      	adds	r3, r7, r3
 800b314:	2284      	movs	r2, #132	; 0x84
 800b316:	18ba      	adds	r2, r7, r2
 800b318:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b31a:	f3ef 8310 	mrs	r3, PRIMASK
 800b31e:	228c      	movs	r2, #140	; 0x8c
 800b320:	18ba      	adds	r2, r7, r2
 800b322:	6013      	str	r3, [r2, #0]
  return(result);
 800b324:	238c      	movs	r3, #140	; 0x8c
 800b326:	18fb      	adds	r3, r7, r3
 800b328:	681b      	ldr	r3, [r3, #0]
  uint8_t len;
  uint8_t lenTop;
  char tempBuff[128];
  
  BACKUP_PRIMASK();
 800b32a:	2294      	movs	r2, #148	; 0x94
 800b32c:	18ba      	adds	r2, r7, r2
 800b32e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b330:	b672      	cpsid	i
  DISABLE_IRQ();
  
  /*convert into string at buff[0] of length iw*/
  len = vsprintf(&tempBuff[0], format, args);
 800b332:	2384      	movs	r3, #132	; 0x84
 800b334:	18fb      	adds	r3, r7, r3
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	23a0      	movs	r3, #160	; 0xa0
 800b33a:	18fb      	adds	r3, r7, r3
 800b33c:	6819      	ldr	r1, [r3, #0]
 800b33e:	1d3b      	adds	r3, r7, #4
 800b340:	0018      	movs	r0, r3
 800b342:	f000 f9f9 	bl	800b738 <vsiprintf>
 800b346:	0002      	movs	r2, r0
 800b348:	2393      	movs	r3, #147	; 0x93
 800b34a:	18fb      	adds	r3, r7, r3
 800b34c:	701a      	strb	r2, [r3, #0]
  
  if (iw+len<BUFSIZE)
 800b34e:	4b34      	ldr	r3, [pc, #208]	; (800b420 <vcom_Send+0x118>)
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	b29b      	uxth	r3, r3
 800b354:	001a      	movs	r2, r3
 800b356:	2393      	movs	r3, #147	; 0x93
 800b358:	18fb      	adds	r3, r7, r3
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	18d3      	adds	r3, r2, r3
 800b35e:	2bff      	cmp	r3, #255	; 0xff
 800b360:	dc18      	bgt.n	800b394 <vcom_Send+0x8c>
  {
    memcpy( &buff[iw], &tempBuff[0], len);
 800b362:	4b2f      	ldr	r3, [pc, #188]	; (800b420 <vcom_Send+0x118>)
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	b29b      	uxth	r3, r3
 800b368:	001a      	movs	r2, r3
 800b36a:	4b2e      	ldr	r3, [pc, #184]	; (800b424 <vcom_Send+0x11c>)
 800b36c:	18d0      	adds	r0, r2, r3
 800b36e:	2393      	movs	r3, #147	; 0x93
 800b370:	18fb      	adds	r3, r7, r3
 800b372:	781a      	ldrb	r2, [r3, #0]
 800b374:	1d3b      	adds	r3, r7, #4
 800b376:	0019      	movs	r1, r3
 800b378:	f000 f986 	bl	800b688 <memcpy>
    iw+=len;
 800b37c:	2393      	movs	r3, #147	; 0x93
 800b37e:	18fb      	adds	r3, r7, r3
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	b29a      	uxth	r2, r3
 800b384:	4b26      	ldr	r3, [pc, #152]	; (800b420 <vcom_Send+0x118>)
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	18d3      	adds	r3, r2, r3
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	4b24      	ldr	r3, [pc, #144]	; (800b420 <vcom_Send+0x118>)
 800b390:	801a      	strh	r2, [r3, #0]
 800b392:	e030      	b.n	800b3f6 <vcom_Send+0xee>
  }
  else
  {
    lenTop=BUFSIZE-iw;
 800b394:	4b22      	ldr	r3, [pc, #136]	; (800b420 <vcom_Send+0x118>)
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	2392      	movs	r3, #146	; 0x92
 800b39e:	18fb      	adds	r3, r7, r3
 800b3a0:	4252      	negs	r2, r2
 800b3a2:	701a      	strb	r2, [r3, #0]
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 800b3a4:	4b1e      	ldr	r3, [pc, #120]	; (800b420 <vcom_Send+0x118>)
 800b3a6:	881b      	ldrh	r3, [r3, #0]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	001a      	movs	r2, r3
 800b3ac:	4b1d      	ldr	r3, [pc, #116]	; (800b424 <vcom_Send+0x11c>)
 800b3ae:	18d0      	adds	r0, r2, r3
 800b3b0:	2392      	movs	r3, #146	; 0x92
 800b3b2:	18fb      	adds	r3, r7, r3
 800b3b4:	781a      	ldrb	r2, [r3, #0]
 800b3b6:	1d3b      	adds	r3, r7, #4
 800b3b8:	0019      	movs	r1, r3
 800b3ba:	f000 f965 	bl	800b688 <memcpy>
    len-=lenTop;
 800b3be:	2393      	movs	r3, #147	; 0x93
 800b3c0:	18fb      	adds	r3, r7, r3
 800b3c2:	2293      	movs	r2, #147	; 0x93
 800b3c4:	18b9      	adds	r1, r7, r2
 800b3c6:	2292      	movs	r2, #146	; 0x92
 800b3c8:	18ba      	adds	r2, r7, r2
 800b3ca:	7809      	ldrb	r1, [r1, #0]
 800b3cc:	7812      	ldrb	r2, [r2, #0]
 800b3ce:	1a8a      	subs	r2, r1, r2
 800b3d0:	701a      	strb	r2, [r3, #0]
    memcpy( &buff[0], &tempBuff[lenTop], len);
 800b3d2:	2392      	movs	r3, #146	; 0x92
 800b3d4:	18fb      	adds	r3, r7, r3
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	1d3a      	adds	r2, r7, #4
 800b3da:	18d1      	adds	r1, r2, r3
 800b3dc:	2393      	movs	r3, #147	; 0x93
 800b3de:	18fb      	adds	r3, r7, r3
 800b3e0:	781a      	ldrb	r2, [r3, #0]
 800b3e2:	4b10      	ldr	r3, [pc, #64]	; (800b424 <vcom_Send+0x11c>)
 800b3e4:	0018      	movs	r0, r3
 800b3e6:	f000 f94f 	bl	800b688 <memcpy>
    iw = len;
 800b3ea:	2393      	movs	r3, #147	; 0x93
 800b3ec:	18fb      	adds	r3, r7, r3
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	4b0b      	ldr	r3, [pc, #44]	; (800b420 <vcom_Send+0x118>)
 800b3f4:	801a      	strh	r2, [r3, #0]
 800b3f6:	2394      	movs	r3, #148	; 0x94
 800b3f8:	18fb      	adds	r3, r7, r3
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2288      	movs	r2, #136	; 0x88
 800b3fe:	18ba      	adds	r2, r7, r2
 800b400:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b402:	2388      	movs	r3, #136	; 0x88
 800b404:	18fb      	adds	r3, r7, r3
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK();
  
  HAL_NVIC_SetPendingIRQ(USARTX_IRQn);
 800b40c:	201c      	movs	r0, #28
 800b40e:	f7fa fa21 	bl	8005854 <HAL_NVIC_SetPendingIRQ>
    
  va_end(args);
}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	46bd      	mov	sp, r7
 800b416:	b026      	add	sp, #152	; 0x98
 800b418:	bc80      	pop	{r7}
 800b41a:	bc08      	pop	{r3}
 800b41c:	b004      	add	sp, #16
 800b41e:	4718      	bx	r3
 800b420:	2000046c 	.word	0x2000046c
 800b424:	2000036c 	.word	0x2000036c

0800b428 <vcom_Print>:

/* modifes only ir*/
void vcom_Print( void)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
  char* CurChar;
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 800b42e:	e024      	b.n	800b47a <vcom_Print+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b430:	f3ef 8310 	mrs	r3, PRIMASK
 800b434:	603b      	str	r3, [r7, #0]
  return(result);
 800b436:	683b      	ldr	r3, [r7, #0]
  {
    BACKUP_PRIMASK();
 800b438:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b43a:	b672      	cpsid	i
    DISABLE_IRQ();
    
    CurChar = &buff[ir];
 800b43c:	4b1b      	ldr	r3, [pc, #108]	; (800b4ac <vcom_Print+0x84>)
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	001a      	movs	r2, r3
 800b442:	4b1b      	ldr	r3, [pc, #108]	; (800b4b0 <vcom_Print+0x88>)
 800b444:	18d3      	adds	r3, r2, r3
 800b446:	60bb      	str	r3, [r7, #8]
    ir= (ir+1) %BUFSIZE;
 800b448:	4b18      	ldr	r3, [pc, #96]	; (800b4ac <vcom_Print+0x84>)
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	3301      	adds	r3, #1
 800b44e:	4a19      	ldr	r2, [pc, #100]	; (800b4b4 <vcom_Print+0x8c>)
 800b450:	4013      	ands	r3, r2
 800b452:	d503      	bpl.n	800b45c <vcom_Print+0x34>
 800b454:	3b01      	subs	r3, #1
 800b456:	4a18      	ldr	r2, [pc, #96]	; (800b4b8 <vcom_Print+0x90>)
 800b458:	4313      	orrs	r3, r2
 800b45a:	3301      	adds	r3, #1
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	4b13      	ldr	r3, [pc, #76]	; (800b4ac <vcom_Print+0x84>)
 800b460:	801a      	strh	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f383 8810 	msr	PRIMASK, r3
    
    RESTORE_PRIMASK();
    
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 800b46c:	2396      	movs	r3, #150	; 0x96
 800b46e:	005b      	lsls	r3, r3, #1
 800b470:	68b9      	ldr	r1, [r7, #8]
 800b472:	4812      	ldr	r0, [pc, #72]	; (800b4bc <vcom_Print+0x94>)
 800b474:	2201      	movs	r2, #1
 800b476:	f7fd f946 	bl	8008706 <HAL_UART_Transmit>
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 800b47a:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <vcom_Print+0x98>)
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	3301      	adds	r3, #1
 800b482:	33ff      	adds	r3, #255	; 0xff
 800b484:	4a09      	ldr	r2, [pc, #36]	; (800b4ac <vcom_Print+0x84>)
 800b486:	8812      	ldrh	r2, [r2, #0]
 800b488:	1a9b      	subs	r3, r3, r2
 800b48a:	4a0a      	ldr	r2, [pc, #40]	; (800b4b4 <vcom_Print+0x8c>)
 800b48c:	4013      	ands	r3, r2
 800b48e:	d503      	bpl.n	800b498 <vcom_Print+0x70>
 800b490:	3b01      	subs	r3, #1
 800b492:	4a09      	ldr	r2, [pc, #36]	; (800b4b8 <vcom_Print+0x90>)
 800b494:	4313      	orrs	r3, r2
 800b496:	3301      	adds	r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dcc9      	bgt.n	800b430 <vcom_Print+0x8>
  }
  HAL_NVIC_ClearPendingIRQ(USARTX_IRQn);
 800b49c:	201c      	movs	r0, #28
 800b49e:	f7fa f9fa 	bl	8005896 <HAL_NVIC_ClearPendingIRQ>
}
 800b4a2:	46c0      	nop			; (mov r8, r8)
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	b004      	add	sp, #16
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	46c0      	nop			; (mov r8, r8)
 800b4ac:	2000046e 	.word	0x2000046e
 800b4b0:	2000036c 	.word	0x2000036c
 800b4b4:	800000ff 	.word	0x800000ff
 800b4b8:	ffffff00 	.word	0xffffff00
 800b4bc:	20000470 	.word	0x20000470
 800b4c0:	2000046c 	.word	0x2000046c

0800b4c4 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/

  /* Enable USART1 clock */
  USARTX_CLK_ENABLE(); 
 800b4cc:	4b06      	ldr	r3, [pc, #24]	; (800b4e8 <HAL_UART_MspInit+0x24>)
 800b4ce:	4a06      	ldr	r2, [pc, #24]	; (800b4e8 <HAL_UART_MspInit+0x24>)
 800b4d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b4d2:	2180      	movs	r1, #128	; 0x80
 800b4d4:	0289      	lsls	r1, r1, #10
 800b4d6:	430a      	orrs	r2, r1
 800b4d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  vcom_IoInit( );
 800b4da:	f000 f807 	bl	800b4ec <vcom_IoInit>
}
 800b4de:	46c0      	nop			; (mov r8, r8)
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	b002      	add	sp, #8
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	46c0      	nop			; (mov r8, r8)
 800b4e8:	40021000 	.word	0x40021000

0800b4ec <vcom_IoInit>:

void vcom_IoInit(void)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	18fb      	adds	r3, r7, r3
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	2314      	movs	r3, #20
 800b4fa:	001a      	movs	r2, r3
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	f000 f8cc 	bl	800b69a <memset>
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 800b502:	4b24      	ldr	r3, [pc, #144]	; (800b594 <vcom_IoInit+0xa8>)
 800b504:	4a23      	ldr	r2, [pc, #140]	; (800b594 <vcom_IoInit+0xa8>)
 800b506:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b508:	2101      	movs	r1, #1
 800b50a:	430a      	orrs	r2, r1
 800b50c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b50e:	4b21      	ldr	r3, [pc, #132]	; (800b594 <vcom_IoInit+0xa8>)
 800b510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b512:	2201      	movs	r2, #1
 800b514:	4013      	ands	r3, r2
 800b516:	60bb      	str	r3, [r7, #8]
 800b518:	68bb      	ldr	r3, [r7, #8]
  USARTX_RX_GPIO_CLK_ENABLE();
 800b51a:	4b1e      	ldr	r3, [pc, #120]	; (800b594 <vcom_IoInit+0xa8>)
 800b51c:	4a1d      	ldr	r2, [pc, #116]	; (800b594 <vcom_IoInit+0xa8>)
 800b51e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b520:	2101      	movs	r1, #1
 800b522:	430a      	orrs	r2, r1
 800b524:	62da      	str	r2, [r3, #44]	; 0x2c
 800b526:	4b1b      	ldr	r3, [pc, #108]	; (800b594 <vcom_IoInit+0xa8>)
 800b528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52a:	2201      	movs	r2, #1
 800b52c:	4013      	ands	r3, r2
 800b52e:	607b      	str	r3, [r7, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
    /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 800b532:	230c      	movs	r3, #12
 800b534:	18fb      	adds	r3, r7, r3
 800b536:	2204      	movs	r2, #4
 800b538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800b53a:	230c      	movs	r3, #12
 800b53c:	18fb      	adds	r3, r7, r3
 800b53e:	2202      	movs	r2, #2
 800b540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800b542:	230c      	movs	r3, #12
 800b544:	18fb      	adds	r3, r7, r3
 800b546:	2201      	movs	r2, #1
 800b548:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800b54a:	230c      	movs	r3, #12
 800b54c:	18fb      	adds	r3, r7, r3
 800b54e:	2203      	movs	r2, #3
 800b550:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 800b552:	230c      	movs	r3, #12
 800b554:	18fb      	adds	r3, r7, r3
 800b556:	2204      	movs	r2, #4
 800b558:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 800b55a:	230c      	movs	r3, #12
 800b55c:	18fa      	adds	r2, r7, r3
 800b55e:	23a0      	movs	r3, #160	; 0xa0
 800b560:	05db      	lsls	r3, r3, #23
 800b562:	0011      	movs	r1, r2
 800b564:	0018      	movs	r0, r3
 800b566:	f7fa f9a7 	bl	80058b8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 800b56a:	230c      	movs	r3, #12
 800b56c:	18fb      	adds	r3, r7, r3
 800b56e:	2208      	movs	r2, #8
 800b570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 800b572:	230c      	movs	r3, #12
 800b574:	18fb      	adds	r3, r7, r3
 800b576:	2204      	movs	r2, #4
 800b578:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 800b57a:	230c      	movs	r3, #12
 800b57c:	18fa      	adds	r2, r7, r3
 800b57e:	23a0      	movs	r3, #160	; 0xa0
 800b580:	05db      	lsls	r3, r3, #23
 800b582:	0011      	movs	r1, r2
 800b584:	0018      	movs	r0, r3
 800b586:	f7fa f997 	bl	80058b8 <HAL_GPIO_Init>
}
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	46bd      	mov	sp, r7
 800b58e:	b008      	add	sp, #32
 800b590:	bd80      	pop	{r7, pc}
 800b592:	46c0      	nop			; (mov r8, r8)
 800b594:	40021000 	.word	0x40021000

0800b598 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure={0};
 800b59e:	230c      	movs	r3, #12
 800b5a0:	18fb      	adds	r3, r7, r3
 800b5a2:	0018      	movs	r0, r3
 800b5a4:	2314      	movs	r3, #20
 800b5a6:	001a      	movs	r2, r3
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	f000 f876 	bl	800b69a <memset>
  
  USARTX_TX_GPIO_CLK_ENABLE();
 800b5ae:	4b1e      	ldr	r3, [pc, #120]	; (800b628 <vcom_IoDeInit+0x90>)
 800b5b0:	4a1d      	ldr	r2, [pc, #116]	; (800b628 <vcom_IoDeInit+0x90>)
 800b5b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	62da      	str	r2, [r3, #44]	; 0x2c
 800b5ba:	4b1b      	ldr	r3, [pc, #108]	; (800b628 <vcom_IoDeInit+0x90>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5be:	2201      	movs	r2, #1
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	60bb      	str	r3, [r7, #8]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
  USARTX_RX_GPIO_CLK_ENABLE();
 800b5c6:	4b18      	ldr	r3, [pc, #96]	; (800b628 <vcom_IoDeInit+0x90>)
 800b5c8:	4a17      	ldr	r2, [pc, #92]	; (800b628 <vcom_IoDeInit+0x90>)
 800b5ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	62da      	str	r2, [r3, #44]	; 0x2c
 800b5d2:	4b15      	ldr	r3, [pc, #84]	; (800b628 <vcom_IoDeInit+0x90>)
 800b5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	4013      	ands	r3, r2
 800b5da:	607b      	str	r3, [r7, #4]
 800b5dc:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800b5de:	230c      	movs	r3, #12
 800b5e0:	18fb      	adds	r3, r7, r3
 800b5e2:	2203      	movs	r2, #3
 800b5e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800b5e6:	230c      	movs	r3, #12
 800b5e8:	18fb      	adds	r3, r7, r3
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	609a      	str	r2, [r3, #8]
  
  GPIO_InitStructure.Pin =  USARTX_TX_PIN ;
 800b5ee:	230c      	movs	r3, #12
 800b5f0:	18fb      	adds	r3, r7, r3
 800b5f2:	2204      	movs	r2, #4
 800b5f4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 800b5f6:	230c      	movs	r3, #12
 800b5f8:	18fa      	adds	r2, r7, r3
 800b5fa:	23a0      	movs	r3, #160	; 0xa0
 800b5fc:	05db      	lsls	r3, r3, #23
 800b5fe:	0011      	movs	r1, r2
 800b600:	0018      	movs	r0, r3
 800b602:	f7fa f959 	bl	80058b8 <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pin =  USARTX_RX_PIN ;
 800b606:	230c      	movs	r3, #12
 800b608:	18fb      	adds	r3, r7, r3
 800b60a:	2208      	movs	r2, #8
 800b60c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(  USARTX_RX_GPIO_PORT, &GPIO_InitStructure ); 
 800b60e:	230c      	movs	r3, #12
 800b610:	18fa      	adds	r2, r7, r3
 800b612:	23a0      	movs	r3, #160	; 0xa0
 800b614:	05db      	lsls	r3, r3, #23
 800b616:	0011      	movs	r1, r2
 800b618:	0018      	movs	r0, r3
 800b61a:	f7fa f94d 	bl	80058b8 <HAL_GPIO_Init>
}
 800b61e:	46c0      	nop			; (mov r8, r8)
 800b620:	46bd      	mov	sp, r7
 800b622:	b008      	add	sp, #32
 800b624:	bd80      	pop	{r7, pc}
 800b626:	46c0      	nop			; (mov r8, r8)
 800b628:	40021000 	.word	0x40021000

0800b62c <HAL_UART_MspDeInit>:
  * @brief UART MSP DeInit
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  vcom_IoDeInit( );
 800b634:	f7ff ffb0 	bl	800b598 <vcom_IoDeInit>
}
 800b638:	46c0      	nop			; (mov r8, r8)
 800b63a:	46bd      	mov	sp, r7
 800b63c:	b002      	add	sp, #8
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <__libc_init_array>:
 800b640:	b570      	push	{r4, r5, r6, lr}
 800b642:	2600      	movs	r6, #0
 800b644:	4d0c      	ldr	r5, [pc, #48]	; (800b678 <__libc_init_array+0x38>)
 800b646:	4c0d      	ldr	r4, [pc, #52]	; (800b67c <__libc_init_array+0x3c>)
 800b648:	1b64      	subs	r4, r4, r5
 800b64a:	10a4      	asrs	r4, r4, #2
 800b64c:	42a6      	cmp	r6, r4
 800b64e:	d109      	bne.n	800b664 <__libc_init_array+0x24>
 800b650:	2600      	movs	r6, #0
 800b652:	f000 fdcd 	bl	800c1f0 <_init>
 800b656:	4d0a      	ldr	r5, [pc, #40]	; (800b680 <__libc_init_array+0x40>)
 800b658:	4c0a      	ldr	r4, [pc, #40]	; (800b684 <__libc_init_array+0x44>)
 800b65a:	1b64      	subs	r4, r4, r5
 800b65c:	10a4      	asrs	r4, r4, #2
 800b65e:	42a6      	cmp	r6, r4
 800b660:	d105      	bne.n	800b66e <__libc_init_array+0x2e>
 800b662:	bd70      	pop	{r4, r5, r6, pc}
 800b664:	00b3      	lsls	r3, r6, #2
 800b666:	58eb      	ldr	r3, [r5, r3]
 800b668:	4798      	blx	r3
 800b66a:	3601      	adds	r6, #1
 800b66c:	e7ee      	b.n	800b64c <__libc_init_array+0xc>
 800b66e:	00b3      	lsls	r3, r6, #2
 800b670:	58eb      	ldr	r3, [r5, r3]
 800b672:	4798      	blx	r3
 800b674:	3601      	adds	r6, #1
 800b676:	e7f2      	b.n	800b65e <__libc_init_array+0x1e>
 800b678:	0800c568 	.word	0x0800c568
 800b67c:	0800c568 	.word	0x0800c568
 800b680:	0800c568 	.word	0x0800c568
 800b684:	0800c56c 	.word	0x0800c56c

0800b688 <memcpy>:
 800b688:	2300      	movs	r3, #0
 800b68a:	b510      	push	{r4, lr}
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d100      	bne.n	800b692 <memcpy+0xa>
 800b690:	bd10      	pop	{r4, pc}
 800b692:	5ccc      	ldrb	r4, [r1, r3]
 800b694:	54c4      	strb	r4, [r0, r3]
 800b696:	3301      	adds	r3, #1
 800b698:	e7f8      	b.n	800b68c <memcpy+0x4>

0800b69a <memset>:
 800b69a:	0003      	movs	r3, r0
 800b69c:	1882      	adds	r2, r0, r2
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d100      	bne.n	800b6a4 <memset+0xa>
 800b6a2:	4770      	bx	lr
 800b6a4:	7019      	strb	r1, [r3, #0]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	e7f9      	b.n	800b69e <memset+0x4>

0800b6aa <strcpy>:
 800b6aa:	1c03      	adds	r3, r0, #0
 800b6ac:	780a      	ldrb	r2, [r1, #0]
 800b6ae:	3101      	adds	r1, #1
 800b6b0:	701a      	strb	r2, [r3, #0]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	2a00      	cmp	r2, #0
 800b6b6:	d1f9      	bne.n	800b6ac <strcpy+0x2>
 800b6b8:	4770      	bx	lr

0800b6ba <strncmp>:
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	b530      	push	{r4, r5, lr}
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d00a      	beq.n	800b6d8 <strncmp+0x1e>
 800b6c2:	3a01      	subs	r2, #1
 800b6c4:	5cc4      	ldrb	r4, [r0, r3]
 800b6c6:	5ccd      	ldrb	r5, [r1, r3]
 800b6c8:	42ac      	cmp	r4, r5
 800b6ca:	d104      	bne.n	800b6d6 <strncmp+0x1c>
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d002      	beq.n	800b6d6 <strncmp+0x1c>
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	2c00      	cmp	r4, #0
 800b6d4:	d1f6      	bne.n	800b6c4 <strncmp+0xa>
 800b6d6:	1b63      	subs	r3, r4, r5
 800b6d8:	0018      	movs	r0, r3
 800b6da:	bd30      	pop	{r4, r5, pc}

0800b6dc <strncpy>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	0004      	movs	r4, r0
 800b6e0:	2a00      	cmp	r2, #0
 800b6e2:	d100      	bne.n	800b6e6 <strncpy+0xa>
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
 800b6e6:	780d      	ldrb	r5, [r1, #0]
 800b6e8:	1e56      	subs	r6, r2, #1
 800b6ea:	1c63      	adds	r3, r4, #1
 800b6ec:	7025      	strb	r5, [r4, #0]
 800b6ee:	3101      	adds	r1, #1
 800b6f0:	2d00      	cmp	r5, #0
 800b6f2:	d105      	bne.n	800b700 <strncpy+0x24>
 800b6f4:	18a4      	adds	r4, r4, r2
 800b6f6:	429c      	cmp	r4, r3
 800b6f8:	d0f4      	beq.n	800b6e4 <strncpy+0x8>
 800b6fa:	701d      	strb	r5, [r3, #0]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	e7fa      	b.n	800b6f6 <strncpy+0x1a>
 800b700:	001c      	movs	r4, r3
 800b702:	0032      	movs	r2, r6
 800b704:	e7ec      	b.n	800b6e0 <strncpy+0x4>
	...

0800b708 <_vsiprintf_r>:
 800b708:	b530      	push	{r4, r5, lr}
 800b70a:	b09b      	sub	sp, #108	; 0x6c
 800b70c:	9100      	str	r1, [sp, #0]
 800b70e:	9104      	str	r1, [sp, #16]
 800b710:	4908      	ldr	r1, [pc, #32]	; (800b734 <_vsiprintf_r+0x2c>)
 800b712:	466d      	mov	r5, sp
 800b714:	9102      	str	r1, [sp, #8]
 800b716:	9105      	str	r1, [sp, #20]
 800b718:	2101      	movs	r1, #1
 800b71a:	2482      	movs	r4, #130	; 0x82
 800b71c:	4249      	negs	r1, r1
 800b71e:	81e9      	strh	r1, [r5, #14]
 800b720:	00a4      	lsls	r4, r4, #2
 800b722:	4669      	mov	r1, sp
 800b724:	81ac      	strh	r4, [r5, #12]
 800b726:	f000 f875 	bl	800b814 <_svfiprintf_r>
 800b72a:	2300      	movs	r3, #0
 800b72c:	9a00      	ldr	r2, [sp, #0]
 800b72e:	7013      	strb	r3, [r2, #0]
 800b730:	b01b      	add	sp, #108	; 0x6c
 800b732:	bd30      	pop	{r4, r5, pc}
 800b734:	7fffffff 	.word	0x7fffffff

0800b738 <vsiprintf>:
 800b738:	b510      	push	{r4, lr}
 800b73a:	0013      	movs	r3, r2
 800b73c:	000a      	movs	r2, r1
 800b73e:	0001      	movs	r1, r0
 800b740:	4802      	ldr	r0, [pc, #8]	; (800b74c <vsiprintf+0x14>)
 800b742:	6800      	ldr	r0, [r0, #0]
 800b744:	f7ff ffe0 	bl	800b708 <_vsiprintf_r>
 800b748:	bd10      	pop	{r4, pc}
 800b74a:	46c0      	nop			; (mov r8, r8)
 800b74c:	2000002c 	.word	0x2000002c

0800b750 <__ssputs_r>:
 800b750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b752:	688e      	ldr	r6, [r1, #8]
 800b754:	b085      	sub	sp, #20
 800b756:	0007      	movs	r7, r0
 800b758:	000c      	movs	r4, r1
 800b75a:	9203      	str	r2, [sp, #12]
 800b75c:	9301      	str	r3, [sp, #4]
 800b75e:	429e      	cmp	r6, r3
 800b760:	d839      	bhi.n	800b7d6 <__ssputs_r+0x86>
 800b762:	2390      	movs	r3, #144	; 0x90
 800b764:	898a      	ldrh	r2, [r1, #12]
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	421a      	tst	r2, r3
 800b76a:	d034      	beq.n	800b7d6 <__ssputs_r+0x86>
 800b76c:	2503      	movs	r5, #3
 800b76e:	6909      	ldr	r1, [r1, #16]
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	1a5b      	subs	r3, r3, r1
 800b774:	9302      	str	r3, [sp, #8]
 800b776:	6963      	ldr	r3, [r4, #20]
 800b778:	9802      	ldr	r0, [sp, #8]
 800b77a:	435d      	muls	r5, r3
 800b77c:	0feb      	lsrs	r3, r5, #31
 800b77e:	195d      	adds	r5, r3, r5
 800b780:	9b01      	ldr	r3, [sp, #4]
 800b782:	106d      	asrs	r5, r5, #1
 800b784:	3301      	adds	r3, #1
 800b786:	181b      	adds	r3, r3, r0
 800b788:	42ab      	cmp	r3, r5
 800b78a:	d900      	bls.n	800b78e <__ssputs_r+0x3e>
 800b78c:	001d      	movs	r5, r3
 800b78e:	0553      	lsls	r3, r2, #21
 800b790:	d532      	bpl.n	800b7f8 <__ssputs_r+0xa8>
 800b792:	0029      	movs	r1, r5
 800b794:	0038      	movs	r0, r7
 800b796:	f000 fb31 	bl	800bdfc <_malloc_r>
 800b79a:	1e06      	subs	r6, r0, #0
 800b79c:	d109      	bne.n	800b7b2 <__ssputs_r+0x62>
 800b79e:	230c      	movs	r3, #12
 800b7a0:	603b      	str	r3, [r7, #0]
 800b7a2:	2340      	movs	r3, #64	; 0x40
 800b7a4:	2001      	movs	r0, #1
 800b7a6:	89a2      	ldrh	r2, [r4, #12]
 800b7a8:	4240      	negs	r0, r0
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	81a3      	strh	r3, [r4, #12]
 800b7ae:	b005      	add	sp, #20
 800b7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7b2:	9a02      	ldr	r2, [sp, #8]
 800b7b4:	6921      	ldr	r1, [r4, #16]
 800b7b6:	f7ff ff67 	bl	800b688 <memcpy>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	4a14      	ldr	r2, [pc, #80]	; (800b810 <__ssputs_r+0xc0>)
 800b7be:	401a      	ands	r2, r3
 800b7c0:	2380      	movs	r3, #128	; 0x80
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	9b02      	ldr	r3, [sp, #8]
 800b7c8:	6126      	str	r6, [r4, #16]
 800b7ca:	18f6      	adds	r6, r6, r3
 800b7cc:	6026      	str	r6, [r4, #0]
 800b7ce:	6165      	str	r5, [r4, #20]
 800b7d0:	9e01      	ldr	r6, [sp, #4]
 800b7d2:	1aed      	subs	r5, r5, r3
 800b7d4:	60a5      	str	r5, [r4, #8]
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	42b3      	cmp	r3, r6
 800b7da:	d200      	bcs.n	800b7de <__ssputs_r+0x8e>
 800b7dc:	001e      	movs	r6, r3
 800b7de:	0032      	movs	r2, r6
 800b7e0:	9903      	ldr	r1, [sp, #12]
 800b7e2:	6820      	ldr	r0, [r4, #0]
 800b7e4:	f000 faad 	bl	800bd42 <memmove>
 800b7e8:	68a3      	ldr	r3, [r4, #8]
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	1b9b      	subs	r3, r3, r6
 800b7ee:	60a3      	str	r3, [r4, #8]
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	199e      	adds	r6, r3, r6
 800b7f4:	6026      	str	r6, [r4, #0]
 800b7f6:	e7da      	b.n	800b7ae <__ssputs_r+0x5e>
 800b7f8:	002a      	movs	r2, r5
 800b7fa:	0038      	movs	r0, r7
 800b7fc:	f000 fb5c 	bl	800beb8 <_realloc_r>
 800b800:	1e06      	subs	r6, r0, #0
 800b802:	d1e0      	bne.n	800b7c6 <__ssputs_r+0x76>
 800b804:	6921      	ldr	r1, [r4, #16]
 800b806:	0038      	movs	r0, r7
 800b808:	f000 faae 	bl	800bd68 <_free_r>
 800b80c:	e7c7      	b.n	800b79e <__ssputs_r+0x4e>
 800b80e:	46c0      	nop			; (mov r8, r8)
 800b810:	fffffb7f 	.word	0xfffffb7f

0800b814 <_svfiprintf_r>:
 800b814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b816:	b09f      	sub	sp, #124	; 0x7c
 800b818:	9002      	str	r0, [sp, #8]
 800b81a:	9305      	str	r3, [sp, #20]
 800b81c:	898b      	ldrh	r3, [r1, #12]
 800b81e:	000f      	movs	r7, r1
 800b820:	0016      	movs	r6, r2
 800b822:	061b      	lsls	r3, r3, #24
 800b824:	d511      	bpl.n	800b84a <_svfiprintf_r+0x36>
 800b826:	690b      	ldr	r3, [r1, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10e      	bne.n	800b84a <_svfiprintf_r+0x36>
 800b82c:	2140      	movs	r1, #64	; 0x40
 800b82e:	f000 fae5 	bl	800bdfc <_malloc_r>
 800b832:	6038      	str	r0, [r7, #0]
 800b834:	6138      	str	r0, [r7, #16]
 800b836:	2800      	cmp	r0, #0
 800b838:	d105      	bne.n	800b846 <_svfiprintf_r+0x32>
 800b83a:	230c      	movs	r3, #12
 800b83c:	9a02      	ldr	r2, [sp, #8]
 800b83e:	3801      	subs	r0, #1
 800b840:	6013      	str	r3, [r2, #0]
 800b842:	b01f      	add	sp, #124	; 0x7c
 800b844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b846:	2340      	movs	r3, #64	; 0x40
 800b848:	617b      	str	r3, [r7, #20]
 800b84a:	2300      	movs	r3, #0
 800b84c:	ad06      	add	r5, sp, #24
 800b84e:	616b      	str	r3, [r5, #20]
 800b850:	3320      	adds	r3, #32
 800b852:	766b      	strb	r3, [r5, #25]
 800b854:	3310      	adds	r3, #16
 800b856:	76ab      	strb	r3, [r5, #26]
 800b858:	0034      	movs	r4, r6
 800b85a:	7823      	ldrb	r3, [r4, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d147      	bne.n	800b8f0 <_svfiprintf_r+0xdc>
 800b860:	1ba3      	subs	r3, r4, r6
 800b862:	9304      	str	r3, [sp, #16]
 800b864:	d00d      	beq.n	800b882 <_svfiprintf_r+0x6e>
 800b866:	1ba3      	subs	r3, r4, r6
 800b868:	0032      	movs	r2, r6
 800b86a:	0039      	movs	r1, r7
 800b86c:	9802      	ldr	r0, [sp, #8]
 800b86e:	f7ff ff6f 	bl	800b750 <__ssputs_r>
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	d100      	bne.n	800b878 <_svfiprintf_r+0x64>
 800b876:	e0b5      	b.n	800b9e4 <_svfiprintf_r+0x1d0>
 800b878:	696a      	ldr	r2, [r5, #20]
 800b87a:	9b04      	ldr	r3, [sp, #16]
 800b87c:	4694      	mov	ip, r2
 800b87e:	4463      	add	r3, ip
 800b880:	616b      	str	r3, [r5, #20]
 800b882:	7823      	ldrb	r3, [r4, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d100      	bne.n	800b88a <_svfiprintf_r+0x76>
 800b888:	e0ac      	b.n	800b9e4 <_svfiprintf_r+0x1d0>
 800b88a:	2201      	movs	r2, #1
 800b88c:	2300      	movs	r3, #0
 800b88e:	4252      	negs	r2, r2
 800b890:	606a      	str	r2, [r5, #4]
 800b892:	a902      	add	r1, sp, #8
 800b894:	3254      	adds	r2, #84	; 0x54
 800b896:	1852      	adds	r2, r2, r1
 800b898:	3401      	adds	r4, #1
 800b89a:	602b      	str	r3, [r5, #0]
 800b89c:	60eb      	str	r3, [r5, #12]
 800b89e:	60ab      	str	r3, [r5, #8]
 800b8a0:	7013      	strb	r3, [r2, #0]
 800b8a2:	65ab      	str	r3, [r5, #88]	; 0x58
 800b8a4:	4e58      	ldr	r6, [pc, #352]	; (800ba08 <_svfiprintf_r+0x1f4>)
 800b8a6:	2205      	movs	r2, #5
 800b8a8:	7821      	ldrb	r1, [r4, #0]
 800b8aa:	0030      	movs	r0, r6
 800b8ac:	f000 fa3e 	bl	800bd2c <memchr>
 800b8b0:	1c62      	adds	r2, r4, #1
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d120      	bne.n	800b8f8 <_svfiprintf_r+0xe4>
 800b8b6:	6829      	ldr	r1, [r5, #0]
 800b8b8:	06cb      	lsls	r3, r1, #27
 800b8ba:	d504      	bpl.n	800b8c6 <_svfiprintf_r+0xb2>
 800b8bc:	2353      	movs	r3, #83	; 0x53
 800b8be:	ae02      	add	r6, sp, #8
 800b8c0:	3020      	adds	r0, #32
 800b8c2:	199b      	adds	r3, r3, r6
 800b8c4:	7018      	strb	r0, [r3, #0]
 800b8c6:	070b      	lsls	r3, r1, #28
 800b8c8:	d504      	bpl.n	800b8d4 <_svfiprintf_r+0xc0>
 800b8ca:	2353      	movs	r3, #83	; 0x53
 800b8cc:	202b      	movs	r0, #43	; 0x2b
 800b8ce:	ae02      	add	r6, sp, #8
 800b8d0:	199b      	adds	r3, r3, r6
 800b8d2:	7018      	strb	r0, [r3, #0]
 800b8d4:	7823      	ldrb	r3, [r4, #0]
 800b8d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b8d8:	d016      	beq.n	800b908 <_svfiprintf_r+0xf4>
 800b8da:	2000      	movs	r0, #0
 800b8dc:	210a      	movs	r1, #10
 800b8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e0:	7822      	ldrb	r2, [r4, #0]
 800b8e2:	3a30      	subs	r2, #48	; 0x30
 800b8e4:	2a09      	cmp	r2, #9
 800b8e6:	d955      	bls.n	800b994 <_svfiprintf_r+0x180>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d015      	beq.n	800b918 <_svfiprintf_r+0x104>
 800b8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ee:	e013      	b.n	800b918 <_svfiprintf_r+0x104>
 800b8f0:	2b25      	cmp	r3, #37	; 0x25
 800b8f2:	d0b5      	beq.n	800b860 <_svfiprintf_r+0x4c>
 800b8f4:	3401      	adds	r4, #1
 800b8f6:	e7b0      	b.n	800b85a <_svfiprintf_r+0x46>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	1b80      	subs	r0, r0, r6
 800b8fc:	4083      	lsls	r3, r0
 800b8fe:	6829      	ldr	r1, [r5, #0]
 800b900:	0014      	movs	r4, r2
 800b902:	430b      	orrs	r3, r1
 800b904:	602b      	str	r3, [r5, #0]
 800b906:	e7cd      	b.n	800b8a4 <_svfiprintf_r+0x90>
 800b908:	9b05      	ldr	r3, [sp, #20]
 800b90a:	1d18      	adds	r0, r3, #4
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	9005      	str	r0, [sp, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	db39      	blt.n	800b988 <_svfiprintf_r+0x174>
 800b914:	9309      	str	r3, [sp, #36]	; 0x24
 800b916:	0014      	movs	r4, r2
 800b918:	7823      	ldrb	r3, [r4, #0]
 800b91a:	2b2e      	cmp	r3, #46	; 0x2e
 800b91c:	d10b      	bne.n	800b936 <_svfiprintf_r+0x122>
 800b91e:	7863      	ldrb	r3, [r4, #1]
 800b920:	1c62      	adds	r2, r4, #1
 800b922:	2b2a      	cmp	r3, #42	; 0x2a
 800b924:	d13e      	bne.n	800b9a4 <_svfiprintf_r+0x190>
 800b926:	9b05      	ldr	r3, [sp, #20]
 800b928:	3402      	adds	r4, #2
 800b92a:	1d1a      	adds	r2, r3, #4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	9205      	str	r2, [sp, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	db34      	blt.n	800b99e <_svfiprintf_r+0x18a>
 800b934:	9307      	str	r3, [sp, #28]
 800b936:	4e35      	ldr	r6, [pc, #212]	; (800ba0c <_svfiprintf_r+0x1f8>)
 800b938:	7821      	ldrb	r1, [r4, #0]
 800b93a:	2203      	movs	r2, #3
 800b93c:	0030      	movs	r0, r6
 800b93e:	f000 f9f5 	bl	800bd2c <memchr>
 800b942:	2800      	cmp	r0, #0
 800b944:	d006      	beq.n	800b954 <_svfiprintf_r+0x140>
 800b946:	2340      	movs	r3, #64	; 0x40
 800b948:	1b80      	subs	r0, r0, r6
 800b94a:	4083      	lsls	r3, r0
 800b94c:	682a      	ldr	r2, [r5, #0]
 800b94e:	3401      	adds	r4, #1
 800b950:	4313      	orrs	r3, r2
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	7821      	ldrb	r1, [r4, #0]
 800b956:	2206      	movs	r2, #6
 800b958:	482d      	ldr	r0, [pc, #180]	; (800ba10 <_svfiprintf_r+0x1fc>)
 800b95a:	1c66      	adds	r6, r4, #1
 800b95c:	7629      	strb	r1, [r5, #24]
 800b95e:	f000 f9e5 	bl	800bd2c <memchr>
 800b962:	2800      	cmp	r0, #0
 800b964:	d046      	beq.n	800b9f4 <_svfiprintf_r+0x1e0>
 800b966:	4b2b      	ldr	r3, [pc, #172]	; (800ba14 <_svfiprintf_r+0x200>)
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d12f      	bne.n	800b9cc <_svfiprintf_r+0x1b8>
 800b96c:	6829      	ldr	r1, [r5, #0]
 800b96e:	9b05      	ldr	r3, [sp, #20]
 800b970:	2207      	movs	r2, #7
 800b972:	05c9      	lsls	r1, r1, #23
 800b974:	d528      	bpl.n	800b9c8 <_svfiprintf_r+0x1b4>
 800b976:	189b      	adds	r3, r3, r2
 800b978:	4393      	bics	r3, r2
 800b97a:	3308      	adds	r3, #8
 800b97c:	9305      	str	r3, [sp, #20]
 800b97e:	696b      	ldr	r3, [r5, #20]
 800b980:	9a03      	ldr	r2, [sp, #12]
 800b982:	189b      	adds	r3, r3, r2
 800b984:	616b      	str	r3, [r5, #20]
 800b986:	e767      	b.n	800b858 <_svfiprintf_r+0x44>
 800b988:	425b      	negs	r3, r3
 800b98a:	60eb      	str	r3, [r5, #12]
 800b98c:	2302      	movs	r3, #2
 800b98e:	430b      	orrs	r3, r1
 800b990:	602b      	str	r3, [r5, #0]
 800b992:	e7c0      	b.n	800b916 <_svfiprintf_r+0x102>
 800b994:	434b      	muls	r3, r1
 800b996:	3401      	adds	r4, #1
 800b998:	189b      	adds	r3, r3, r2
 800b99a:	2001      	movs	r0, #1
 800b99c:	e7a0      	b.n	800b8e0 <_svfiprintf_r+0xcc>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	425b      	negs	r3, r3
 800b9a2:	e7c7      	b.n	800b934 <_svfiprintf_r+0x120>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	0014      	movs	r4, r2
 800b9a8:	200a      	movs	r0, #10
 800b9aa:	001a      	movs	r2, r3
 800b9ac:	606b      	str	r3, [r5, #4]
 800b9ae:	7821      	ldrb	r1, [r4, #0]
 800b9b0:	3930      	subs	r1, #48	; 0x30
 800b9b2:	2909      	cmp	r1, #9
 800b9b4:	d903      	bls.n	800b9be <_svfiprintf_r+0x1aa>
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d0bd      	beq.n	800b936 <_svfiprintf_r+0x122>
 800b9ba:	9207      	str	r2, [sp, #28]
 800b9bc:	e7bb      	b.n	800b936 <_svfiprintf_r+0x122>
 800b9be:	4342      	muls	r2, r0
 800b9c0:	3401      	adds	r4, #1
 800b9c2:	1852      	adds	r2, r2, r1
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e7f2      	b.n	800b9ae <_svfiprintf_r+0x19a>
 800b9c8:	3307      	adds	r3, #7
 800b9ca:	e7d5      	b.n	800b978 <_svfiprintf_r+0x164>
 800b9cc:	ab05      	add	r3, sp, #20
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	003a      	movs	r2, r7
 800b9d2:	4b11      	ldr	r3, [pc, #68]	; (800ba18 <_svfiprintf_r+0x204>)
 800b9d4:	0029      	movs	r1, r5
 800b9d6:	9802      	ldr	r0, [sp, #8]
 800b9d8:	e000      	b.n	800b9dc <_svfiprintf_r+0x1c8>
 800b9da:	bf00      	nop
 800b9dc:	9003      	str	r0, [sp, #12]
 800b9de:	9b03      	ldr	r3, [sp, #12]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	d1cc      	bne.n	800b97e <_svfiprintf_r+0x16a>
 800b9e4:	89bb      	ldrh	r3, [r7, #12]
 800b9e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b9e8:	065b      	lsls	r3, r3, #25
 800b9ea:	d400      	bmi.n	800b9ee <_svfiprintf_r+0x1da>
 800b9ec:	e729      	b.n	800b842 <_svfiprintf_r+0x2e>
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	4240      	negs	r0, r0
 800b9f2:	e726      	b.n	800b842 <_svfiprintf_r+0x2e>
 800b9f4:	ab05      	add	r3, sp, #20
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	003a      	movs	r2, r7
 800b9fa:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <_svfiprintf_r+0x204>)
 800b9fc:	0029      	movs	r1, r5
 800b9fe:	9802      	ldr	r0, [sp, #8]
 800ba00:	f000 f87a 	bl	800baf8 <_printf_i>
 800ba04:	e7ea      	b.n	800b9dc <_svfiprintf_r+0x1c8>
 800ba06:	46c0      	nop			; (mov r8, r8)
 800ba08:	0800c52d 	.word	0x0800c52d
 800ba0c:	0800c533 	.word	0x0800c533
 800ba10:	0800c537 	.word	0x0800c537
 800ba14:	00000000 	.word	0x00000000
 800ba18:	0800b751 	.word	0x0800b751

0800ba1c <_printf_common>:
 800ba1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba1e:	0015      	movs	r5, r2
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	688a      	ldr	r2, [r1, #8]
 800ba24:	690b      	ldr	r3, [r1, #16]
 800ba26:	9000      	str	r0, [sp, #0]
 800ba28:	000c      	movs	r4, r1
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	da00      	bge.n	800ba30 <_printf_common+0x14>
 800ba2e:	0013      	movs	r3, r2
 800ba30:	0022      	movs	r2, r4
 800ba32:	602b      	str	r3, [r5, #0]
 800ba34:	3243      	adds	r2, #67	; 0x43
 800ba36:	7812      	ldrb	r2, [r2, #0]
 800ba38:	2a00      	cmp	r2, #0
 800ba3a:	d001      	beq.n	800ba40 <_printf_common+0x24>
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	602b      	str	r3, [r5, #0]
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	069b      	lsls	r3, r3, #26
 800ba44:	d502      	bpl.n	800ba4c <_printf_common+0x30>
 800ba46:	682b      	ldr	r3, [r5, #0]
 800ba48:	3302      	adds	r3, #2
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	2706      	movs	r7, #6
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	401f      	ands	r7, r3
 800ba52:	d027      	beq.n	800baa4 <_printf_common+0x88>
 800ba54:	0023      	movs	r3, r4
 800ba56:	3343      	adds	r3, #67	; 0x43
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	1e5a      	subs	r2, r3, #1
 800ba5c:	4193      	sbcs	r3, r2
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	0692      	lsls	r2, r2, #26
 800ba62:	d430      	bmi.n	800bac6 <_printf_common+0xaa>
 800ba64:	0022      	movs	r2, r4
 800ba66:	9901      	ldr	r1, [sp, #4]
 800ba68:	3243      	adds	r2, #67	; 0x43
 800ba6a:	9800      	ldr	r0, [sp, #0]
 800ba6c:	9e08      	ldr	r6, [sp, #32]
 800ba6e:	47b0      	blx	r6
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d025      	beq.n	800bac0 <_printf_common+0xa4>
 800ba74:	2306      	movs	r3, #6
 800ba76:	6820      	ldr	r0, [r4, #0]
 800ba78:	682a      	ldr	r2, [r5, #0]
 800ba7a:	68e1      	ldr	r1, [r4, #12]
 800ba7c:	4003      	ands	r3, r0
 800ba7e:	2500      	movs	r5, #0
 800ba80:	2b04      	cmp	r3, #4
 800ba82:	d103      	bne.n	800ba8c <_printf_common+0x70>
 800ba84:	1a8d      	subs	r5, r1, r2
 800ba86:	43eb      	mvns	r3, r5
 800ba88:	17db      	asrs	r3, r3, #31
 800ba8a:	401d      	ands	r5, r3
 800ba8c:	68a3      	ldr	r3, [r4, #8]
 800ba8e:	6922      	ldr	r2, [r4, #16]
 800ba90:	4293      	cmp	r3, r2
 800ba92:	dd01      	ble.n	800ba98 <_printf_common+0x7c>
 800ba94:	1a9b      	subs	r3, r3, r2
 800ba96:	18ed      	adds	r5, r5, r3
 800ba98:	2700      	movs	r7, #0
 800ba9a:	42bd      	cmp	r5, r7
 800ba9c:	d120      	bne.n	800bae0 <_printf_common+0xc4>
 800ba9e:	2000      	movs	r0, #0
 800baa0:	e010      	b.n	800bac4 <_printf_common+0xa8>
 800baa2:	3701      	adds	r7, #1
 800baa4:	68e3      	ldr	r3, [r4, #12]
 800baa6:	682a      	ldr	r2, [r5, #0]
 800baa8:	1a9b      	subs	r3, r3, r2
 800baaa:	429f      	cmp	r7, r3
 800baac:	dad2      	bge.n	800ba54 <_printf_common+0x38>
 800baae:	0022      	movs	r2, r4
 800bab0:	2301      	movs	r3, #1
 800bab2:	3219      	adds	r2, #25
 800bab4:	9901      	ldr	r1, [sp, #4]
 800bab6:	9800      	ldr	r0, [sp, #0]
 800bab8:	9e08      	ldr	r6, [sp, #32]
 800baba:	47b0      	blx	r6
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d1f0      	bne.n	800baa2 <_printf_common+0x86>
 800bac0:	2001      	movs	r0, #1
 800bac2:	4240      	negs	r0, r0
 800bac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bac6:	2030      	movs	r0, #48	; 0x30
 800bac8:	18e1      	adds	r1, r4, r3
 800baca:	3143      	adds	r1, #67	; 0x43
 800bacc:	7008      	strb	r0, [r1, #0]
 800bace:	0021      	movs	r1, r4
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	3145      	adds	r1, #69	; 0x45
 800bad4:	7809      	ldrb	r1, [r1, #0]
 800bad6:	18a2      	adds	r2, r4, r2
 800bad8:	3243      	adds	r2, #67	; 0x43
 800bada:	3302      	adds	r3, #2
 800badc:	7011      	strb	r1, [r2, #0]
 800bade:	e7c1      	b.n	800ba64 <_printf_common+0x48>
 800bae0:	0022      	movs	r2, r4
 800bae2:	2301      	movs	r3, #1
 800bae4:	321a      	adds	r2, #26
 800bae6:	9901      	ldr	r1, [sp, #4]
 800bae8:	9800      	ldr	r0, [sp, #0]
 800baea:	9e08      	ldr	r6, [sp, #32]
 800baec:	47b0      	blx	r6
 800baee:	1c43      	adds	r3, r0, #1
 800baf0:	d0e6      	beq.n	800bac0 <_printf_common+0xa4>
 800baf2:	3701      	adds	r7, #1
 800baf4:	e7d1      	b.n	800ba9a <_printf_common+0x7e>
	...

0800baf8 <_printf_i>:
 800baf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bafa:	b08b      	sub	sp, #44	; 0x2c
 800bafc:	9206      	str	r2, [sp, #24]
 800bafe:	000a      	movs	r2, r1
 800bb00:	3243      	adds	r2, #67	; 0x43
 800bb02:	9307      	str	r3, [sp, #28]
 800bb04:	9005      	str	r0, [sp, #20]
 800bb06:	9204      	str	r2, [sp, #16]
 800bb08:	7e0a      	ldrb	r2, [r1, #24]
 800bb0a:	000c      	movs	r4, r1
 800bb0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb0e:	2a6e      	cmp	r2, #110	; 0x6e
 800bb10:	d100      	bne.n	800bb14 <_printf_i+0x1c>
 800bb12:	e08f      	b.n	800bc34 <_printf_i+0x13c>
 800bb14:	d817      	bhi.n	800bb46 <_printf_i+0x4e>
 800bb16:	2a63      	cmp	r2, #99	; 0x63
 800bb18:	d02c      	beq.n	800bb74 <_printf_i+0x7c>
 800bb1a:	d808      	bhi.n	800bb2e <_printf_i+0x36>
 800bb1c:	2a00      	cmp	r2, #0
 800bb1e:	d100      	bne.n	800bb22 <_printf_i+0x2a>
 800bb20:	e099      	b.n	800bc56 <_printf_i+0x15e>
 800bb22:	2a58      	cmp	r2, #88	; 0x58
 800bb24:	d054      	beq.n	800bbd0 <_printf_i+0xd8>
 800bb26:	0026      	movs	r6, r4
 800bb28:	3642      	adds	r6, #66	; 0x42
 800bb2a:	7032      	strb	r2, [r6, #0]
 800bb2c:	e029      	b.n	800bb82 <_printf_i+0x8a>
 800bb2e:	2a64      	cmp	r2, #100	; 0x64
 800bb30:	d001      	beq.n	800bb36 <_printf_i+0x3e>
 800bb32:	2a69      	cmp	r2, #105	; 0x69
 800bb34:	d1f7      	bne.n	800bb26 <_printf_i+0x2e>
 800bb36:	6821      	ldr	r1, [r4, #0]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	0608      	lsls	r0, r1, #24
 800bb3c:	d523      	bpl.n	800bb86 <_printf_i+0x8e>
 800bb3e:	1d11      	adds	r1, r2, #4
 800bb40:	6019      	str	r1, [r3, #0]
 800bb42:	6815      	ldr	r5, [r2, #0]
 800bb44:	e025      	b.n	800bb92 <_printf_i+0x9a>
 800bb46:	2a73      	cmp	r2, #115	; 0x73
 800bb48:	d100      	bne.n	800bb4c <_printf_i+0x54>
 800bb4a:	e088      	b.n	800bc5e <_printf_i+0x166>
 800bb4c:	d808      	bhi.n	800bb60 <_printf_i+0x68>
 800bb4e:	2a6f      	cmp	r2, #111	; 0x6f
 800bb50:	d029      	beq.n	800bba6 <_printf_i+0xae>
 800bb52:	2a70      	cmp	r2, #112	; 0x70
 800bb54:	d1e7      	bne.n	800bb26 <_printf_i+0x2e>
 800bb56:	2220      	movs	r2, #32
 800bb58:	6809      	ldr	r1, [r1, #0]
 800bb5a:	430a      	orrs	r2, r1
 800bb5c:	6022      	str	r2, [r4, #0]
 800bb5e:	e003      	b.n	800bb68 <_printf_i+0x70>
 800bb60:	2a75      	cmp	r2, #117	; 0x75
 800bb62:	d020      	beq.n	800bba6 <_printf_i+0xae>
 800bb64:	2a78      	cmp	r2, #120	; 0x78
 800bb66:	d1de      	bne.n	800bb26 <_printf_i+0x2e>
 800bb68:	0022      	movs	r2, r4
 800bb6a:	2178      	movs	r1, #120	; 0x78
 800bb6c:	3245      	adds	r2, #69	; 0x45
 800bb6e:	7011      	strb	r1, [r2, #0]
 800bb70:	4a6c      	ldr	r2, [pc, #432]	; (800bd24 <_printf_i+0x22c>)
 800bb72:	e030      	b.n	800bbd6 <_printf_i+0xde>
 800bb74:	000e      	movs	r6, r1
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	3642      	adds	r6, #66	; 0x42
 800bb7a:	1d11      	adds	r1, r2, #4
 800bb7c:	6019      	str	r1, [r3, #0]
 800bb7e:	6813      	ldr	r3, [r2, #0]
 800bb80:	7033      	strb	r3, [r6, #0]
 800bb82:	2301      	movs	r3, #1
 800bb84:	e079      	b.n	800bc7a <_printf_i+0x182>
 800bb86:	0649      	lsls	r1, r1, #25
 800bb88:	d5d9      	bpl.n	800bb3e <_printf_i+0x46>
 800bb8a:	1d11      	adds	r1, r2, #4
 800bb8c:	6019      	str	r1, [r3, #0]
 800bb8e:	2300      	movs	r3, #0
 800bb90:	5ed5      	ldrsh	r5, [r2, r3]
 800bb92:	2d00      	cmp	r5, #0
 800bb94:	da03      	bge.n	800bb9e <_printf_i+0xa6>
 800bb96:	232d      	movs	r3, #45	; 0x2d
 800bb98:	9a04      	ldr	r2, [sp, #16]
 800bb9a:	426d      	negs	r5, r5
 800bb9c:	7013      	strb	r3, [r2, #0]
 800bb9e:	4b62      	ldr	r3, [pc, #392]	; (800bd28 <_printf_i+0x230>)
 800bba0:	270a      	movs	r7, #10
 800bba2:	9303      	str	r3, [sp, #12]
 800bba4:	e02f      	b.n	800bc06 <_printf_i+0x10e>
 800bba6:	6820      	ldr	r0, [r4, #0]
 800bba8:	6819      	ldr	r1, [r3, #0]
 800bbaa:	0605      	lsls	r5, r0, #24
 800bbac:	d503      	bpl.n	800bbb6 <_printf_i+0xbe>
 800bbae:	1d08      	adds	r0, r1, #4
 800bbb0:	6018      	str	r0, [r3, #0]
 800bbb2:	680d      	ldr	r5, [r1, #0]
 800bbb4:	e005      	b.n	800bbc2 <_printf_i+0xca>
 800bbb6:	0640      	lsls	r0, r0, #25
 800bbb8:	d5f9      	bpl.n	800bbae <_printf_i+0xb6>
 800bbba:	680d      	ldr	r5, [r1, #0]
 800bbbc:	1d08      	adds	r0, r1, #4
 800bbbe:	6018      	str	r0, [r3, #0]
 800bbc0:	b2ad      	uxth	r5, r5
 800bbc2:	4b59      	ldr	r3, [pc, #356]	; (800bd28 <_printf_i+0x230>)
 800bbc4:	2708      	movs	r7, #8
 800bbc6:	9303      	str	r3, [sp, #12]
 800bbc8:	2a6f      	cmp	r2, #111	; 0x6f
 800bbca:	d018      	beq.n	800bbfe <_printf_i+0x106>
 800bbcc:	270a      	movs	r7, #10
 800bbce:	e016      	b.n	800bbfe <_printf_i+0x106>
 800bbd0:	3145      	adds	r1, #69	; 0x45
 800bbd2:	700a      	strb	r2, [r1, #0]
 800bbd4:	4a54      	ldr	r2, [pc, #336]	; (800bd28 <_printf_i+0x230>)
 800bbd6:	9203      	str	r2, [sp, #12]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	6821      	ldr	r1, [r4, #0]
 800bbdc:	1d10      	adds	r0, r2, #4
 800bbde:	6018      	str	r0, [r3, #0]
 800bbe0:	6815      	ldr	r5, [r2, #0]
 800bbe2:	0608      	lsls	r0, r1, #24
 800bbe4:	d522      	bpl.n	800bc2c <_printf_i+0x134>
 800bbe6:	07cb      	lsls	r3, r1, #31
 800bbe8:	d502      	bpl.n	800bbf0 <_printf_i+0xf8>
 800bbea:	2320      	movs	r3, #32
 800bbec:	4319      	orrs	r1, r3
 800bbee:	6021      	str	r1, [r4, #0]
 800bbf0:	2710      	movs	r7, #16
 800bbf2:	2d00      	cmp	r5, #0
 800bbf4:	d103      	bne.n	800bbfe <_printf_i+0x106>
 800bbf6:	2320      	movs	r3, #32
 800bbf8:	6822      	ldr	r2, [r4, #0]
 800bbfa:	439a      	bics	r2, r3
 800bbfc:	6022      	str	r2, [r4, #0]
 800bbfe:	0023      	movs	r3, r4
 800bc00:	2200      	movs	r2, #0
 800bc02:	3343      	adds	r3, #67	; 0x43
 800bc04:	701a      	strb	r2, [r3, #0]
 800bc06:	6863      	ldr	r3, [r4, #4]
 800bc08:	60a3      	str	r3, [r4, #8]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	db5c      	blt.n	800bcc8 <_printf_i+0x1d0>
 800bc0e:	2204      	movs	r2, #4
 800bc10:	6821      	ldr	r1, [r4, #0]
 800bc12:	4391      	bics	r1, r2
 800bc14:	6021      	str	r1, [r4, #0]
 800bc16:	2d00      	cmp	r5, #0
 800bc18:	d158      	bne.n	800bccc <_printf_i+0x1d4>
 800bc1a:	9e04      	ldr	r6, [sp, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d064      	beq.n	800bcea <_printf_i+0x1f2>
 800bc20:	0026      	movs	r6, r4
 800bc22:	9b03      	ldr	r3, [sp, #12]
 800bc24:	3642      	adds	r6, #66	; 0x42
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	7033      	strb	r3, [r6, #0]
 800bc2a:	e05e      	b.n	800bcea <_printf_i+0x1f2>
 800bc2c:	0648      	lsls	r0, r1, #25
 800bc2e:	d5da      	bpl.n	800bbe6 <_printf_i+0xee>
 800bc30:	b2ad      	uxth	r5, r5
 800bc32:	e7d8      	b.n	800bbe6 <_printf_i+0xee>
 800bc34:	6809      	ldr	r1, [r1, #0]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	0608      	lsls	r0, r1, #24
 800bc3a:	d505      	bpl.n	800bc48 <_printf_i+0x150>
 800bc3c:	1d11      	adds	r1, r2, #4
 800bc3e:	6019      	str	r1, [r3, #0]
 800bc40:	6813      	ldr	r3, [r2, #0]
 800bc42:	6962      	ldr	r2, [r4, #20]
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	e006      	b.n	800bc56 <_printf_i+0x15e>
 800bc48:	0649      	lsls	r1, r1, #25
 800bc4a:	d5f7      	bpl.n	800bc3c <_printf_i+0x144>
 800bc4c:	1d11      	adds	r1, r2, #4
 800bc4e:	6019      	str	r1, [r3, #0]
 800bc50:	6813      	ldr	r3, [r2, #0]
 800bc52:	8aa2      	ldrh	r2, [r4, #20]
 800bc54:	801a      	strh	r2, [r3, #0]
 800bc56:	2300      	movs	r3, #0
 800bc58:	9e04      	ldr	r6, [sp, #16]
 800bc5a:	6123      	str	r3, [r4, #16]
 800bc5c:	e054      	b.n	800bd08 <_printf_i+0x210>
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	1d11      	adds	r1, r2, #4
 800bc62:	6019      	str	r1, [r3, #0]
 800bc64:	6816      	ldr	r6, [r2, #0]
 800bc66:	2100      	movs	r1, #0
 800bc68:	6862      	ldr	r2, [r4, #4]
 800bc6a:	0030      	movs	r0, r6
 800bc6c:	f000 f85e 	bl	800bd2c <memchr>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d001      	beq.n	800bc78 <_printf_i+0x180>
 800bc74:	1b80      	subs	r0, r0, r6
 800bc76:	6060      	str	r0, [r4, #4]
 800bc78:	6863      	ldr	r3, [r4, #4]
 800bc7a:	6123      	str	r3, [r4, #16]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	9a04      	ldr	r2, [sp, #16]
 800bc80:	7013      	strb	r3, [r2, #0]
 800bc82:	e041      	b.n	800bd08 <_printf_i+0x210>
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	0032      	movs	r2, r6
 800bc88:	9906      	ldr	r1, [sp, #24]
 800bc8a:	9805      	ldr	r0, [sp, #20]
 800bc8c:	9d07      	ldr	r5, [sp, #28]
 800bc8e:	47a8      	blx	r5
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	d043      	beq.n	800bd1c <_printf_i+0x224>
 800bc94:	6823      	ldr	r3, [r4, #0]
 800bc96:	2500      	movs	r5, #0
 800bc98:	079b      	lsls	r3, r3, #30
 800bc9a:	d40f      	bmi.n	800bcbc <_printf_i+0x1c4>
 800bc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc9e:	68e0      	ldr	r0, [r4, #12]
 800bca0:	4298      	cmp	r0, r3
 800bca2:	da3d      	bge.n	800bd20 <_printf_i+0x228>
 800bca4:	0018      	movs	r0, r3
 800bca6:	e03b      	b.n	800bd20 <_printf_i+0x228>
 800bca8:	0022      	movs	r2, r4
 800bcaa:	2301      	movs	r3, #1
 800bcac:	3219      	adds	r2, #25
 800bcae:	9906      	ldr	r1, [sp, #24]
 800bcb0:	9805      	ldr	r0, [sp, #20]
 800bcb2:	9e07      	ldr	r6, [sp, #28]
 800bcb4:	47b0      	blx	r6
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	d030      	beq.n	800bd1c <_printf_i+0x224>
 800bcba:	3501      	adds	r5, #1
 800bcbc:	68e3      	ldr	r3, [r4, #12]
 800bcbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcc0:	1a9b      	subs	r3, r3, r2
 800bcc2:	429d      	cmp	r5, r3
 800bcc4:	dbf0      	blt.n	800bca8 <_printf_i+0x1b0>
 800bcc6:	e7e9      	b.n	800bc9c <_printf_i+0x1a4>
 800bcc8:	2d00      	cmp	r5, #0
 800bcca:	d0a9      	beq.n	800bc20 <_printf_i+0x128>
 800bccc:	9e04      	ldr	r6, [sp, #16]
 800bcce:	0028      	movs	r0, r5
 800bcd0:	0039      	movs	r1, r7
 800bcd2:	f7f4 fa9f 	bl	8000214 <__aeabi_uidivmod>
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	3e01      	subs	r6, #1
 800bcda:	5c5b      	ldrb	r3, [r3, r1]
 800bcdc:	0028      	movs	r0, r5
 800bcde:	7033      	strb	r3, [r6, #0]
 800bce0:	0039      	movs	r1, r7
 800bce2:	f7f4 fa11 	bl	8000108 <__udivsi3>
 800bce6:	1e05      	subs	r5, r0, #0
 800bce8:	d1f1      	bne.n	800bcce <_printf_i+0x1d6>
 800bcea:	2f08      	cmp	r7, #8
 800bcec:	d109      	bne.n	800bd02 <_printf_i+0x20a>
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	07db      	lsls	r3, r3, #31
 800bcf2:	d506      	bpl.n	800bd02 <_printf_i+0x20a>
 800bcf4:	6863      	ldr	r3, [r4, #4]
 800bcf6:	6922      	ldr	r2, [r4, #16]
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	dc02      	bgt.n	800bd02 <_printf_i+0x20a>
 800bcfc:	2330      	movs	r3, #48	; 0x30
 800bcfe:	3e01      	subs	r6, #1
 800bd00:	7033      	strb	r3, [r6, #0]
 800bd02:	9b04      	ldr	r3, [sp, #16]
 800bd04:	1b9b      	subs	r3, r3, r6
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	9b07      	ldr	r3, [sp, #28]
 800bd0a:	aa09      	add	r2, sp, #36	; 0x24
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	0021      	movs	r1, r4
 800bd10:	9b06      	ldr	r3, [sp, #24]
 800bd12:	9805      	ldr	r0, [sp, #20]
 800bd14:	f7ff fe82 	bl	800ba1c <_printf_common>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d1b3      	bne.n	800bc84 <_printf_i+0x18c>
 800bd1c:	2001      	movs	r0, #1
 800bd1e:	4240      	negs	r0, r0
 800bd20:	b00b      	add	sp, #44	; 0x2c
 800bd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd24:	0800c54f 	.word	0x0800c54f
 800bd28:	0800c53e 	.word	0x0800c53e

0800bd2c <memchr>:
 800bd2c:	b2c9      	uxtb	r1, r1
 800bd2e:	1882      	adds	r2, r0, r2
 800bd30:	4290      	cmp	r0, r2
 800bd32:	d101      	bne.n	800bd38 <memchr+0xc>
 800bd34:	2000      	movs	r0, #0
 800bd36:	4770      	bx	lr
 800bd38:	7803      	ldrb	r3, [r0, #0]
 800bd3a:	428b      	cmp	r3, r1
 800bd3c:	d0fb      	beq.n	800bd36 <memchr+0xa>
 800bd3e:	3001      	adds	r0, #1
 800bd40:	e7f6      	b.n	800bd30 <memchr+0x4>

0800bd42 <memmove>:
 800bd42:	b510      	push	{r4, lr}
 800bd44:	4288      	cmp	r0, r1
 800bd46:	d902      	bls.n	800bd4e <memmove+0xc>
 800bd48:	188b      	adds	r3, r1, r2
 800bd4a:	4298      	cmp	r0, r3
 800bd4c:	d308      	bcc.n	800bd60 <memmove+0x1e>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d007      	beq.n	800bd64 <memmove+0x22>
 800bd54:	5ccc      	ldrb	r4, [r1, r3]
 800bd56:	54c4      	strb	r4, [r0, r3]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	e7f9      	b.n	800bd50 <memmove+0xe>
 800bd5c:	5c8b      	ldrb	r3, [r1, r2]
 800bd5e:	5483      	strb	r3, [r0, r2]
 800bd60:	3a01      	subs	r2, #1
 800bd62:	d2fb      	bcs.n	800bd5c <memmove+0x1a>
 800bd64:	bd10      	pop	{r4, pc}
	...

0800bd68 <_free_r>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	0005      	movs	r5, r0
 800bd6c:	2900      	cmp	r1, #0
 800bd6e:	d010      	beq.n	800bd92 <_free_r+0x2a>
 800bd70:	1f0c      	subs	r4, r1, #4
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	da00      	bge.n	800bd7a <_free_r+0x12>
 800bd78:	18e4      	adds	r4, r4, r3
 800bd7a:	0028      	movs	r0, r5
 800bd7c:	f000 f8d4 	bl	800bf28 <__malloc_lock>
 800bd80:	4a1d      	ldr	r2, [pc, #116]	; (800bdf8 <_free_r+0x90>)
 800bd82:	6813      	ldr	r3, [r2, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d105      	bne.n	800bd94 <_free_r+0x2c>
 800bd88:	6063      	str	r3, [r4, #4]
 800bd8a:	6014      	str	r4, [r2, #0]
 800bd8c:	0028      	movs	r0, r5
 800bd8e:	f000 f8cc 	bl	800bf2a <__malloc_unlock>
 800bd92:	bd70      	pop	{r4, r5, r6, pc}
 800bd94:	42a3      	cmp	r3, r4
 800bd96:	d909      	bls.n	800bdac <_free_r+0x44>
 800bd98:	6821      	ldr	r1, [r4, #0]
 800bd9a:	1860      	adds	r0, r4, r1
 800bd9c:	4283      	cmp	r3, r0
 800bd9e:	d1f3      	bne.n	800bd88 <_free_r+0x20>
 800bda0:	6818      	ldr	r0, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	1841      	adds	r1, r0, r1
 800bda6:	6021      	str	r1, [r4, #0]
 800bda8:	e7ee      	b.n	800bd88 <_free_r+0x20>
 800bdaa:	0013      	movs	r3, r2
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	2a00      	cmp	r2, #0
 800bdb0:	d001      	beq.n	800bdb6 <_free_r+0x4e>
 800bdb2:	42a2      	cmp	r2, r4
 800bdb4:	d9f9      	bls.n	800bdaa <_free_r+0x42>
 800bdb6:	6819      	ldr	r1, [r3, #0]
 800bdb8:	1858      	adds	r0, r3, r1
 800bdba:	42a0      	cmp	r0, r4
 800bdbc:	d10b      	bne.n	800bdd6 <_free_r+0x6e>
 800bdbe:	6820      	ldr	r0, [r4, #0]
 800bdc0:	1809      	adds	r1, r1, r0
 800bdc2:	1858      	adds	r0, r3, r1
 800bdc4:	6019      	str	r1, [r3, #0]
 800bdc6:	4282      	cmp	r2, r0
 800bdc8:	d1e0      	bne.n	800bd8c <_free_r+0x24>
 800bdca:	6810      	ldr	r0, [r2, #0]
 800bdcc:	6852      	ldr	r2, [r2, #4]
 800bdce:	1841      	adds	r1, r0, r1
 800bdd0:	6019      	str	r1, [r3, #0]
 800bdd2:	605a      	str	r2, [r3, #4]
 800bdd4:	e7da      	b.n	800bd8c <_free_r+0x24>
 800bdd6:	42a0      	cmp	r0, r4
 800bdd8:	d902      	bls.n	800bde0 <_free_r+0x78>
 800bdda:	230c      	movs	r3, #12
 800bddc:	602b      	str	r3, [r5, #0]
 800bdde:	e7d5      	b.n	800bd8c <_free_r+0x24>
 800bde0:	6821      	ldr	r1, [r4, #0]
 800bde2:	1860      	adds	r0, r4, r1
 800bde4:	4282      	cmp	r2, r0
 800bde6:	d103      	bne.n	800bdf0 <_free_r+0x88>
 800bde8:	6810      	ldr	r0, [r2, #0]
 800bdea:	6852      	ldr	r2, [r2, #4]
 800bdec:	1841      	adds	r1, r0, r1
 800bdee:	6021      	str	r1, [r4, #0]
 800bdf0:	6062      	str	r2, [r4, #4]
 800bdf2:	605c      	str	r4, [r3, #4]
 800bdf4:	e7ca      	b.n	800bd8c <_free_r+0x24>
 800bdf6:	46c0      	nop			; (mov r8, r8)
 800bdf8:	200004e0 	.word	0x200004e0

0800bdfc <_malloc_r>:
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	b570      	push	{r4, r5, r6, lr}
 800be00:	1ccd      	adds	r5, r1, #3
 800be02:	439d      	bics	r5, r3
 800be04:	3508      	adds	r5, #8
 800be06:	0006      	movs	r6, r0
 800be08:	2d0c      	cmp	r5, #12
 800be0a:	d21e      	bcs.n	800be4a <_malloc_r+0x4e>
 800be0c:	250c      	movs	r5, #12
 800be0e:	42a9      	cmp	r1, r5
 800be10:	d81d      	bhi.n	800be4e <_malloc_r+0x52>
 800be12:	0030      	movs	r0, r6
 800be14:	f000 f888 	bl	800bf28 <__malloc_lock>
 800be18:	4a25      	ldr	r2, [pc, #148]	; (800beb0 <_malloc_r+0xb4>)
 800be1a:	6814      	ldr	r4, [r2, #0]
 800be1c:	0021      	movs	r1, r4
 800be1e:	2900      	cmp	r1, #0
 800be20:	d119      	bne.n	800be56 <_malloc_r+0x5a>
 800be22:	4c24      	ldr	r4, [pc, #144]	; (800beb4 <_malloc_r+0xb8>)
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d103      	bne.n	800be32 <_malloc_r+0x36>
 800be2a:	0030      	movs	r0, r6
 800be2c:	f000 f86a 	bl	800bf04 <_sbrk_r>
 800be30:	6020      	str	r0, [r4, #0]
 800be32:	0029      	movs	r1, r5
 800be34:	0030      	movs	r0, r6
 800be36:	f000 f865 	bl	800bf04 <_sbrk_r>
 800be3a:	1c43      	adds	r3, r0, #1
 800be3c:	d12c      	bne.n	800be98 <_malloc_r+0x9c>
 800be3e:	230c      	movs	r3, #12
 800be40:	0030      	movs	r0, r6
 800be42:	6033      	str	r3, [r6, #0]
 800be44:	f000 f871 	bl	800bf2a <__malloc_unlock>
 800be48:	e003      	b.n	800be52 <_malloc_r+0x56>
 800be4a:	2d00      	cmp	r5, #0
 800be4c:	dadf      	bge.n	800be0e <_malloc_r+0x12>
 800be4e:	230c      	movs	r3, #12
 800be50:	6033      	str	r3, [r6, #0]
 800be52:	2000      	movs	r0, #0
 800be54:	bd70      	pop	{r4, r5, r6, pc}
 800be56:	680b      	ldr	r3, [r1, #0]
 800be58:	1b5b      	subs	r3, r3, r5
 800be5a:	d41a      	bmi.n	800be92 <_malloc_r+0x96>
 800be5c:	2b0b      	cmp	r3, #11
 800be5e:	d903      	bls.n	800be68 <_malloc_r+0x6c>
 800be60:	600b      	str	r3, [r1, #0]
 800be62:	18cc      	adds	r4, r1, r3
 800be64:	6025      	str	r5, [r4, #0]
 800be66:	e003      	b.n	800be70 <_malloc_r+0x74>
 800be68:	428c      	cmp	r4, r1
 800be6a:	d10e      	bne.n	800be8a <_malloc_r+0x8e>
 800be6c:	6863      	ldr	r3, [r4, #4]
 800be6e:	6013      	str	r3, [r2, #0]
 800be70:	0030      	movs	r0, r6
 800be72:	f000 f85a 	bl	800bf2a <__malloc_unlock>
 800be76:	0020      	movs	r0, r4
 800be78:	2207      	movs	r2, #7
 800be7a:	300b      	adds	r0, #11
 800be7c:	1d23      	adds	r3, r4, #4
 800be7e:	4390      	bics	r0, r2
 800be80:	1ac3      	subs	r3, r0, r3
 800be82:	d0e7      	beq.n	800be54 <_malloc_r+0x58>
 800be84:	425a      	negs	r2, r3
 800be86:	50e2      	str	r2, [r4, r3]
 800be88:	e7e4      	b.n	800be54 <_malloc_r+0x58>
 800be8a:	684b      	ldr	r3, [r1, #4]
 800be8c:	6063      	str	r3, [r4, #4]
 800be8e:	000c      	movs	r4, r1
 800be90:	e7ee      	b.n	800be70 <_malloc_r+0x74>
 800be92:	000c      	movs	r4, r1
 800be94:	6849      	ldr	r1, [r1, #4]
 800be96:	e7c2      	b.n	800be1e <_malloc_r+0x22>
 800be98:	2303      	movs	r3, #3
 800be9a:	1cc4      	adds	r4, r0, #3
 800be9c:	439c      	bics	r4, r3
 800be9e:	42a0      	cmp	r0, r4
 800bea0:	d0e0      	beq.n	800be64 <_malloc_r+0x68>
 800bea2:	1a21      	subs	r1, r4, r0
 800bea4:	0030      	movs	r0, r6
 800bea6:	f000 f82d 	bl	800bf04 <_sbrk_r>
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	d1da      	bne.n	800be64 <_malloc_r+0x68>
 800beae:	e7c6      	b.n	800be3e <_malloc_r+0x42>
 800beb0:	200004e0 	.word	0x200004e0
 800beb4:	200004e4 	.word	0x200004e4

0800beb8 <_realloc_r>:
 800beb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beba:	0007      	movs	r7, r0
 800bebc:	000d      	movs	r5, r1
 800bebe:	0016      	movs	r6, r2
 800bec0:	2900      	cmp	r1, #0
 800bec2:	d105      	bne.n	800bed0 <_realloc_r+0x18>
 800bec4:	0011      	movs	r1, r2
 800bec6:	f7ff ff99 	bl	800bdfc <_malloc_r>
 800beca:	0004      	movs	r4, r0
 800becc:	0020      	movs	r0, r4
 800bece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bed0:	2a00      	cmp	r2, #0
 800bed2:	d103      	bne.n	800bedc <_realloc_r+0x24>
 800bed4:	f7ff ff48 	bl	800bd68 <_free_r>
 800bed8:	0034      	movs	r4, r6
 800beda:	e7f7      	b.n	800becc <_realloc_r+0x14>
 800bedc:	f000 f826 	bl	800bf2c <_malloc_usable_size_r>
 800bee0:	002c      	movs	r4, r5
 800bee2:	4286      	cmp	r6, r0
 800bee4:	d9f2      	bls.n	800becc <_realloc_r+0x14>
 800bee6:	0031      	movs	r1, r6
 800bee8:	0038      	movs	r0, r7
 800beea:	f7ff ff87 	bl	800bdfc <_malloc_r>
 800beee:	1e04      	subs	r4, r0, #0
 800bef0:	d0ec      	beq.n	800becc <_realloc_r+0x14>
 800bef2:	0029      	movs	r1, r5
 800bef4:	0032      	movs	r2, r6
 800bef6:	f7ff fbc7 	bl	800b688 <memcpy>
 800befa:	0029      	movs	r1, r5
 800befc:	0038      	movs	r0, r7
 800befe:	f7ff ff33 	bl	800bd68 <_free_r>
 800bf02:	e7e3      	b.n	800becc <_realloc_r+0x14>

0800bf04 <_sbrk_r>:
 800bf04:	2300      	movs	r3, #0
 800bf06:	b570      	push	{r4, r5, r6, lr}
 800bf08:	4c06      	ldr	r4, [pc, #24]	; (800bf24 <_sbrk_r+0x20>)
 800bf0a:	0005      	movs	r5, r0
 800bf0c:	0008      	movs	r0, r1
 800bf0e:	6023      	str	r3, [r4, #0]
 800bf10:	f000 f95e 	bl	800c1d0 <_sbrk>
 800bf14:	1c43      	adds	r3, r0, #1
 800bf16:	d103      	bne.n	800bf20 <_sbrk_r+0x1c>
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d000      	beq.n	800bf20 <_sbrk_r+0x1c>
 800bf1e:	602b      	str	r3, [r5, #0]
 800bf20:	bd70      	pop	{r4, r5, r6, pc}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	200041f0 	.word	0x200041f0

0800bf28 <__malloc_lock>:
 800bf28:	4770      	bx	lr

0800bf2a <__malloc_unlock>:
 800bf2a:	4770      	bx	lr

0800bf2c <_malloc_usable_size_r>:
 800bf2c:	1f0b      	subs	r3, r1, #4
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	1f18      	subs	r0, r3, #4
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	da01      	bge.n	800bf3a <_malloc_usable_size_r+0xe>
 800bf36:	580b      	ldr	r3, [r1, r0]
 800bf38:	18c0      	adds	r0, r0, r3
 800bf3a:	4770      	bx	lr

0800bf3c <ceil>:
 800bf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3e:	004b      	lsls	r3, r1, #1
 800bf40:	4a39      	ldr	r2, [pc, #228]	; (800c028 <ceil+0xec>)
 800bf42:	0d5b      	lsrs	r3, r3, #21
 800bf44:	b085      	sub	sp, #20
 800bf46:	189e      	adds	r6, r3, r2
 800bf48:	9003      	str	r0, [sp, #12]
 800bf4a:	000c      	movs	r4, r1
 800bf4c:	0005      	movs	r5, r0
 800bf4e:	2e13      	cmp	r6, #19
 800bf50:	dc32      	bgt.n	800bfb8 <ceil+0x7c>
 800bf52:	2e00      	cmp	r6, #0
 800bf54:	da13      	bge.n	800bf7e <ceil+0x42>
 800bf56:	4a35      	ldr	r2, [pc, #212]	; (800c02c <ceil+0xf0>)
 800bf58:	4b35      	ldr	r3, [pc, #212]	; (800c030 <ceil+0xf4>)
 800bf5a:	f7f4 fe7b 	bl	8000c54 <__aeabi_dadd>
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2300      	movs	r3, #0
 800bf62:	f7f4 fa71 	bl	8000448 <__aeabi_dcmpgt>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d006      	beq.n	800bf78 <ceil+0x3c>
 800bf6a:	2c00      	cmp	r4, #0
 800bf6c:	db57      	blt.n	800c01e <ceil+0xe2>
 800bf6e:	432c      	orrs	r4, r5
 800bf70:	2500      	movs	r5, #0
 800bf72:	42ac      	cmp	r4, r5
 800bf74:	d000      	beq.n	800bf78 <ceil+0x3c>
 800bf76:	4c2f      	ldr	r4, [pc, #188]	; (800c034 <ceil+0xf8>)
 800bf78:	0028      	movs	r0, r5
 800bf7a:	0021      	movs	r1, r4
 800bf7c:	e026      	b.n	800bfcc <ceil+0x90>
 800bf7e:	4f2e      	ldr	r7, [pc, #184]	; (800c038 <ceil+0xfc>)
 800bf80:	4137      	asrs	r7, r6
 800bf82:	003b      	movs	r3, r7
 800bf84:	400b      	ands	r3, r1
 800bf86:	4303      	orrs	r3, r0
 800bf88:	d020      	beq.n	800bfcc <ceil+0x90>
 800bf8a:	9000      	str	r0, [sp, #0]
 800bf8c:	9101      	str	r1, [sp, #4]
 800bf8e:	4a27      	ldr	r2, [pc, #156]	; (800c02c <ceil+0xf0>)
 800bf90:	4b27      	ldr	r3, [pc, #156]	; (800c030 <ceil+0xf4>)
 800bf92:	9800      	ldr	r0, [sp, #0]
 800bf94:	9901      	ldr	r1, [sp, #4]
 800bf96:	f7f4 fe5d 	bl	8000c54 <__aeabi_dadd>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f7f4 fa53 	bl	8000448 <__aeabi_dcmpgt>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d0e8      	beq.n	800bf78 <ceil+0x3c>
 800bfa6:	2c00      	cmp	r4, #0
 800bfa8:	dd03      	ble.n	800bfb2 <ceil+0x76>
 800bfaa:	2380      	movs	r3, #128	; 0x80
 800bfac:	035b      	lsls	r3, r3, #13
 800bfae:	4133      	asrs	r3, r6
 800bfb0:	18e4      	adds	r4, r4, r3
 800bfb2:	43bc      	bics	r4, r7
 800bfb4:	2500      	movs	r5, #0
 800bfb6:	e7df      	b.n	800bf78 <ceil+0x3c>
 800bfb8:	2e33      	cmp	r6, #51	; 0x33
 800bfba:	dd09      	ble.n	800bfd0 <ceil+0x94>
 800bfbc:	2380      	movs	r3, #128	; 0x80
 800bfbe:	00db      	lsls	r3, r3, #3
 800bfc0:	429e      	cmp	r6, r3
 800bfc2:	d103      	bne.n	800bfcc <ceil+0x90>
 800bfc4:	0002      	movs	r2, r0
 800bfc6:	000b      	movs	r3, r1
 800bfc8:	f7f4 fe44 	bl	8000c54 <__aeabi_dadd>
 800bfcc:	b005      	add	sp, #20
 800bfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd0:	2701      	movs	r7, #1
 800bfd2:	4a1a      	ldr	r2, [pc, #104]	; (800c03c <ceil+0x100>)
 800bfd4:	427f      	negs	r7, r7
 800bfd6:	189b      	adds	r3, r3, r2
 800bfd8:	40df      	lsrs	r7, r3
 800bfda:	4207      	tst	r7, r0
 800bfdc:	d0f6      	beq.n	800bfcc <ceil+0x90>
 800bfde:	9000      	str	r0, [sp, #0]
 800bfe0:	9101      	str	r1, [sp, #4]
 800bfe2:	4a12      	ldr	r2, [pc, #72]	; (800c02c <ceil+0xf0>)
 800bfe4:	4b12      	ldr	r3, [pc, #72]	; (800c030 <ceil+0xf4>)
 800bfe6:	9800      	ldr	r0, [sp, #0]
 800bfe8:	9901      	ldr	r1, [sp, #4]
 800bfea:	f7f4 fe33 	bl	8000c54 <__aeabi_dadd>
 800bfee:	2200      	movs	r2, #0
 800bff0:	2300      	movs	r3, #0
 800bff2:	f7f4 fa29 	bl	8000448 <__aeabi_dcmpgt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d0be      	beq.n	800bf78 <ceil+0x3c>
 800bffa:	2c00      	cmp	r4, #0
 800bffc:	dd02      	ble.n	800c004 <ceil+0xc8>
 800bffe:	2e14      	cmp	r6, #20
 800c000:	d102      	bne.n	800c008 <ceil+0xcc>
 800c002:	3401      	adds	r4, #1
 800c004:	43bd      	bics	r5, r7
 800c006:	e7b7      	b.n	800bf78 <ceil+0x3c>
 800c008:	2334      	movs	r3, #52	; 0x34
 800c00a:	1b9e      	subs	r6, r3, r6
 800c00c:	3b33      	subs	r3, #51	; 0x33
 800c00e:	40b3      	lsls	r3, r6
 800c010:	18ed      	adds	r5, r5, r3
 800c012:	9b03      	ldr	r3, [sp, #12]
 800c014:	429d      	cmp	r5, r3
 800c016:	419b      	sbcs	r3, r3
 800c018:	425b      	negs	r3, r3
 800c01a:	18e4      	adds	r4, r4, r3
 800c01c:	e7f2      	b.n	800c004 <ceil+0xc8>
 800c01e:	2480      	movs	r4, #128	; 0x80
 800c020:	2500      	movs	r5, #0
 800c022:	0624      	lsls	r4, r4, #24
 800c024:	e7a8      	b.n	800bf78 <ceil+0x3c>
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	fffffc01 	.word	0xfffffc01
 800c02c:	8800759c 	.word	0x8800759c
 800c030:	7e37e43c 	.word	0x7e37e43c
 800c034:	3ff00000 	.word	0x3ff00000
 800c038:	000fffff 	.word	0x000fffff
 800c03c:	fffffbed 	.word	0xfffffbed

0800c040 <floor>:
 800c040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c042:	004b      	lsls	r3, r1, #1
 800c044:	4a39      	ldr	r2, [pc, #228]	; (800c12c <floor+0xec>)
 800c046:	0d5b      	lsrs	r3, r3, #21
 800c048:	b085      	sub	sp, #20
 800c04a:	189e      	adds	r6, r3, r2
 800c04c:	9003      	str	r0, [sp, #12]
 800c04e:	000c      	movs	r4, r1
 800c050:	0005      	movs	r5, r0
 800c052:	2e13      	cmp	r6, #19
 800c054:	dc34      	bgt.n	800c0c0 <floor+0x80>
 800c056:	2e00      	cmp	r6, #0
 800c058:	da15      	bge.n	800c086 <floor+0x46>
 800c05a:	4a35      	ldr	r2, [pc, #212]	; (800c130 <floor+0xf0>)
 800c05c:	4b35      	ldr	r3, [pc, #212]	; (800c134 <floor+0xf4>)
 800c05e:	f7f4 fdf9 	bl	8000c54 <__aeabi_dadd>
 800c062:	2200      	movs	r2, #0
 800c064:	2300      	movs	r3, #0
 800c066:	f7f4 f9ef 	bl	8000448 <__aeabi_dcmpgt>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d008      	beq.n	800c080 <floor+0x40>
 800c06e:	2c00      	cmp	r4, #0
 800c070:	da59      	bge.n	800c126 <floor+0xe6>
 800c072:	0063      	lsls	r3, r4, #1
 800c074:	085b      	lsrs	r3, r3, #1
 800c076:	432b      	orrs	r3, r5
 800c078:	2500      	movs	r5, #0
 800c07a:	42ab      	cmp	r3, r5
 800c07c:	d000      	beq.n	800c080 <floor+0x40>
 800c07e:	4c2e      	ldr	r4, [pc, #184]	; (800c138 <floor+0xf8>)
 800c080:	0028      	movs	r0, r5
 800c082:	0021      	movs	r1, r4
 800c084:	e026      	b.n	800c0d4 <floor+0x94>
 800c086:	4f2d      	ldr	r7, [pc, #180]	; (800c13c <floor+0xfc>)
 800c088:	4137      	asrs	r7, r6
 800c08a:	003b      	movs	r3, r7
 800c08c:	400b      	ands	r3, r1
 800c08e:	4303      	orrs	r3, r0
 800c090:	d020      	beq.n	800c0d4 <floor+0x94>
 800c092:	9000      	str	r0, [sp, #0]
 800c094:	9101      	str	r1, [sp, #4]
 800c096:	4a26      	ldr	r2, [pc, #152]	; (800c130 <floor+0xf0>)
 800c098:	4b26      	ldr	r3, [pc, #152]	; (800c134 <floor+0xf4>)
 800c09a:	9800      	ldr	r0, [sp, #0]
 800c09c:	9901      	ldr	r1, [sp, #4]
 800c09e:	f7f4 fdd9 	bl	8000c54 <__aeabi_dadd>
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f7f4 f9cf 	bl	8000448 <__aeabi_dcmpgt>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d0e8      	beq.n	800c080 <floor+0x40>
 800c0ae:	2c00      	cmp	r4, #0
 800c0b0:	da03      	bge.n	800c0ba <floor+0x7a>
 800c0b2:	2380      	movs	r3, #128	; 0x80
 800c0b4:	035b      	lsls	r3, r3, #13
 800c0b6:	4133      	asrs	r3, r6
 800c0b8:	18e4      	adds	r4, r4, r3
 800c0ba:	43bc      	bics	r4, r7
 800c0bc:	2500      	movs	r5, #0
 800c0be:	e7df      	b.n	800c080 <floor+0x40>
 800c0c0:	2e33      	cmp	r6, #51	; 0x33
 800c0c2:	dd09      	ble.n	800c0d8 <floor+0x98>
 800c0c4:	2380      	movs	r3, #128	; 0x80
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	429e      	cmp	r6, r3
 800c0ca:	d103      	bne.n	800c0d4 <floor+0x94>
 800c0cc:	0002      	movs	r2, r0
 800c0ce:	000b      	movs	r3, r1
 800c0d0:	f7f4 fdc0 	bl	8000c54 <__aeabi_dadd>
 800c0d4:	b005      	add	sp, #20
 800c0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0d8:	2701      	movs	r7, #1
 800c0da:	4a19      	ldr	r2, [pc, #100]	; (800c140 <floor+0x100>)
 800c0dc:	427f      	negs	r7, r7
 800c0de:	189b      	adds	r3, r3, r2
 800c0e0:	40df      	lsrs	r7, r3
 800c0e2:	4207      	tst	r7, r0
 800c0e4:	d0f6      	beq.n	800c0d4 <floor+0x94>
 800c0e6:	9000      	str	r0, [sp, #0]
 800c0e8:	9101      	str	r1, [sp, #4]
 800c0ea:	4a11      	ldr	r2, [pc, #68]	; (800c130 <floor+0xf0>)
 800c0ec:	4b11      	ldr	r3, [pc, #68]	; (800c134 <floor+0xf4>)
 800c0ee:	9800      	ldr	r0, [sp, #0]
 800c0f0:	9901      	ldr	r1, [sp, #4]
 800c0f2:	f7f4 fdaf 	bl	8000c54 <__aeabi_dadd>
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f7f4 f9a5 	bl	8000448 <__aeabi_dcmpgt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d0be      	beq.n	800c080 <floor+0x40>
 800c102:	2c00      	cmp	r4, #0
 800c104:	da02      	bge.n	800c10c <floor+0xcc>
 800c106:	2e14      	cmp	r6, #20
 800c108:	d102      	bne.n	800c110 <floor+0xd0>
 800c10a:	3401      	adds	r4, #1
 800c10c:	43bd      	bics	r5, r7
 800c10e:	e7b7      	b.n	800c080 <floor+0x40>
 800c110:	2334      	movs	r3, #52	; 0x34
 800c112:	1b9e      	subs	r6, r3, r6
 800c114:	3b33      	subs	r3, #51	; 0x33
 800c116:	40b3      	lsls	r3, r6
 800c118:	18ed      	adds	r5, r5, r3
 800c11a:	9b03      	ldr	r3, [sp, #12]
 800c11c:	429d      	cmp	r5, r3
 800c11e:	419b      	sbcs	r3, r3
 800c120:	425b      	negs	r3, r3
 800c122:	18e4      	adds	r4, r4, r3
 800c124:	e7f2      	b.n	800c10c <floor+0xcc>
 800c126:	2500      	movs	r5, #0
 800c128:	002c      	movs	r4, r5
 800c12a:	e7a9      	b.n	800c080 <floor+0x40>
 800c12c:	fffffc01 	.word	0xfffffc01
 800c130:	8800759c 	.word	0x8800759c
 800c134:	7e37e43c 	.word	0x7e37e43c
 800c138:	bff00000 	.word	0xbff00000
 800c13c:	000fffff 	.word	0x000fffff
 800c140:	fffffbed 	.word	0xfffffbed

0800c144 <round>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	004a      	lsls	r2, r1, #1
 800c148:	4d1d      	ldr	r5, [pc, #116]	; (800c1c0 <round+0x7c>)
 800c14a:	0d52      	lsrs	r2, r2, #21
 800c14c:	1955      	adds	r5, r2, r5
 800c14e:	000e      	movs	r6, r1
 800c150:	2d13      	cmp	r5, #19
 800c152:	dc18      	bgt.n	800c186 <round+0x42>
 800c154:	2d00      	cmp	r5, #0
 800c156:	da09      	bge.n	800c16c <round+0x28>
 800c158:	0fcb      	lsrs	r3, r1, #31
 800c15a:	07db      	lsls	r3, r3, #31
 800c15c:	2200      	movs	r2, #0
 800c15e:	1c69      	adds	r1, r5, #1
 800c160:	d101      	bne.n	800c166 <round+0x22>
 800c162:	4918      	ldr	r1, [pc, #96]	; (800c1c4 <round+0x80>)
 800c164:	430b      	orrs	r3, r1
 800c166:	0019      	movs	r1, r3
 800c168:	0010      	movs	r0, r2
 800c16a:	e016      	b.n	800c19a <round+0x56>
 800c16c:	4a16      	ldr	r2, [pc, #88]	; (800c1c8 <round+0x84>)
 800c16e:	412a      	asrs	r2, r5
 800c170:	420a      	tst	r2, r1
 800c172:	d101      	bne.n	800c178 <round+0x34>
 800c174:	2800      	cmp	r0, #0
 800c176:	d010      	beq.n	800c19a <round+0x56>
 800c178:	2380      	movs	r3, #128	; 0x80
 800c17a:	031b      	lsls	r3, r3, #12
 800c17c:	412b      	asrs	r3, r5
 800c17e:	199b      	adds	r3, r3, r6
 800c180:	4393      	bics	r3, r2
 800c182:	2200      	movs	r2, #0
 800c184:	e7ef      	b.n	800c166 <round+0x22>
 800c186:	2d33      	cmp	r5, #51	; 0x33
 800c188:	dd08      	ble.n	800c19c <round+0x58>
 800c18a:	2380      	movs	r3, #128	; 0x80
 800c18c:	00db      	lsls	r3, r3, #3
 800c18e:	429d      	cmp	r5, r3
 800c190:	d103      	bne.n	800c19a <round+0x56>
 800c192:	0002      	movs	r2, r0
 800c194:	000b      	movs	r3, r1
 800c196:	f7f4 fd5d 	bl	8000c54 <__aeabi_dadd>
 800c19a:	bd70      	pop	{r4, r5, r6, pc}
 800c19c:	4e0b      	ldr	r6, [pc, #44]	; (800c1cc <round+0x88>)
 800c19e:	1992      	adds	r2, r2, r6
 800c1a0:	2601      	movs	r6, #1
 800c1a2:	4276      	negs	r6, r6
 800c1a4:	40d6      	lsrs	r6, r2
 800c1a6:	4206      	tst	r6, r0
 800c1a8:	d0f7      	beq.n	800c19a <round+0x56>
 800c1aa:	2233      	movs	r2, #51	; 0x33
 800c1ac:	1b55      	subs	r5, r2, r5
 800c1ae:	3a32      	subs	r2, #50	; 0x32
 800c1b0:	40aa      	lsls	r2, r5
 800c1b2:	1812      	adds	r2, r2, r0
 800c1b4:	4282      	cmp	r2, r0
 800c1b6:	41a4      	sbcs	r4, r4
 800c1b8:	4264      	negs	r4, r4
 800c1ba:	190b      	adds	r3, r1, r4
 800c1bc:	43b2      	bics	r2, r6
 800c1be:	e7d2      	b.n	800c166 <round+0x22>
 800c1c0:	fffffc01 	.word	0xfffffc01
 800c1c4:	3ff00000 	.word	0x3ff00000
 800c1c8:	000fffff 	.word	0x000fffff
 800c1cc:	fffffbed 	.word	0xfffffbed

0800c1d0 <_sbrk>:
 800c1d0:	4b05      	ldr	r3, [pc, #20]	; (800c1e8 <_sbrk+0x18>)
 800c1d2:	0002      	movs	r2, r0
 800c1d4:	6819      	ldr	r1, [r3, #0]
 800c1d6:	2900      	cmp	r1, #0
 800c1d8:	d101      	bne.n	800c1de <_sbrk+0xe>
 800c1da:	4904      	ldr	r1, [pc, #16]	; (800c1ec <_sbrk+0x1c>)
 800c1dc:	6019      	str	r1, [r3, #0]
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	1882      	adds	r2, r0, r2
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	4770      	bx	lr
 800c1e6:	46c0      	nop			; (mov r8, r8)
 800c1e8:	200004e8 	.word	0x200004e8
 800c1ec:	200041f4 	.word	0x200041f4

0800c1f0 <_init>:
 800c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1f6:	bc08      	pop	{r3}
 800c1f8:	469e      	mov	lr, r3
 800c1fa:	4770      	bx	lr

0800c1fc <_fini>:
 800c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fe:	46c0      	nop			; (mov r8, r8)
 800c200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c202:	bc08      	pop	{r3}
 800c204:	469e      	mov	lr, r3
 800c206:	4770      	bx	lr
